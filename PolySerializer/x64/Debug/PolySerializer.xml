<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PolySerializer</name>
    </assembly>
    <members>
        <member name="T:PolySerializer.IInserter">
            <summary>
                Public interface of an inserter.
            </summary>
        </member>
        <member name="P:PolySerializer.IInserter.Description">
            <summary>
                Description of the set of collections supported.
            </summary>
        </member>
        <member name="M:PolySerializer.IInserter.TrySetReference(System.Object,System.Type,System.Type@)">
            <summary>
                Checks if <paramref name="reference"/> with base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, the saves the reference for future calls to <see cref="M:PolySerializer.IInserter.AddItem(System.Object)"/> and returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="reference">The collection to check.</param>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.IInserter.TryMatchType(System.Type,System.Type@)">
            <summary>
                Checks if base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection type, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.IInserter.AddItem(System.Object)">
            <summary>
                Adds an item to the collection passed to <see cref="M:PolySerializer.IInserter.TrySetReference(System.Object,System.Type,System.Type@)"/>.
            </summary>
            <parameters>
            <param name="item">The item to add.</param>
            </parameters>
        </member>
        <member name="T:PolySerializer.ArrayInserter">
            <summary>
                Inserter for arrays.
            </summary>
        </member>
        <member name="P:PolySerializer.ArrayInserter.Description">
            <summary>
                Description of the set of collections supported.
            </summary>
        </member>
        <member name="P:PolySerializer.ArrayInserter.Reference">
            <summary>
                Array to which items will be added.
            </summary>
        </member>
        <member name="P:PolySerializer.ArrayInserter.Index">
            <summary>
                Index of the slow where the next item will be inserted.
            </summary>
        </member>
        <member name="M:PolySerializer.ArrayInserter.TrySetReference(System.Object,System.Type,System.Type@)">
            <summary>
                Checks if <paramref name="reference"/> with base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, the saves the reference for future calls to <see cref="M:PolySerializer.ArrayInserter.AddItem(System.Object)"/> and returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="reference">The collection to check.</param>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.ArrayInserter.TryMatchType(System.Type,System.Type@)">
            <summary>
                Checks if base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection type, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.ArrayInserter.AddItem(System.Object)">
            <summary>
                Adds an item to the collection passed to <see cref="M:PolySerializer.ArrayInserter.TrySetReference(System.Object,System.Type,System.Type@)"/>.
            </summary>
            <parameters>
            <param name="item">The item to add.</param>
            </parameters>
        </member>
        <member name="T:PolySerializer.ListInserter">
            <summary>
                Inserter for lists.
            </summary>
        </member>
        <member name="P:PolySerializer.ListInserter.Description">
            <summary>
                Description of the set of collections supported.
            </summary>
        </member>
        <member name="P:PolySerializer.ListInserter.Reference">
            <summary>
                List to which items will be added.
            </summary>
        </member>
        <member name="M:PolySerializer.ListInserter.TrySetReference(System.Object,System.Type,System.Type@)">
            <summary>
                Checks if <paramref name="reference"/> with base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, the saves the reference for future calls to <see cref="M:PolySerializer.ListInserter.AddItem(System.Object)"/> and returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="reference">The collection to check.</param>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.ListInserter.TryMatchType(System.Type,System.Type@)">
            <summary>
                Checks if base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection type, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.ListInserter.AddItem(System.Object)">
            <summary>
                Adds an item to the collection passed to <see cref="M:PolySerializer.ListInserter.TrySetReference(System.Object,System.Type,System.Type@)"/>.
            </summary>
            <parameters>
            <param name="item">The item to add.</param>
            </parameters>
        </member>
        <member name="T:PolySerializer.GenericAddInserter">
            <summary>
                Inserter for any class that supports the Add() method.
            </summary>
        </member>
        <member name="P:PolySerializer.GenericAddInserter.Description">
            <summary>
                Description of the set of collections supported.
            </summary>
        </member>
        <member name="P:PolySerializer.GenericAddInserter.Reference">
            <summary>
                List to which items will be added.
            </summary>
        </member>
        <member name="P:PolySerializer.GenericAddInserter.AddMethod">
            <summary>
                Method of the class called to add an item.
            </summary>
        </member>
        <member name="M:PolySerializer.GenericAddInserter.TrySetReference(System.Object,System.Type,System.Type@)">
            <summary>
                Checks if <paramref name="reference"/> with base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, the saves the reference for future calls to <see cref="M:PolySerializer.GenericAddInserter.AddItem(System.Object)"/> and returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="reference">The collection to check.</param>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.GenericAddInserter.TryMatchType(System.Type,System.Type@)">
            <summary>
                Checks if base type <paramref name="referenceType"/> can be handled by this inserter.
                If so, returns the type of items for this collection.
            </summary>
            <parameters>
            <param name="referenceType">The collection base type.</param>
            <param name="itemType">The type of items in the collection.</param>
            </parameters>
            <returns>
                True if the inserter can handle the collection type, false otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.GenericAddInserter.AddItem(System.Object)">
            <summary>
                Adds an item to the collection passed to <see cref="M:PolySerializer.GenericAddInserter.TrySetReference(System.Object,System.Type,System.Type@)"/>.
            </summary>
            <parameters>
            <param name="item">The item to add.</param>
            </parameters>
        </member>
        <member name="T:PolySerializer.NamespaceDescriptor">
            <summary>
            Perform partial search/replace in assembly qualified type names.
            </summary>
        </member>
        <member name="F:PolySerializer.NamespaceDescriptor.MatchAny">
            <summary>
            The text to search to always replace.
            </summary>
        </member>
        <member name="F:PolySerializer.NamespaceDescriptor.MatchAll">
            <summary>
            A descriptor that will match all names.
            </summary>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PolySerializer.NamespaceDescriptor"/> struct.
            </summary>
            <param name="path">The namespace path.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PolySerializer.NamespaceDescriptor"/> struct.
            </summary>
            <param name="path">The namespace path.</param>
            <param name="assembly">The assembly name.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PolySerializer.NamespaceDescriptor"/> struct.
            </summary>
            <param name="path">The namespace path.</param>
            <param name="assembly">The assembly name.</param>
            <param name="version">The assembly version.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PolySerializer.NamespaceDescriptor"/> struct.
            </summary>
            <param name="path">The namespace path.</param>
            <param name="assembly">The assembly name.</param>
            <param name="version">The assembly version.</param>
            <param name="culture">The culture name.</param>
            <param name="publicKeyToken">The public key token.</param>
        </member>
        <member name="P:PolySerializer.NamespaceDescriptor.Path">
            <summary>
            Gets or sets the namespace path.
            </summary>
        </member>
        <member name="P:PolySerializer.NamespaceDescriptor.Assembly">
            <summary>
            Gets or sets the assembly name.
            </summary>
        </member>
        <member name="P:PolySerializer.NamespaceDescriptor.Version">
            <summary>
            Gets or sets the assembly version.
            </summary>
        </member>
        <member name="P:PolySerializer.NamespaceDescriptor.Culture">
            <summary>
            Gets or sets the culture name.
            </summary>
        </member>
        <member name="P:PolySerializer.NamespaceDescriptor.PublicKeyToken">
            <summary>
            Gets or sets the public key token.
            </summary>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.Match(System.String,PolySerializer.NamespaceDescriptor,PolySerializer.NamespaceDescriptor,System.String@)">
            <summary>
            Performs a search replace on <paramref name="name"/>.
            </summary>
            <param name="name">The assembly qualified type name to search in.</param>
            <param name="descriptorSearch">The descriptor with search parts.</param>
            <param name="descriptorReplace">The descriptor with replace prts.</param>
            <param name="nameOverride">The value of <paramref name="name"/> after replacements.</param>
            <returns>True if at least one searched part in <paramref name="name"/> was replaced.</returns>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.DescriptorFromType(System.Type)">
            <summary>
            Fills a descriptor with information from a type.
            </summary>
            <param name="type">The type to read.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.PathFromType(System.Type)">
            <summary>
            Gets the path subset of a descriptor from information from a type.
            </summary>
            <param name="type">The type to read.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.AssemblyFromType(System.Type)">
            <summary>
            Gets the assembly subset of a descriptor from information from a type.
            </summary>
            <param name="type">The type to read.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.VersionFromType(System.Type)">
            <summary>
            Gets the version subset of a descriptor from information from a type.
            </summary>
            <param name="type">The type to read.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.CultureFromType(System.Type)">
            <summary>
            Gets the culture subset of a descriptor from information from a type.
            </summary>
            <param name="type">The type to read.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.PublicKeyTokenFromType(System.Type)">
            <summary>
            Gets the public key token subset of a descriptor from information from a type.
            </summary>
            <param name="type">The type to read.</param>
        </member>
        <member name="M:PolySerializer.NamespaceDescriptor.ToString">
            <summary>
            Returns a string representing the instance, for debug purpose.
            </summary>
        </member>
        <member name="T:PolySerializer.SerializableAttribute">
            <summary>
                Attribute to enable serialization, or specify how to serialize a member
            </summary>
        </member>
        <member name="P:PolySerializer.SerializableAttribute.Exclude">
            <summary>
                Get or set a flag indicating if the member should be excluded from serialization (and deserialization).
            </summary>
        </member>
        <member name="P:PolySerializer.SerializableAttribute.Condition">
            <summary>
                Get or set a condition for deserializing a member.
                If the boolean member indicated by <see cref="P:PolySerializer.SerializableAttribute.Condition"/> is set to true, the member with this attribute is serialized, otherwise it is ignored and won't be deserialized.
            </summary>
        </member>
        <member name="P:PolySerializer.SerializableAttribute.Setter">
            <summary>
                Get or set the name of a setter for deserializing a member.
                Applies only to read-only properties.
                If the member indicated by <see cref="P:PolySerializer.SerializableAttribute.Setter"/> is a method taking only one argument of the same type, the method is called with the value to deserialize.
            </summary>
        </member>
        <member name="P:PolySerializer.SerializableAttribute.Constructor">
            <summary>
                Get or set the list of property values to use to construct a deserialized object.
                Applies only to one of the object's constructors.
                If this attribute isn't specified, the parameterless constructor is used.
                If specified, the constructor must have parameters, their name must match properties of the object's type, and this attribute must list them as a comma-separated list. Serialized values of these properties are used in the same order when calling the constructor.
                If the deserialized type is different than the serialized type, both types must have this attribute set on compatible constructors.
            </summary>
        </member>
        <member name="T:PolySerializer.SerializationFormat">
            <summary>
                Defines how objects are serialized and deserialized.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationFormat.BinaryPreferred">
            <summary>
                When serializing, use a binary format.
                When deserializing, accept binary or human-readable formats.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationFormat.TextPreferred">
            <summary>
                When serializing, use a human-readable format.
                When deserializing, accept binary or human-readable formats.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationFormat.BinaryOnly">
            <summary>
                When serializing, use a binary format.
                When deserializing, only accept binary format.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationFormat.TextOnly">
            <summary>
                When serializing, use a human-readable format.
                When deserializing, only accept human-readable formats.
            </summary>
        </member>
        <member name="T:PolySerializer.SerializationMode">
            <summary>
                Defines how objects are serialized and deserialized.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationMode.Default">
            <summary>
                When serializing, members are sorted by name and serialized in that order.
                When deserializing, the same sorted order is used. This mode supports recompiling the code, but not adding or removing members.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationMode.MemberName">
            <summary>
                When serializing, the name of each member is saved along with its value. This outputs larger serialized data.
                When deserializing, The member name is searched in the deserialized type. If not found, deserialization fails.
                This method supports deserializing to a type with more members than the original type did use to serialize.
            </summary>
        </member>
        <member name="F:PolySerializer.SerializationMode.MemberOrder">
            <summary>
                Members are matched in the order they are found in serialized data and in the type.
                This is faster than <see cref="F:PolySerializer.SerializationMode.MemberName"/>, and supports renaming members, but the source and destination types must match exactly.
                This also supports a destination type with more members then the original, if they appear at the end.
            </summary>
        </member>
        <member name="T:PolySerializer.ISerializer">
            <summary>
                Public interface of the serializer.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.Mode">
            <summary>
                Defines how objects are serialized and deserialized.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.Format">
            <summary>
                Defines how objects are serialized and deserialized.
            </summary>
        </member>
        <member name="M:PolySerializer.ISerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
                Serializes <paramref name="root"/> and write the serialized data to <paramref name="output"/>.
            </summary>
            <parameters>
            <param name="output">Stream receiving the serialized data.</param>
            <param name="root">Serialized object.</param>
            </parameters>
        </member>
        <member name="M:PolySerializer.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
                Creates a new object from serialized content in <paramref name="input"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to create the new object.</param>
            </parameters>
            <returns>
                The deserialized object.
            </returns>
        </member>
        <member name="M:PolySerializer.ISerializer.Check(System.IO.Stream)">
            <summary>
                Checks if serialized data in <paramref name="input"/> is compatible with <see cref="P:PolySerializer.ISerializer.RootType"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to check for compatibility.</param>
            </parameters>
            <returns>
                True of the stream can be deserialized, False otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.ISerializer.SerializeAsync(System.IO.Stream,System.Object)">
            <summary>
                Serializes <paramref name="root"/> and write the serialized data to <paramref name="output"/>.
            </summary>
            <parameters>
            <param name="output">Stream receiving the serialized data.</param>
            <param name="root">Serialized object.</param>
            </parameters>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:PolySerializer.ISerializer.DeserializeAsync(System.IO.Stream)">
            <summary>
                Creates a new object from serialized content in <paramref name="input"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to create the new object.</param>
            </parameters>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:PolySerializer.ISerializer.CheckAsync(System.IO.Stream)">
            <summary>
                Checks if serialized data in <paramref name="input"/> is compatible with <see cref="P:PolySerializer.ISerializer.RootType"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to check for compatibility.</param>
            </parameters>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="P:PolySerializer.ISerializer.Output">
            <summary>
                The output stream on which serialized data has been written to in <see cref="M:PolySerializer.ISerializer.Serialize(System.IO.Stream,System.Object)"/>.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.Root">
            <summary>
                The object serialized (after a call to <see cref="M:PolySerializer.ISerializer.Serialize(System.IO.Stream,System.Object)"/>) or created (after a call to <see cref="M:PolySerializer.ISerializer.Deserialize(System.IO.Stream)"/>).
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.Input">
            <summary>
                The input stream from which deserialized data has been read from in <see cref="M:PolySerializer.ISerializer.Deserialize(System.IO.Stream)"/>.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.RootType">
            <summary>
                Type of the <see cref="P:PolySerializer.ISerializer.Root"/> object after a call to <see cref="M:PolySerializer.ISerializer.Serialize(System.IO.Stream,System.Object)"/>, or type of the object to create in <see cref="M:PolySerializer.ISerializer.Deserialize(System.IO.Stream)"/>.
                If null, <see cref="M:PolySerializer.ISerializer.Deserialize(System.IO.Stream)"/> finds the type to use from the serialized data. If not null, the serialized data must be compatible with this type or <see cref="M:PolySerializer.ISerializer.Deserialize(System.IO.Stream)"/> will throw an exception.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.Progress">
            <summary>
                The serialization or deserialization progress as a number between 0 and 1.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.AssemblyOverrideTable">
            <summary>
            Sets or gets a list of assemblies that can override the original assembly of a type during deserialization.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.NamespaceOverrideTable">
            <summary>
            Sets or gets a list of namespaces that can override the original namespace of a type during deserialization.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.TypeOverrideTable">
            <summary>
            Gets or sets a list of types that can override the original type during deserialization.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.OverrideGenericArguments">
            <summary>
            Gets or sets a flag to indicate if argument of generic types should be overriden.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.CustomInserters">
            <summary>
            Gets or sets a list of inserter objects that allow filling collection of items implemented using a custom type, or a type not natively supported (<seealso cref="P:PolySerializer.ISerializer.BuiltInInserters"/>.
            </summary>
        </member>
        <member name="P:PolySerializer.ISerializer.BuiltInInserters">
            <summary>
            Gets a list of inserters that can add items to various types of collections.
            </summary>
        </member>
        <member name="T:PolySerializer.Serializer">
            <summary>
                Serialize objects to a stream, or deserialize objects from a stream.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.Mode">
            <summary>
                Defines how objects are serialized and deserialized.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.Format">
            <summary>
                Defines how objects are serialized and deserialized.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.Output">
            <summary>
                The output stream on which serialized data has been written to in <see cref="M:PolySerializer.Serializer.Serialize(System.IO.Stream,System.Object)"/>.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.Root">
            <summary>
                The object serialized (after a call to <see cref="M:PolySerializer.Serializer.Serialize(System.IO.Stream,System.Object)"/>) or created (after a call to <see cref="M:PolySerializer.Serializer.Deserialize(System.IO.Stream)"/>).
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.Input">
            <summary>
                The input stream from which deserialized data has been read from in <see cref="M:PolySerializer.Serializer.Deserialize(System.IO.Stream)"/>.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.RootType">
            <summary>
                Type of the <see cref="P:PolySerializer.Serializer.Root"/> object after a call to <see cref="M:PolySerializer.Serializer.Serialize(System.IO.Stream,System.Object)"/>, or type of the object to create in <see cref="M:PolySerializer.Serializer.Deserialize(System.IO.Stream)"/>.
                If null, <see cref="M:PolySerializer.Serializer.Deserialize(System.IO.Stream)"/> finds the type to use from the serialized data. If not null, the serialized data must be compatible with this type or <see cref="M:PolySerializer.Serializer.Deserialize(System.IO.Stream)"/> will throw an exception.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.AssemblyOverrideTable">
            <summary>
            Sets or gets a list of assemblies that can override the original assembly of a type during deserialization.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.NamespaceOverrideTable">
            <summary>
            Sets or gets a list of namespaces that can override the original namespace of a type during deserialization.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.TypeOverrideTable">
            <summary>
            Gets or sets a list of types that can override the original type during deserialization.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.OverrideGenericArguments">
            <summary>
            Gets or sets a flag to indicate if argument of generic types should be overriden.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.CustomInserters">
            <summary>
            Gets or sets a list of inserter objects that allow filling collection of items implemented using a custom type, or a type not natively supported (<seealso cref="P:PolySerializer.Serializer.BuiltInInserters"/>.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.BuiltInInserters">
            <summary>
            Gets a list of inserters that can add items to various types of collections.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.Progress">
            <summary>
                The serialization or deserialization progress as a number between 0 and 1.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.MinAllocatedSize">
            <summary>
                Size of the first allocated block of data. Change this value to optimize memory or speed.
            </summary>
        </member>
        <member name="P:PolySerializer.Serializer.LastAllocatedSize">
            <summary>
                Last value used to allocate or reallocate data. Use this information to optimize memory management.
            </summary>
        </member>
        <member name="M:PolySerializer.Serializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
                Serializes <paramref name="root"/> and write the serialized data to <paramref name="output"/>.
            </summary>
            <parameters>
            <param name="output">Stream receiving the serialized data.</param>
            <param name="root">Serialized object.</param>
            </parameters>
        </member>
        <member name="M:PolySerializer.Serializer.SerializeAsync(System.IO.Stream,System.Object)">
            <summary>
                Serializes <paramref name="root"/> and write the serialized data to <paramref name="output"/>.
            </summary>
            <parameters>
            <param name="output">Stream receiving the serialized data.</param>
            <param name="root">Serialized object.</param>
            </parameters>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.Deserialize(System.IO.Stream)">
            <summary>
                Creates a new object from serialized content in <paramref name="input"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to create the new object.</param>
            </parameters>
            <returns>
                The deserialized object.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.DeserializeAsync(System.IO.Stream)">
            <summary>
                Creates a new object from serialized content in <paramref name="input"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to create the new object.</param>
            </parameters>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.Check(System.IO.Stream)">
            <summary>
                Checks if serialized data in <paramref name="input"/> is compatible with <see cref="P:PolySerializer.Serializer.RootType"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to check for compatibility.</param>
            </parameters>
            <returns>
                True of the stream can be deserialized, False otherwise.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.CheckAsync(System.IO.Stream)">
            <summary>
                Checks if serialized data in <paramref name="input"/> is compatible with <see cref="P:PolySerializer.Serializer.RootType"/>.
            </summary>
            <parameters>
            <param name="input">Stream from which serialized data is read to check for compatibility.</param>
            </parameters>
            <returns>
                A task representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.SerializableAncestor(System.Type)">
            <summary>
                Finds the first serializable ancestor of <paramref name="referenceType"/>.
            </summary>
            <parameters>
            <param name="referenceType">The type to search for serializable ancestors.</param>
            </parameters>
            <returns>
                The first ancestor type that can be serialized, null if none. If null is returned, <paramref name="referenceType"/> cannot be serialized.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.IsReadableCollection(System.Type,System.Object,System.Collections.IEnumerator@)">
            <summary>
                Checks if <paramref name="referenceType"/>, a base type of <paramref name="reference"/>, is a collection type and if so returns an enumerator for <paramref name="reference"/>.
            </summary>
            <parameters>
            <param name="referenceType">The type to check.</param>
            <param name="reference">The object for which to return an enumerator if successful.</param>
            <param name="enumerator">The enumerator returned if successful.</param>
            </parameters>
            <returns>
                True if <paramref name="referenceType"/> is a readable collection.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.IsWriteableCollection(System.Object,System.Type,PolySerializer.IInserter@,System.Type@)">
            <summary>
                Checks if <paramref name="referenceType"/>, a base type of <paramref name="reference"/>, is a supported collection type and if so returns an inserter for <paramref name="reference"/>.
            </summary>
            <parameters>
            <param name="referenceType">The type to check.</param>
            <param name="reference">The object for which to return an enumerator if successful.</param>
            <param name="inserter">The inserter returned if successful.</param>
            <param name="itemType">The type of items the inserter can take.</param>
            </parameters>
            <returns>
                True if <paramref name="referenceType"/> is a writeable collection.
            </returns>
        </member>
        <member name="M:PolySerializer.Serializer.IsWriteableCollection(System.Type,PolySerializer.IInserter@,System.Type@)">
            <summary>
                Checks if <paramref name="referenceType"/> is a supported collection type and if so returns the corresponding inserter.
            </summary>
            <parameters>
            <param name="referenceType">The type to check.</param>
            <param name="inserter">The inserter returned if successful.</param>
            <param name="itemType">The type of items the inserter can take.</param>
            </parameters>
            <returns>
                True if <paramref name="referenceType"/> is a writeable collection.
            </returns>
        </member>
        <member name="T:PolySerializer.TypeIdentifier">
            <summary>
            Represents a .NET type name.
            </summary>
        </member>
        <member name="M:PolySerializer.TypeIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PolySerializer.TypeIdentifier"/> class.
            </summary>
            <param name="name">The assembly qualified type name.</param>
        </member>
        <member name="M:PolySerializer.TypeIdentifier.#ctor(System.String,System.String,System.Collections.Generic.List{PolySerializer.TypeIdentifier})">
            <summary>
            Initializes a new instance of the <see cref="T:PolySerializer.TypeIdentifier"/> class.
            </summary>
            <param name="name">The assembly qualified type name.</param>
            <param name="genericDefinition">The generic definition, for a generic type; The type name for a non-generic type.</param>
            <param name="genericParameters">The generic parameters, for a generic type; The empty list a non-generic type.</param>
        </member>
        <member name="P:PolySerializer.TypeIdentifier.Name">
            <summary>
            The assembly qualified type name.
            </summary>
        </member>
        <member name="P:PolySerializer.TypeIdentifier.GenericDefinition">
            <summary>
            The generic definition, for a generic type; The type name for a non-generic type.
            </summary>
        </member>
        <member name="P:PolySerializer.TypeIdentifier.GenericParameters">
            <summary>
            The generic parameters, for a generic type; The empty list a non-generic type.
            </summary>
        </member>
        <member name="P:PolySerializer.TypeIdentifier.IsGeneric">
            <summary>
            Indicates if the type is generic.
            </summary>
        </member>
        <member name="M:PolySerializer.TypeIdentifier.Override(System.Collections.Generic.IReadOnlyDictionary{PolySerializer.NamespaceDescriptor,PolySerializer.NamespaceDescriptor},System.Boolean)">
            <summary>
            Override the type name and nested generic parameters using a search/replace.
            </summary>
            <param name="table">The search/replace table.</param>
            <param name="overrideGenericArguments">True to override generic parameters, otherwise the generic definition only.</param>
            <returns>True if a replacement was made; Otherwise, false.</returns>
        </member>
    </members>
</doc>
