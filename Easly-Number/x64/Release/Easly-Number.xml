<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easly-Number</name>
    </assembly>
    <members>
        <member name="T:EaslyNumber.Arithmetic">
            <summary>
            Specifies how operations on instances of <see cref="T:EaslyNumber.Number"/> objects are performed.
            </summary>
        </member>
        <member name="F:EaslyNumber.Arithmetic.DefaultSignificandPrecision">
            <summary>
            The default significand precision until set by the client.
            </summary>
        </member>
        <member name="F:EaslyNumber.Arithmetic.DefaultExponentPrecision">
            <summary>
            The default exponent precision until set by the client.
            </summary>
        </member>
        <member name="F:EaslyNumber.Arithmetic.DefaultRounding">
            <summary>
            The default rounding until set by the client.
            </summary>
        </member>
        <member name="F:EaslyNumber.Arithmetic.DefaultEnableInfinitePrecision">
            <summary>
            The default value for <see cref="P:EaslyNumber.Arithmetic.EnableInfinitePrecision"/> until set by the client.
            </summary>
        </member>
        <member name="P:EaslyNumber.Arithmetic.SignificandPrecision">
            <summary>
            The number of bits in the significand when numbers are created.
            </summary>
        </member>
        <member name="P:EaslyNumber.Arithmetic.ExponentPrecision">
            <summary>
            The number of bits in the exponent when numbers are created.
            </summary>
        </member>
        <member name="P:EaslyNumber.Arithmetic.Rounding">
            <summary>
            The rounding mode to use when performing operations.
            </summary>
        </member>
        <member name="P:EaslyNumber.Arithmetic.EnableInfinitePrecision">
            <summary>
            True if operations that can be exact can increase the precision of the resulting number automatically.
            </summary>
        </member>
        <member name="P:EaslyNumber.Arithmetic.Flags">
            <summary>
            Flag containing information about the result of operations.
            </summary>
        </member>
        <member name="M:EaslyNumber.Arithmetic.IsSignificandPrecisionValid(System.Int64)">
            <summary>
            Tests if the given significand precision value is valid.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Arithmetic.IsExponentPrecisionValid(System.Int64)">
            <summary>
            Tests if the given exponent precision value is valid.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.BitField_byte.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.BitField_byte"/> class.
            </summary>
        </member>
        <member name="P:EaslyNumber.BitField_byte.SignificantBits">
            <summary>
            Number of significant bits in the field.
            </summary>
        </member>
        <member name="P:EaslyNumber.BitField_byte.ShiftBits">
            <summary>
            Number of unstored bits to the right of significant bits.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_byte.SetZero">
            <summary>
            Sets the object to represent zero.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_byte.ShiftRight">
            <summary>
            Shift bits to the right.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_byte.GetBit(System.Int64)">
            <summary>
            Gets the value of the bit at position <paramref name="index"/>.
            </summary>
            <param name="index">Position of the bit to get.</param>
        </member>
        <member name="M:EaslyNumber.BitField_byte.SetBit(System.Int64,System.Boolean)">
            <summary>
            Sets the bit at position <paramref name="index"/>.
            </summary>
            <param name="index">Position of the bit to get.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:EaslyNumber.BitField_byte.IsEqual(EaslyNumber.BitField_byte)">
            <summary>
            Checks if two bit fields are equal.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyNumber.BitField_byte.op_LessThan(EaslyNumber.BitField_byte,EaslyNumber.BitField_byte)">
            <summary>
            Checks if <paramref name="x"/> is lesser than <paramref name="y"/>.
            </summary>
            <param name="x">The first bit field.</param>
            <param name="y">The second bit field.</param>
        </member>
        <member name="M:EaslyNumber.BitField_byte.op_GreaterThan(EaslyNumber.BitField_byte,EaslyNumber.BitField_byte)">
            <summary>
            Checks if <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <param name="x">The first bit field.</param>
            <param name="y">The second bit field.</param>
        </member>
        <member name="P:EaslyNumber.BitField_byte.HighestBitSet">
            <summary>
            Return the position of the highest bit set, -1 if none.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_uint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.BitField_uint"/> class.
            </summary>
        </member>
        <member name="P:EaslyNumber.BitField_uint.SignificantBits">
            <summary>
            Number of significant bits in the field.
            </summary>
        </member>
        <member name="P:EaslyNumber.BitField_uint.ShiftBits">
            <summary>
            Number of unstored bits to the right of significant bits.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_uint.SetZero">
            <summary>
            Sets the object to represent zero.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_uint.ShiftRight">
            <summary>
            Shift bits to the right.
            </summary>
        </member>
        <member name="M:EaslyNumber.BitField_uint.GetBit(System.Int64)">
            <summary>
            Gets the value of the bit at position <paramref name="index"/>.
            </summary>
            <param name="index">Position of the bit to get.</param>
        </member>
        <member name="M:EaslyNumber.BitField_uint.SetBit(System.Int64,System.Boolean)">
            <summary>
            Sets the bit at position <paramref name="index"/>.
            </summary>
            <param name="index">Position of the bit to get.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:EaslyNumber.BitField_uint.IsEqual(EaslyNumber.BitField_uint)">
            <summary>
            Checks if two bit fields are equal.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyNumber.BitField_uint.op_LessThan(EaslyNumber.BitField_uint,EaslyNumber.BitField_uint)">
            <summary>
            Checks if <paramref name="x"/> is lesser than <paramref name="y"/>.
            </summary>
            <param name="x">The first bit field.</param>
            <param name="y">The second bit field.</param>
        </member>
        <member name="M:EaslyNumber.BitField_uint.op_GreaterThan(EaslyNumber.BitField_uint,EaslyNumber.BitField_uint)">
            <summary>
            Checks if <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <param name="x">The first bit field.</param>
            <param name="y">The second bit field.</param>
        </member>
        <member name="P:EaslyNumber.BitField_uint.HighestBitSet">
            <summary>
            Return the position of the highest bit set, -1 if none.
            </summary>
        </member>
        <member name="T:EaslyNumber.Flags">
            <summary>
            Flag containing information about the result of operations.
            </summary>
        </member>
        <member name="P:EaslyNumber.Flags.DivideByZero">
            <summary>
            Signals a division of a nonzero number by zero.
            </summary>
        </member>
        <member name="P:EaslyNumber.Flags.Inexact">
            <summary>
            Signals that the result was rounded to a different mathematical value, but as close as possible to the original.
            </summary>
        </member>
        <member name="M:EaslyNumber.Flags.Clear">
            <summary>
            Clear flags.
            </summary>
        </member>
        <member name="M:EaslyNumber.Flags.SetDivideByZero">
            <summary>
            Forces the <see cref="P:EaslyNumber.Flags.DivideByZero"/> flag to true.
            </summary>
        </member>
        <member name="M:EaslyNumber.Flags.SetInexact">
            <summary>
            Forces the <see cref="P:EaslyNumber.Flags.Inexact"/> flag to true.
            </summary>
        </member>
        <member name="T:EaslyNumber.FormattedNumber">
            <summary>
            Describes a number with discarded and invalid parts.
            </summary>
        </member>
        <member name="M:EaslyNumber.FormattedNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.FormattedNumber"/> struct.
            </summary>
            <param name="text">The number in plain text.</param>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.DiscardedProlog">
            <summary>
            The discarded prolog before the number.
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.Prefix">
            <summary>
            The prefix part before the number.
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.BeforeExponent">
            <summary>
            The text in <see cref="P:EaslyNumber.FormattedNumber.Value"/> before the exponent sign (the exponent character is included).
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.Exponent">
            <summary>
            The exponent text in <see cref="P:EaslyNumber.FormattedNumber.Value"/> (the exponent character is excluded).
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.Suffix">
            <summary>
            The suffix part after the number.
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.InvalidPart">
            <summary>
            The invalid part after the number.
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.DiscardedEpilog">
            <summary>
            The discarded epilog after the number.
            </summary>
        </member>
        <member name="P:EaslyNumber.FormattedNumber.IsValid">
            <summary>
            True if the number is invalid.
            </summary>
        </member>
        <member name="M:EaslyNumber.FormattedNumber.ToString">
            <summary>
            Returns the default text representation of the formatted number.
            </summary>
            <returns>The default text representation of the formatted number.</returns>
        </member>
        <member name="T:EaslyNumber.Number">
            <summary>
            Describes and manipulates real numbers with arbitrary precision.
            </summary>
            <summary>
            Describes and manipulates real numbers with arbitrary precision.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.BinaryRadix">
            <summary>
            The base of binary digits.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.OctalRadix">
            <summary>
            The base of octal digits.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.DecimalRadix">
            <summary>
            The base of decimal digits.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.HexadecimalRadix">
            <summary>
            The base of hexadecimal digits.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.BinaryPrefixCharacter">
            <summary>
            The prefix character for binary integer string format.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.BinarySuffixCharacter">
            <summary>
            The suffix character for binary integer string format.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.OctalSuffixCharacter">
            <summary>
            The suffix character for octal integer string format.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.HexadecimalPrefixCharacter">
            <summary>
            The prefix character for hexadecimal integer string format.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.HexadecimalSuffixCharacter">
            <summary>
            The suffix character for hexadecimal integer string format.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.TryParse(System.String,EaslyNumber.Number@)">
            <summary>
            Converts the string representation of a number to a <see cref="T:EaslyNumber.Number"/> object. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="text">A string containing a number to convert.</param>
            <param name="value">The converted number if successful.</param>
            <returns>True if the conversion succeeded; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.Parse(System.String,EaslyNumber.TextPartition@)">
            <summary>
            Parses a string to extract relevant parts for a number.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="partition">The text partition of <paramref name="text"/> if parsed successfully.</param>
        </member>
        <member name="M:EaslyNumber.Number.IsValidBinaryDigit(System.Char,System.Int32@)">
            <summary>
            Checks if a binary digit is valid.
            </summary>
            <param name="digit">The digit to validate.</param>
            <param name="value">The digit value, if valid.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.ToBinaryDigit(System.Int32)">
            <summary>
            Gets the binary digit of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The digit.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="value"/> is not in the valid range for the binary digit.</exception>
        </member>
        <member name="M:EaslyNumber.Number.IsValidBinaryNumber(System.String)">
            <summary>
            Checks if a string is a number in binary format.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.IsValidOctalDigit(System.Char,System.Int32@)">
            <summary>
            Checks if an octal digit is valid.
            </summary>
            <param name="digit">The digit to validate.</param>
            <param name="value">The digit value, if valid.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.ToOctalDigit(System.Int32)">
            <summary>
            Gets the octal digit of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The digit.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="value"/> is not in the valid range for the octal digit.</exception>
        </member>
        <member name="M:EaslyNumber.Number.IsValidOctalNumber(System.String)">
            <summary>
            Checks if a string is a number in octal format.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.IsValidDecimalDigit(System.Char,System.Int32@)">
            <summary>
            Checks if a decimal digit is valid.
            </summary>
            <param name="digit">The digit to validate.</param>
            <param name="value">The digit value, if valid.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.ToDecimalDigit(System.Int32)">
            <summary>
            Gets the decimal digit of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The digit.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="value"/> is not in the valid range for the decimal digit.</exception>
        </member>
        <member name="M:EaslyNumber.Number.IsValidHexadecimalDigit(System.Char,System.Int32@)">
            <summary>
            Checks if an hexadecimal digit is valid.
            </summary>
            <param name="digit">The digit to validate.</param>
            <param name="value">The digit value, if valid.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.ToHexadecimalDigit(System.Int32,System.Boolean)">
            <summary>
            Gets the hexadecimal digit of a value.
            </summary>
            <param name="value">The value.</param>
            <param name="lowerCase">True to return a lower case digit; False for an upper case digit.</param>
            <returns>The digit.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="value"/> is not in the valid range for the hexadecimal digit.</exception>
        </member>
        <member name="M:EaslyNumber.Number.ToUpperCaseHexadecimalDigit(System.Int32)">
            <summary>
            Gets the hexadecimal digit of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The digit.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter <paramref name="value"/> is not in the valid range for the hexadecimal digit.</exception>
        </member>
        <member name="M:EaslyNumber.Number.IsValidHexadecimalNumber(System.String)">
            <summary>
            Checks if a string is a number in hexadecimal format.
            </summary>
            <param name="text">The string to check.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyNumber.Number.SignText(EaslyNumber.OptionalSign)">
            <summary>
            Returns the text of an optional sign.
            </summary>
            <param name="sign">The optional sign.</param>
        </member>
        <member name="M:EaslyNumber.Number.SeparatorText(EaslyNumber.OptionalSeparator)">
            <summary>
            Returns the text of an optional separator.
            </summary>
            <param name="separator">The optional separator.</param>
        </member>
        <member name="M:EaslyNumber.Number.ExponentCharacterText(EaslyNumber.OptionalExponent)">
            <summary>
            Returns the text of an optional exponent character.
            </summary>
            <param name="exponentCharacter">The optional exponent character.</param>
        </member>
        <member name="M:EaslyNumber.Number.RadixPrefixText(System.Int32)">
            <summary>
            Returns the text of the radix prefix.
            </summary>
            <param name="radix">The radix.</param>
        </member>
        <member name="M:EaslyNumber.Number.RadixSuffixText(System.Int32)">
            <summary>
            Returns the text of the radix suffix.
            </summary>
            <param name="radix">The radix.</param>
        </member>
        <member name="F:EaslyNumber.Number.Uninitialized">
            <summary>
            A psecial value for uninitialized.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.NaN">
            <summary>
            The special value for not-a-number.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.PositiveInfinity">
            <summary>
            The special value for positive infinity.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.NegativeInfinity">
            <summary>
            The special value for negative infinity.
            </summary>
        </member>
        <member name="F:EaslyNumber.Number.Zero">
            <summary>
            The special value zero.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from plain text.
            </summary>
            <param name="text">The number in plain text.</param>
            <exception cref="T:System.ArgumentException">The text is not a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.InitFromText(System.String)">
            <summary>
            Initializes the object from plain text.
            </summary>
            <param name="text">The number in plain text.</param>
            <exception cref="T:System.ArgumentException">The text is not a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(EaslyNumber.TextPartition)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from plain text.
            </summary>
            <param name="partition">The partition to copy values from.</param>
            <exception cref="T:System.ArgumentException">The partition does not represent a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.InitFromPartition(EaslyNumber.TextPartition)">
            <summary>
            Initializes the object from a special number value.
            </summary>
            <param name="partition">The partition to copy values from.</param>
            <exception cref="T:System.ArgumentException">The partition does not represent a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.InitFromSpecialNumber(EaslyNumber.Number)">
            <summary>
            Initializes the object from a special number value.
            </summary>
            <param name="value">The special value to copy from.</param>
            <exception cref="T:System.ArgumentException">The partition does not represent a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.InitFromIntegerNumber(EaslyNumber.CustomRadixIntegerTextPartition)">
            <summary>
            Initializes the object from an integer number value.
            </summary>
            <param name="partition">The partition to copy values from.</param>
            <exception cref="T:System.ArgumentException">The source is not a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.InitFromRealNumber(EaslyNumber.RealTextPartition)">
            <summary>
            Initializes the object from an integer number value.
            </summary>
            <param name="partition">The partition to copy values from.</param>
            <exception cref="T:System.ArgumentException">The partition does not represent a valid number.</exception>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Int64,System.Int64,System.Boolean,EaslyNumber.BitField,EaslyNumber.BitField,System.Boolean,EaslyNumber.BitField)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a parsed integer.
            </summary>
            <param name="significandPrecision">The precision used to obtain the integer and fractional data fields.</param>
            <param name="exponentPrecision">The precision used to obtain the exponent data fields.</param>
            <param name="isSignificandNegative">True if the number is negative.</param>
            <param name="integerField">The integer data field.</param>
            <param name="fractionalField">The fractional data field.</param>
            <param name="isExponentNegative">True if the number exponent is negative.</param>
            <param name="exponentField">The exponent data field.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Int64,System.Int64,System.Boolean,EaslyNumber.BitField)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a parsed integer.
            </summary>
            <param name="significandPrecision">The precision used to obtain the integer and fractional data fields.</param>
            <param name="exponentPrecision">The precision used to obtain the exponent data fields.</param>
            <param name="isSignificandNegative">True if the number is negative.</param>
            <param name="integerField">The integer data field.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# float.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# double.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# decimal.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# int.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# unsigned int.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# long.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            This contructor creates the number from a C# unsigned long.
            </summary>
            <param name="value">The number value.</param>
        </member>
        <member name="M:EaslyNumber.Number.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.Number"/> struct.
            </summary>
            <param name="isNaN">Value of the special NaN flag.</param>
            <param name="isPositiveInfinity">Value of the special positive infinity flag.</param>
            <param name="isNegativeInfinity">Value of the special negative infinity flag.</param>
        </member>
        <member name="P:EaslyNumber.Number.IsSpecial">
            <summary>
            True if the number is one of the special numbers.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsNaN">
            <summary>
            True if the number is a NaN.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsInfinite">
            <summary>
            True if the number is one of the infinite values.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsPositiveInfinity">
            <summary>
            True if the number is the positive infinite value.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsNegativeInfinity">
            <summary>
            True if the number is the negative infinite value.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsZero">
            <summary>
            True if the number is 0.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.SignificandPrecision">
            <summary>
            The number of bits in the significand.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.ExponentPrecision">
            <summary>
            The number of bits in the exponent.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.Rounding">
            <summary>
            The rounding mode that was used when the number was created.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsSignificandNegative">
            <summary>
            True if the number is negative.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsExponentNegative">
            <summary>
            True if the absolute value of the number is between zero and 1.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IsInteger">
            <summary>
            True if the number is an integer.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.IntegerField">
            <summary>
            The binary data corresponding to the integer part.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.FractionalField">
            <summary>
            The binary data corresponding to the fractional part.
            </summary>
        </member>
        <member name="P:EaslyNumber.Number.ExponentField">
            <summary>
            The binary data corresponding to the exponent part.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.IsEqual(EaslyNumber.Number)">
            <summary>
            Checks if two numbers are equal.
            </summary>
            <param name="other">The other instance.</param>
        </member>
        <member name="M:EaslyNumber.Number.op_LessThan(EaslyNumber.Number,EaslyNumber.Number)">
            <summary>
            Checks if <paramref name="x"/> is lesser than <paramref name="y"/>.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
        </member>
        <member name="M:EaslyNumber.Number.op_GreaterThan(EaslyNumber.Number,EaslyNumber.Number)">
            <summary>
            Checks if <paramref name="x"/> is greater than <paramref name="y"/>.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
        </member>
        <member name="M:EaslyNumber.Number.op_Addition(EaslyNumber.Number,EaslyNumber.Number)">
            <summary>
            Returns the sum of two numbers: x + y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
            <returns>The arithmetic sum of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:EaslyNumber.Number.Add(EaslyNumber.Number,EaslyNumber.Number,System.Int64,System.Int64,EaslyNumber.Rounding)">
            <summary>
            Returns the sum of two numbers: x + y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
            <param name="significandPrecision">The precision to use for the significand when creating the result.</param>
            <param name="exponentPrecision">The precision to use for the exponent when creating the result.</param>
            <param name="rounding">The rounding mode to use when creating the result.</param>
            <returns>The arithmetic sum of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:EaslyNumber.Number.op_Subtraction(EaslyNumber.Number,EaslyNumber.Number)">
            <summary>
            Returns the difference between two numbers: x - y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
        </member>
        <member name="M:EaslyNumber.Number.Subtract(EaslyNumber.Number,EaslyNumber.Number,System.Int64,System.Int64,EaslyNumber.Rounding)">
            <summary>
            Returns the difference between two numbers: x - y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
            <param name="significandPrecision">The precision to use for the significand when creating the result.</param>
            <param name="exponentPrecision">The precision to use for the exponent when creating the result.</param>
            <param name="rounding">The rounding mode to use when creating the result.</param>
            <returns>The arithmetic difference of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:EaslyNumber.Number.op_Multiply(EaslyNumber.Number,EaslyNumber.Number)">
            <summary>
            Returns the product of two numbers: x * y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
        </member>
        <member name="M:EaslyNumber.Number.Multiply(EaslyNumber.Number,EaslyNumber.Number,System.Int64,System.Int64,EaslyNumber.Rounding)">
            <summary>
            Returns the product of two numbers: x * y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
            <param name="significandPrecision">The precision to use for the significand when creating the result.</param>
            <param name="exponentPrecision">The precision to use for the exponent when creating the result.</param>
            <param name="rounding">The rounding mode to use when creating the result.</param>
            <returns>The arithmetic product of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:EaslyNumber.Number.op_Division(EaslyNumber.Number,EaslyNumber.Number)">
            <summary>
            Returns the ratio of two numbers: x / y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
        </member>
        <member name="M:EaslyNumber.Number.Divide(EaslyNumber.Number,EaslyNumber.Number,System.Int64,System.Int64,EaslyNumber.Rounding)">
            <summary>
            Returns the ratio of two numbers: x / y.
            </summary>
            <param name="x">The first number.</param>
            <param name="y">The second number.</param>
            <param name="significandPrecision">The precision to use for the significand when creating the result.</param>
            <param name="exponentPrecision">The precision to use for the exponent when creating the result.</param>
            <param name="rounding">The rounding mode to use when creating the result.</param>
            <returns>The arithmetic ratio of <paramref name="x"/> and <paramref name="y"/>.</returns>
        </member>
        <member name="M:EaslyNumber.Number.op_UnaryNegation(EaslyNumber.Number)">
            <summary>
            Returns the negation of a number: -x.
            </summary>
            <param name="x">The number.</param>
        </member>
        <member name="M:EaslyNumber.Number.Negate(EaslyNumber.Number,System.Int64,System.Int64,EaslyNumber.Rounding)">
            <summary>
            Returns the negation of a number: -x.
            </summary>
            <param name="x">The number.</param>
            <param name="significandPrecision">The precision to use for the significand when creating the result.</param>
            <param name="exponentPrecision">The precision to use for the exponent when creating the result.</param>
            <param name="rounding">The rounding mode to use when creating the result.</param>
            <returns>The arithmetic negation of <paramref name="x"/>.</returns>
        </member>
        <member name="M:EaslyNumber.Number.Abs">
            <summary>
            Returns the absolute value.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.Exp">
            <summary>
            Returns e (the base of natural logarithms) raised to the power of this object's value.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.Log">
            <summary>
            Returns the natural logarithms of this object's value.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.Log10">
            <summary>
            Returns the base-10 logarithms of this object's value.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.Pow(EaslyNumber.Number)">
            <summary>
            Returns this object's value raised to the power x.
            </summary>
            <param name="x">The number.</param>
        </member>
        <member name="M:EaslyNumber.Number.Sqrt">
            <summary>
            Returns the square root of this object's value.
            </summary>
        </member>
        <member name="M:EaslyNumber.Number.ShiftLeft(EaslyNumber.Number)">
            <summary>
            Returns this object's value multiplied by a specified power of two.
            </summary>
            <param name="other">The other number.</param>
        </member>
        <member name="M:EaslyNumber.Number.ShiftRight(EaslyNumber.Number)">
            <summary>
            Returns this object's value divided by a specified power of two.
            </summary>
            <param name="other">The other number.</param>
        </member>
        <member name="M:EaslyNumber.Number.Remainder(EaslyNumber.Number)">
            <summary>
            Returns the remainder when this object's value is divided by another.
            </summary>
            <param name="other">The other number.</param>
        </member>
        <member name="M:EaslyNumber.Number.BitwiseAnd(EaslyNumber.Number)">
            <summary>
            Returns the bitwise AND of this object's value and another.
            </summary>
            <param name="other">The other number.</param>
        </member>
        <member name="M:EaslyNumber.Number.BitwiseOr(EaslyNumber.Number)">
            <summary>
            Returns the bitwise OR of this object's value and another.
            </summary>
            <param name="other">The other number.</param>
        </member>
        <member name="M:EaslyNumber.Number.BitwiseXor(EaslyNumber.Number)">
            <summary>
            Returns the bitwise OR of this object's value and another.
            </summary>
            <param name="other">The other number.</param>
        </member>
        <member name="M:EaslyNumber.Number.TryParseInt(System.Int32@)">
            <summary>
            Gets the value if it can be represented with a <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value upon return.</param>
        </member>
        <member name="M:EaslyNumber.Number.ToString">
            <summary>
            Returns the default text representation of the number.
            </summary>
            <returns>The default text representation of the number.</returns>
        </member>
        <member name="T:EaslyNumber.RadixSuffixTextPartition">
            <summary>
            The partition of a string into different components of an integer number.
            </summary>
        </member>
        <member name="M:EaslyNumber.RadixSuffixTextPartition.#ctor(System.String,System.Int32,System.Char,EaslyNumber.NumberTextPartition.IsValidDigitHandler,EaslyNumber.NumberTextPartition.ToDigitHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.RadixSuffixTextPartition"/> class.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="radix">The radix to use.</param>
            <param name="radixSuffixCharacter">The suffix character to use.</param>
            <param name="validityHandler">The handler to use to validate digits.</param>
            <param name="digitHandler">The handler to use to convert to digits.</param>
        </member>
        <member name="M:EaslyNumber.RadixSuffixTextPartition.Parse(System.Int32)">
            <summary>
            Parses a new character.
            </summary>
            <param name="index">The position of the character to parse in <see cref="P:EaslyNumber.TextPartition.Text"/>.</param>
        </member>
        <member name="M:EaslyNumber.RadixSuffixTextPartition.ParseLeadingWhitespaces(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.LeadingWhitespaces"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RadixSuffixTextPartition.ParseIntegerPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.IntegerPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RadixSuffixTextPartition.ParseSuffixPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.SuffixPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="P:EaslyNumber.RadixSuffixTextPartition.RadixSuffixCharacter">
            <summary>
            The radix character used as suffix to the string.
            </summary>
        </member>
        <member name="P:EaslyNumber.RadixSuffixTextPartition.RadixSuffix">
            <summary>
            Index of the suffix indicating a radix, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RadixSuffixTextPartition.ComparisonIndex">
            <summary>
            Index to use for partition comparison.
            </summary>
        </member>
        <member name="T:EaslyNumber.RadixPrefixTextPartition">
            <summary>
            The partition of a string into different components of an integer number.
            </summary>
        </member>
        <member name="M:EaslyNumber.RadixPrefixTextPartition.#ctor(System.String,System.Int32,System.Char,EaslyNumber.NumberTextPartition.IsValidDigitHandler,EaslyNumber.NumberTextPartition.ToDigitHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.RadixPrefixTextPartition"/> class.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="radix">The radix to use.</param>
            <param name="radixPrefixCharacter">The prefix character to use.</param>
            <param name="validityHandler">The handler to use to validate digits.</param>
            <param name="digitHandler">The handler to use to convert to digits.</param>
        </member>
        <member name="M:EaslyNumber.RadixPrefixTextPartition.Parse(System.Int32)">
            <summary>
            Parses a new character.
            </summary>
            <param name="index">The position of the character to parse in <see cref="P:EaslyNumber.TextPartition.Text"/>.</param>
        </member>
        <member name="M:EaslyNumber.RadixPrefixTextPartition.ParseLeadingWhitespaces(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.LeadingWhitespaces"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RadixPrefixTextPartition.ParseRadix(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.Radix"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RadixPrefixTextPartition.ParseIntegerPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.IntegerPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="P:EaslyNumber.RadixPrefixTextPartition.RadixPrefixCharacter">
            <summary>
            The radix character used to prefix the string.
            </summary>
        </member>
        <member name="P:EaslyNumber.RadixPrefixTextPartition.HasRadixPrefix">
            <summary>
            True if the partition includes a suffix part.
            </summary>
        </member>
        <member name="P:EaslyNumber.RadixPrefixTextPartition.RadixPrefix">
            <summary>
            Index of the prefix indicating a radix, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RadixPrefixTextPartition.ComparisonIndex">
            <summary>
            Index to use for partition comparison.
            </summary>
        </member>
        <member name="T:EaslyNumber.OptionalExponent">
            <summary>
            Optional exponent in a number.
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalExponent.None">
            <summary>
            No exponent (the number uses fixed-point notation).
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalExponent.UpperCaseE">
            <summary>
            'E' character
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalExponent.LowerCaseE">
            <summary>
            'e' character
            </summary>
        </member>
        <member name="T:EaslyNumber.OptionalSeparator">
            <summary>
            Optional separator between the decimal part and the fractionla part of a significand.
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalSeparator.None">
            <summary>
            No separator (the number is an integer).
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalSeparator.Normalized">
            <summary>
            English dot.
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalSeparator.CultureSpecific">
            <summary>
            The separator character specific to a culture.
            </summary>
        </member>
        <member name="T:EaslyNumber.OptionalSign">
            <summary>
            Optional signs in front of a signficand or exponent.
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalSign.None">
            <summary>
            No sign (same semantic as <see cref="F:EaslyNumber.OptionalSign.Positive"/>).
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalSign.Positive">
            <summary>
            + sign.
            </summary>
        </member>
        <member name="F:EaslyNumber.OptionalSign.Negative">
            <summary>
            - sign.
            </summary>
        </member>
        <member name="T:EaslyNumber.CustomRadixIntegerTextPartition">
            <summary>
            The partition of a string into different components of an integer number.
            </summary>
        </member>
        <member name="M:EaslyNumber.CustomRadixIntegerTextPartition.#ctor(System.String,System.Int32,EaslyNumber.NumberTextPartition.IsValidDigitHandler,EaslyNumber.NumberTextPartition.ToDigitHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.CustomRadixIntegerTextPartition"/> class.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="radix">The radix to use.</param>
            <param name="validityHandler">The handler to use to validate digits.</param>
            <param name="digitHandler">The handler to use to convert to digits.</param>
        </member>
        <member name="P:EaslyNumber.CustomRadixIntegerTextPartition.Radix">
            <summary>
            The radix for digits.
            </summary>
        </member>
        <member name="P:EaslyNumber.CustomRadixIntegerTextPartition.ValidityHandler">
            <summary>
            The handler used to validate digits.
            </summary>
        </member>
        <member name="P:EaslyNumber.CustomRadixIntegerTextPartition.DigitHandler">
            <summary>
            The handler to use to convert to digits.
            </summary>
        </member>
        <member name="T:EaslyNumber.CustomRadixIntegerTextPartition.UpdateFieldHandler">
            <summary>
            Delegate type of a method that update the data field with a digit.
            </summary>
            <param name="field">The data field to update.</param>
            <param name="value">The digit value.</param>
        </member>
        <member name="P:EaslyNumber.CustomRadixIntegerTextPartition.IsZero">
            <summary>
            True if the parsed number is zero.
            </summary>
        </member>
        <member name="M:EaslyNumber.CustomRadixIntegerTextPartition.ConvertToBitField(System.Int64,EaslyNumber.BitField@)">
            <summary>
            Converts the parsed partition to bit fields.
            </summary>
            <param name="significandPrecision">The number of bits in the significand.</param>
            <param name="integerField">The bit field of the integer part upon return.</param>
        </member>
        <member name="T:EaslyNumber.ParsingState">
            <summary>
            States of a number parser.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.Init">
            <summary>
            The initial state.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.LeadingWhitespaces">
            <summary>
            Parsing optional leading whitespace characters.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.LeadingZeroes">
            <summary>
            Parsing optionl leading zeroes.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.Radix">
            <summary>
            Parsing the radix.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.IntegerPart">
            <summary>
            Parsing the integer part.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.FractionalPart">
            <summary>
            Parsing the fractional part.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.ExponentPart">
            <summary>
            Parsing the exponent part.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.SuffixSign">
            <summary>
            Parsing the suffix sign at the end.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.SuffixPart">
            <summary>
            Parsing the suffix part at the end.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.SpecialPart">
            <summary>
            Parsing the text of a special number.
            </summary>
        </member>
        <member name="F:EaslyNumber.ParsingState.InvalidPart">
            <summary>
            Parsing the invalid part at the end.
            </summary>
        </member>
        <member name="T:EaslyNumber.SpecialNumberTextPartition">
            <summary>
            The partition of a string into different components of a special number.
            </summary>
        </member>
        <member name="M:EaslyNumber.SpecialNumberTextPartition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.SpecialNumberTextPartition"/> class.
            <param name="text">The string to parse.</param>
            </summary>
        </member>
        <member name="F:EaslyNumber.SpecialNumberTextPartition.NaNString">
            <summary>
            The string for NaN in the current culture.
            </summary>
        </member>
        <member name="F:EaslyNumber.SpecialNumberTextPartition.PositiveInfinityString">
            <summary>
            The string for +∞ in the current culture.
            </summary>
        </member>
        <member name="F:EaslyNumber.SpecialNumberTextPartition.NegativeInfinityString">
            <summary>
            The string for -∞ in the current culture.
            </summary>
        </member>
        <member name="M:EaslyNumber.SpecialNumberTextPartition.Parse(System.Int32)">
            <summary>
            Parses a new character.
            </summary>
            <param name="index">The position of the character to parse in <see cref="P:EaslyNumber.TextPartition.Text"/>.</param>
        </member>
        <member name="M:EaslyNumber.SpecialNumberTextPartition.ParseLeadingWhitespaces(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.LeadingWhitespaces"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.SpecialNumberTextPartition.ParseSpecialPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.SpecialPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.SpecialNumberTextPartition.ParseInvalidPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.InvalidPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.Value">
            <summary>
            The optional separator. This partition cannot have one.
            </summary>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.DiscardedProlog">
            <summary>
            The beginning of <see cref="P:EaslyNumber.TextPartition.Text"/> that can be ignored.
            </summary>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.InfinitySign">
            <summary>
            Optional sign of infinity.
            </summary>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.FirstSpecialPartIndex">
            <summary>
            Index of the special part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.LastSpecialPartIndex">
            <summary>
            Index of the first character after the special part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.SpecialPart">
            <summary>
            The beginning of <see cref="P:EaslyNumber.TextPartition.Text"/> that can be ignored.
            </summary>
        </member>
        <member name="P:EaslyNumber.SpecialNumberTextPartition.ComparisonIndex">
            <summary>
            Index to use for partition comparison.
            </summary>
        </member>
        <member name="T:EaslyNumber.RealTextPartition">
            <summary>
            The partition of a string into different components of a real number.
            </summary>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.RealTextPartition"/> class.
            <param name="text">The string to parse.</param>
            </summary>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.Parse(System.Int32)">
            <summary>
            Parses a new character.
            </summary>
            <param name="index">The position of the character to parse in <see cref="P:EaslyNumber.TextPartition.Text"/>.</param>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.ParseLeadingWhitespaces(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.LeadingWhitespaces"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.ParseLeadingZeroes(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.LeadingZeroes"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.ParseIntegerPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.IntegerPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.ParseFractionalPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.FractionalPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.ParseExponentPart(System.Int32,System.Char)">
            <summary>
            Runs the parser in the <see cref="F:EaslyNumber.ParsingState.ExponentPart"/> state.
            </summary>
            <param name="index">Index of the parsed character.</param>
            <param name="c">The parsed character.</param>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.Separator">
            <summary>
            The optional separator.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.DecimalSeparatorIndex">
            <summary>
            Index of the decimal separator, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.FirstFractionalPartIndex">
            <summary>
            Index of the fractional part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.LastFractionalPartIndex">
            <summary>
            Index of the first character after the fractional part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.HasFractionalPart">
            <summary>
            True if the partition includes a fractional part.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.FractionalPart">
            <summary>
            The fractional part after the decimal separator (if any).
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.ExponentIndex">
            <summary>
            Index of the exponent character, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.ExponentCharacter">
            <summary>
            Type of the optional exponent character.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.ExponentSign">
            <summary>
            Sign of the exponent, None if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.FirstExponentPartIndex">
            <summary>
            Index of the exponent part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.LastExponentPartIndex">
            <summary>
            Index of the first character after the exponent part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.HasExponentPart">
            <summary>
            True if the partition includes a fractional part.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.ExponentPart">
            <summary>
            The exponent part (if any) after the exponent character and optional sign.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.IsZero">
            <summary>
            True if the parsed number is zero.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.CultureDecimalSeparator">
            <summary>
            The decimal separator character for the current culture.
            </summary>
        </member>
        <member name="P:EaslyNumber.RealTextPartition.ComparisonIndex">
            <summary>
            Index to use for partition comparison.
            </summary>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.InitCultureSeparator">
            <summary>
            Gets the decimal separator character for the current culture.
            </summary>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.ConvertToBitField(System.Int64,System.Int64,EaslyNumber.BitField@,EaslyNumber.BitField@,EaslyNumber.BitField@)">
            <summary>
            Converts the parsed partition to bit fields.
            </summary>
            <param name="significandPrecision">The number of bits in the significand.</param>
            <param name="exponentPrecision">The number of bits in the exponent.</param>
            <param name="integerField">The bit field of the integer part upon return.</param>
            <param name="fractionalField">The bit field of the fractional part upon return.</param>
            <param name="exponentField">The bit field of the exponent part upon return.</param>
        </member>
        <member name="M:EaslyNumber.RealTextPartition.RoundedToNearest(System.String,System.Int32,EaslyNumber.NumberTextPartition.IsValidDigitHandler,EaslyNumber.NumberTextPartition.ToDigitHandler,System.Boolean)">
            <summary>
            Returns the input number rounded to the nearest number ending with digit 0.
            If exactly in the middle, round to lower.
            </summary>
            <param name="text">The number to multiply.</param>
            <param name="radix">The radix to use.</param>
            <param name="validityHandler">The handler to use to validate digits.</param>
            <param name="digitHandler">The handler to use to convert to digits.</param>
            <param name="includeEndingZeroes">True to add ending zeroes.</param>
        </member>
        <member name="T:EaslyNumber.NumberTextPartition">
            <summary>
            The partition of a string into different components of a number.
            </summary>
        </member>
        <member name="M:EaslyNumber.NumberTextPartition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.NumberTextPartition"/> class.
            </summary>
            <param name="text">The string to parse.</param>
        </member>
        <member name="P:EaslyNumber.NumberTextPartition.LastLeadingZeroIndex">
            <summary>
            Index of the last optional zero character, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.NumberTextPartition.DiscardedProlog">
            <summary>
            The beginning of <see cref="P:EaslyNumber.TextPartition.Text"/> that can be ignored.
            </summary>
        </member>
        <member name="P:EaslyNumber.NumberTextPartition.SignificandSign">
            <summary>
            Sign of the significand, None if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.NumberTextPartition.FirstIntegerPartIndex">
            <summary>
            Index of the integer part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.NumberTextPartition.LastIntegerPartIndex">
            <summary>
            Index of the first character after the integer part, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.NumberTextPartition.IntegerPart">
            <summary>
            The integer part in front of the decimal separator (if any).
            </summary>
        </member>
        <member name="T:EaslyNumber.NumberTextPartition.IsValidDigitHandler">
            <summary>
            Delegate type of a method that validates a digit.
            </summary>
            <param name="digit">The digit to validate.</param>
            <param name="value">The digit value, if valid.</param>
            <returns>True if valid; Otherwise, false.</returns>
        </member>
        <member name="T:EaslyNumber.NumberTextPartition.ToDigitHandler">
            <summary>
            Delegate type of a method that validates a digit.
            </summary>
            <param name="value">The value to turn convert to a digit.</param>
            <returns>The digit corresponding to <paramref name="value"/>.</returns>
        </member>
        <member name="M:EaslyNumber.NumberTextPartition.DividedByTwo(System.String,System.Int32,EaslyNumber.NumberTextPartition.IsValidDigitHandler,EaslyNumber.NumberTextPartition.ToDigitHandler,System.Boolean@)">
            <summary>
            Returns the input number divided by two.
            </summary>
            <param name="text">The number to divide.</param>
            <param name="radix">The radix to use.</param>
            <param name="validityHandler">The handler to use to validate digits.</param>
            <param name="digitHandler">The handler to use to convert to digits.</param>
            <param name="hasCarry">True upon return if <paramref name="text"/> is odd.</param>
        </member>
        <member name="M:EaslyNumber.NumberTextPartition.MultipliedByTwo(System.String,System.Int32,EaslyNumber.NumberTextPartition.IsValidDigitHandler,EaslyNumber.NumberTextPartition.ToDigitHandler,System.Boolean)">
            <summary>
            Returns the input number multiplied by two, with an optional carry to add.
            </summary>
            <param name="text">The number to multiply.</param>
            <param name="radix">The radix to use.</param>
            <param name="validityHandler">The handler to use to validate digits.</param>
            <param name="digitHandler">The handler to use to convert to digits.</param>
            <param name="addCarry">True if a carry should be added.</param>
        </member>
        <member name="T:EaslyNumber.TextPartitionCollection">
            <summary>
            The partition of a string into different components of a number.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartitionCollection.IsValid">
            <summary>
            True if at least one partition in the collection is valid.
            </summary>
        </member>
        <member name="M:EaslyNumber.TextPartitionCollection.Parse(System.Int32)">
            <summary>
            Parses a new character in all partitions of the list.
            </summary>
            <param name="index">The position of the character to parse.</param>
        </member>
        <member name="P:EaslyNumber.TextPartitionCollection.PreferredPartition">
            <summary>
            Gets the preferred partition in the list.
            </summary>
        </member>
        <member name="T:EaslyNumber.Rounding">
            <summary>
            The rounding mode.
            </summary>
        </member>
        <member name="F:EaslyNumber.Rounding.ToNearest">
            <summary>
            Round to nearest.
            </summary>
        </member>
        <member name="F:EaslyNumber.Rounding.TowardZero">
            <summary>
            Round toward zero.
            </summary>
        </member>
        <member name="F:EaslyNumber.Rounding.TowardPositiveInfinity">
            <summary>
            Round toward +inf.
            </summary>
        </member>
        <member name="F:EaslyNumber.Rounding.TowardNegativeInfinity">
            <summary>
            Round toward -inf.
            </summary>
        </member>
        <member name="F:EaslyNumber.Rounding.AwayFromZero">
            <summary>
            Round away from zero.
            </summary>
        </member>
        <member name="T:EaslyNumber.TextPartition">
            <summary>
            The partition of a string into different components of a number.
            </summary>
        </member>
        <member name="M:EaslyNumber.TextPartition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyNumber.TextPartition"/> class.
            </summary>
            <param name="text">The string to parse.</param>
        </member>
        <member name="P:EaslyNumber.TextPartition.Text">
            <summary>
            The string to parse.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.LastLeadingSpaceIndex">
            <summary>
            Index of the last optional space character, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.DiscardedProlog">
            <summary>
            The beginning of <see cref="P:EaslyNumber.TextPartition.Text"/> that can be ignored.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.FirstInvalidCharacterIndex">
            <summary>
            Index of the first invalid character, -1 if not parsed.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.IsValid">
            <summary>
            True if the partition represents a valid number.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.IsPartiallyValid">
            <summary>
            True if the partition represents a valid number, possibly followed by an invalid part.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.InvalidPart">
            <summary>
            The remaining part of the string that is not parsed in the number.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.DiscardedEpilog">
            <summary>
            The end of <see cref="P:EaslyNumber.TextPartition.Text"/> that can be ignored.
            </summary>
        </member>
        <member name="P:EaslyNumber.TextPartition.State">
            <summary>
            The parser current state.
            </summary>
        </member>
        <member name="M:EaslyNumber.TextPartition.Parse(System.Int32)">
            <summary>
            Parses a new character.
            </summary>
            <param name="index">The position of the character to parse in <see cref="P:EaslyNumber.TextPartition.Text"/>.</param>
        </member>
        <member name="P:EaslyNumber.TextPartition.ComparisonIndex">
            <summary>
            Index to use for partition comparison.
            </summary>
        </member>
    </members>
</doc>
