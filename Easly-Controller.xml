<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easly-Controller</name>
    </assembly>
    <members>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyInnerDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInnerDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInnerReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyInnerReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyIndexNodeStateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyIndexNodeStateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateReadOnlyList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeStateReadOnlyList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxBlockState, IxxxBlockStateView
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxBlockState, IxxxBlockStateView
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyBlockStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyStateViewDictionary">
            <summary>
            Dictionary of IxxxNodeState, IxxxNodeStateView
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyStateViewDictionary">
            <summary>
            Dictionary of IxxxNodeState, IxxxNodeStateView
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBrowseContext.AddIndexCollection(EaslyController.ReadOnly.IReadOnlyIndexCollection)">
            <summary>
            Adds a collection of indexes to <see cref="P:EaslyController.ReadOnly.IReadOnlyBrowseContext.IndexCollectionList"/>:
            . For placeholder node and optional nodes, the collection is just one index.
            . For list of nodes, the collection contains as many indexes as nodes.
            . For block lists, the collection contains as many indexes as nodes. The first index of each block is a new block index, and others existing block indexes.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowseContext.ValuePropertyTypeTable">
            <summary>
            List of properties that are not nodes, list of nodes or block lists, that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBrowseContext.AddValueProperty(System.String,EaslyController.Constants.ValuePropertyType)">
            <summary>
            Adds a property to <see cref="P:EaslyController.ReadOnly.IReadOnlyBrowseContext.ValuePropertyTypeTable"/>.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="type">Property type.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowseContext"/> class.
            </summary>
            <param name="state">The state that will be browsed.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowseContext.ValuePropertyTypeTable">
            <summary>
            List of properties that are not nodes, list of nodes or block lists, that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.AddIndexCollection(EaslyController.ReadOnly.IReadOnlyIndexCollection)">
            <summary>
            Adds a collection of indexes to <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowseContext.IndexCollectionList"/>:
            . For placeholder node and optional nodes, the collection is just one index.
            . For list of nodes, the collection contains as many indexes as nodes.
            . For block lists, the collection contains as many indexes as nodes. The first index of each block is a new block index, and others existing block indexes.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.AddValueProperty(System.String,EaslyController.Constants.ValuePropertyType)">
            <summary>
            Adds a property to <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowseContext.ValuePropertyTypeTable"/>.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="type">Property type.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.CheckConsistency">
            <summary>
            Checks the context consistency, for code coverage purpose.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.IsCollectionSeparate(EaslyController.ReadOnly.IReadOnlyIndexCollection,EaslyController.ReadOnly.IReadOnlyIndexCollectionReadOnlyList)">
            <summary>
            Checks if a index collection is contained is a list of index collection.
            . Properties must be different.
            . They must not share an index.
            </summary>
            <param name="collection">The collection to check.</param>
            <param name="collectionList">The list of collections already accumulated.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowseContext.CreateIndexCollectionList">
            <summary>
            Creates a IxxxCollectionList object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet.OnNodeStateAttached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Handler to call when attaching a state.
            </summary>
            <param name="state">The attached state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet.OnNodeStateDetached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Handler to call when detaching a state.
            </summary>
            <param name="state">The detached state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet.OnBlockListInnerAttached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            Handler to call when attaching a block list inner.
            </summary>
            <param name="inner">The inner attached.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet.OnBlockListInnerDetached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            Handler to call when detaching a block list inner.
            </summary>
            <param name="inner">The inner detached.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet.OnBlockStateAttached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Handler to call when attaching a block state.
            </summary>
            <param name="blockState">The attached block state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyAttachCallbackSet.OnBlockStateDetached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Handler to call when detaching a block state.
            </summary>
            <param name="blockState">The detached block state.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.NodeStateAttachedHandler">
            <summary>
            Handler to call when attaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.NodeStateDetachedHandler">
            <summary>
            Handler to call when detaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.BlockListInnerAttachedHandler">
            <summary>
            Handler to call when attaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.BlockListInnerDetachedHandler">
            <summary>
            Handler to call when detaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.BlockStateAttachedHandler">
            <summary>
            Handler to call when attaching a block state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.BlockStateDetachedHandler">
            <summary>
            Handler to call when detaching a block state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.OnNodeStateAttached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been attached.
            </summary>
            <param name="state">The attached state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.OnNodeStateDetached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been detached.
            </summary>
            <param name="state">The detached state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.OnBlockListInnerAttached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been attached.
            </summary>
            <param name="inner">The inner attached.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.OnBlockListInnerDetached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been detached.
            </summary>
            <param name="inner">The inner detached.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.OnBlockStateAttached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been attached.
            </summary>
            <param name="blockState">The attached block state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyAttachCallbackSet.OnBlockStateDetached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been detached.
            </summary>
            <param name="blockState">The detached block state.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.Create(EaslyController.ReadOnly.IReadOnlyController)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.ReadOnly.ReadOnlyControllerView"/> object.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.#ctor(EaslyController.ReadOnly.IReadOnlyController)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyControllerView"/> class.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.Init">
            <summary>
            Initializes the view by attaching it to the controller.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.InitAddEvents">
            <summary>
            Add events to handlers.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnNodeStateCreated(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Handler called every time a state is created in the controller.
            </summary>
            <param name="state">The state created.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnNodeStateInitialized(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Handler called every time a state is initialized in the controller.
            </summary>
            <param name="state">The state initialized.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnNodeStateRemoved(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Handler called every time a state is removed in the controller.
            </summary>
            <param name="state">The state removed.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnBlockListInnerCreated(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            Handler called every time a block list inner is created in the controller.
            </summary>
            <param name="inner">The block list inner created.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnBlockListInnerRemoved(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            Handler called every time a block list inner is removed in the controller.
            </summary>
            <param name="inner">The block list inner removed.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnBlockStateCreated(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Handler called every time a block state is created in the controller.
            </summary>
            <param name="blockState">The block state created.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.OnBlockStateRemoved(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Handler called every time a block state is removed in the controller.
            </summary>
            <param name="blockState">The block state removed.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyControllerView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreateStateViewTable">
            <summary>
            Creates a IxxxStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreateBlockStateViewTable">
            <summary>
            Creates a IxxxBlockStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreateCallbackSet">
            <summary>
            Creates a IxxxAttachCallbackSet object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreatePlaceholderNodeStateView(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Creates a IxxxPlaceholderNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreateOptionalNodeStateView(EaslyController.ReadOnly.IReadOnlyOptionalNodeState)">
            <summary>
            Creates a IxxxOptionalNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreatePatternStateView(EaslyController.ReadOnly.IReadOnlyPatternState)">
            <summary>
            Creates a IxxxPatternStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreateSourceStateView(EaslyController.ReadOnly.IReadOnlySourceState)">
            <summary>
            Creates a IxxxSourceStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyControllerView.CreateBlockStateView(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Creates a IxxxBlockStateView object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyController">
            <summary>
            Controller for a node tree.
            This controller supports read-only access only.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyController.Stats">
            <summary>
            Stats for debugging and test purpose.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyController.NodeStateCreated">
            <summary>
            Called when a state is created.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyController.NodeStateInitialized">
            <summary>
            Called when a state is initialized.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyController.NodeStateRemoved">
            <summary>
            Called when a state is removed.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyController.BlockListInnerCreated">
            <summary>
            Called when a block list inner is created.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.Contains(EaslyController.ReadOnly.IReadOnlyIndex)">
            <summary>
            Checks if an index corresponds to a state.
            </summary>
            <param name="index">The index to check</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.IndexToState(EaslyController.ReadOnly.IReadOnlyIndex)">
            <summary>
            Gets the state corresponding to a given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.IsAssigned(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Returns the assigned state of an optional node.
            </summary>
            <param name="index">Index of the node.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.GetDiscreteValue(EaslyController.ReadOnly.IReadOnlyIndex,System.String,System.Int32@,System.Int32@)">
            <summary>
            Returns the value of an enum or boolean.
            </summary>
            <param name="index">Index of the node.</param>
            <param name="propertyName">Name of the property to read.</param>
            <param name="minValue">Minimum valid value for this property upon return.</param>
            <param name="maxValue">Maximum valid value for this property upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.GetStringValue(EaslyController.ReadOnly.IReadOnlyIndex,System.String)">
            <summary>
            Returns the value of a string.
            </summary>
            <param name="index">Index of the node.</param>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.GetGuidValue(EaslyController.ReadOnly.IReadOnlyIndex,System.String)">
            <summary>
            Returns the value of a guid.
            </summary>
            <param name="index">Index of the node.</param>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyController.IsChildState(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndex@)">
            <summary>
            Checks if a state is the child of another. This method returns true if <paramref name="parentState"/> and <paramref name="state"/> are the same.
            </summary>
            <param name="parentState">The parent state.</param>
            <param name="state">The state to check.</param>
            <param name="firstIndex">The first index in the chain leading from the parent to the child. Null if they are the same.</param>
            <returns>True if <paramref name="parentState"/> is <paramref name="state"/> or a parent; Otherwise, false.</returns>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyControllerInternal">
            <summary>
            Controller for a node tree.
            This controller supports read-only access only.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyControllerInternal.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a controller view.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyControllerInternal.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a controller view.
            </summary>
            <param name="view">The detaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyController">
            <summary>
            Controller for a node tree.
            This controller supports read-only access only.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.Create(EaslyController.ReadOnly.IReadOnlyRootNodeIndex)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.ReadOnly.ReadOnlyController"/> object.
            </summary>
            <param name="nodeIndex">Index of the root of the node tree.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyController"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyController.Stats">
            <summary>
            Stats for debugging and test purpose.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.ReadOnlyController.NodeStateCreated">
            <summary>
            Called when a state is created.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.ReadOnlyController.NodeStateInitialized">
            <summary>
            Called when a state is initialized.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.ReadOnlyController.NodeStateRemoved">
            <summary>
            Called when a state is removed.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.ReadOnlyController.BlockListInnerCreated">
            <summary>
            Called when a block list inner is created.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.Contains(EaslyController.ReadOnly.IReadOnlyIndex)">
            <summary>
            Checks if an index corresponds to a state.
            </summary>
            <param name="index">The index to check</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.IndexToState(EaslyController.ReadOnly.IReadOnlyIndex)">
            <summary>
            Gets the state corresponding to a given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a controller view.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a controller view.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.IsAssigned(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Returns the assigned state of an optional node.
            </summary>
            <param name="index">Index of the node.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.GetDiscreteValue(EaslyController.ReadOnly.IReadOnlyIndex,System.String,System.Int32@,System.Int32@)">
            <summary>
            Returns the value of an enum or boolean.
            </summary>
            <param name="index">Index of the node.</param>
            <param name="propertyName">Name of the property to read.</param>
            <param name="minValue">Minimum valid value for this property upon return.</param>
            <param name="maxValue">Maximum valid value for this property upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.GetStringValue(EaslyController.ReadOnly.IReadOnlyIndex,System.String)">
            <summary>
            Returns the value of a string.
            </summary>
            <param name="index">Index of the node.</param>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.GetGuidValue(EaslyController.ReadOnly.IReadOnlyIndex,System.String)">
            <summary>
            Returns the value of a guid.
            </summary>
            <param name="index">Index of the node.</param>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.IsChildState(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndex@)">
            <summary>
            Checks if a state is the child of another. This method returns true if <paramref name="parentState"/> and <paramref name="state"/> are the same.
            </summary>
            <param name="parentState">The parent state.</param>
            <param name="state">The state to check.</param>
            <param name="firstIndex">The first index in the chain leading from the parent to the child. Null if they are the same.</param>
            <returns>True if <paramref name="parentState"/> is <paramref name="state"/> or a parent; Otherwise, false.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyController"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateChildStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateBrowseContext(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxxBrowseContext object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreatePlaceholderInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex})">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateOptionalInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex})">
            <summary>
            Creates a IxxxOptionalInner{IxxxBrowsingOptionalNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex})">
            <summary>
            Creates a IxxxListInner{IxxxBrowsingListNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateBlockListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex})">
            <summary>
            Creates a IxxxBlockListInner{IxxxBrowsingBlockNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyController.CreateRootNodeState(EaslyController.ReadOnly.IReadOnlyRootNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex.BlockIndex">
            <summary>
            Position of the block in the block list.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingBlockNodeIndex.#ctor(BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingBlockNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="blockIndex">The position of the block in the block list.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingBlockNodeIndex.BlockIndex">
            <summary>
            Position of the block in the block list.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingCollectionNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingCollectionNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingCollectionNodeIndex.Node">
            <summary>
            Node indexed.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingCollectionNodeIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowsingCollectionNodeIndex.Node"/>.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingExistingBlockNodeIndex.ParentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingExistingBlockNodeIndex.Index">
            <summary>
            Position of the node in the block.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingExistingBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">Indexed node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingExistingBlockNodeIndex.ParentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingExistingBlockNodeIndex.Index">
            <summary>
            Position of the node in the block.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex.ParentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex.Index">
            <summary>
            Position of the node in the list.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="node">Indexed node in the list</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="index">Position of the node in the list.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndex.ParentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndex.Index">
            <summary>
            Position of the node in the list.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex.ParentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex.ToExistingBlockIndex">
            <summary>
            Gets the index for this node in an existing block.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingNewBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingNewBlockNodeIndex.ParentNode">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingNewBlockNodeIndex.ToExistingBlockIndex">
            <summary>
            Gets the index for this node in an existing block.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingNewBlockNodeIndex.CreateExistingBlockIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndexCollection">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyIndexCollection.PropertyName">
            <summary>
            Property indexed for all nodes in the collection.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyIndexCollection.NodeIndexList">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyIndexCollection.IsEmpty">
            <summary>
            True is the collection is empty.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyIndexCollection`1.PropertyName">
            <summary>
            Property indexed for all nodes in the collection.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyIndexCollection`1.NodeIndexList">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyIndexCollection`1.IsEmpty">
            <summary>
            True is the collection is empty.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyIndexCollection`1.#ctor(System.String,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyIndexCollection`1"/> class.
            </summary>
            <param name="propertyName">Property indexed for all nodes in the collection.</param>
            <param name="nodeIndexList">Collection of node indexes.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyIndexCollection`1.PropertyName">
            <summary>
            Property indexed for all nodes in the collection.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyIndexCollection`1.NodeIndexList">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyIndexCollection`1.IsEmpty">
            <summary>
            True is the collection is empty.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyIndexCollection`1.IsSamePropertyName(System.String,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Checks if indexes are already in the collection of indexes.
            </summary>
            <param name="propertyName">Property indexed for all nodes in <paramref name="nodeIndexList"/>.</param>
            <param name="nodeIndexList">Collection of node indexes.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex.Optional"/>.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex.Node">
            <summary>
            The indexed replication pattern node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed replication pattern node.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex.Node">
            <summary>
            The indexed replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex.Node"/>.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingPatternIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed node.</param>
            <param name="node">The indexed node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex.Node">
            <summary>
            The indexed node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex.Node"/>.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex.Node">
            <summary>
            The indexed source identifier node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed source identifier node.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex.Node">
            <summary>
            The indexed source identifier node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex.Node"/>.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBrowsingSourceIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyChildIndex">
            <summary>
            Base interface for any index representing the child node of a parent node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyChildIndex.PropertyName">
            <summary>
            The property in the parent for the indexed node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyIndex">
            <summary>
            Base interface for any index.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyNodeIndex">
            <summary>
            Base interface for any index representing a node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeIndex.Node">
            <summary>
            The indexed node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyRootNodeIndex.#ctor(BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyRootNodeIndex"/> class.
            </summary>
            <param name="node">The indexed root node.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyRootNodeIndex.Node">
            <summary>
            The indexed root node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyRootNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockListInner">
            <summary>
            Inner for a block list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner.BlockType">
            <summary>
            Block type for all blocks in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner.ItemType">
            <summary>
            Class type for all nodes in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner.IsEmpty">
            <summary>
            Checks if the inner has no blocks.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner.IsSingle">
            <summary>
            Checks if the inner has only ont child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyBlockListInner.BlockStateCreated">
            <summary>
            Called when a block state is created.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyBlockListInner.BlockStateRemoved">
            <summary>
            Called when a block state is removed.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockListInner.IndexAt(System.Int32,System.Int32)">
            <summary>
            Gets the index of the node at the given position.
            </summary>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
            <returns>The index of the node at position <paramref name="blockIndex"/> and <paramref name="index"/>.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockListInner.AllIndexes">
            <summary>
            Gets indexes for all nodes in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockListInner`1">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.BlockType">
            <summary>
            Block type for all blocks in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.ItemType">
            <summary>
            Class type for all nodes in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.IsEmpty">
            <summary>
            Checks if the inner has no blocks.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.IsSingle">
            <summary>
            Checks if the inner has only ont child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.BlockStateCreated">
            <summary>
            Called when a block state is created.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.BlockStateRemoved">
            <summary>
            Called when a block state is removed.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.IndexAt(System.Int32,System.Int32)">
            <summary>
            Gets the index of the node at the given position.
            </summary>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
            <returns>The index of the node at position <paramref name="blockIndex"/> and <paramref name="index"/>.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.AllIndexes">
            <summary>
            Gets indexes for all nodes in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.InitNewBlock(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex)">
            <summary>
            Creates and initializes a new block state in the inner.
            </summary>
            <param name="newBlockIndex">Index of the new block state to create.</param>
            <returns>The created block state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockListInner`1.NotifyBlockStateRemoved(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Requests that the notification that a block has been removed be sent.
            </summary>
            <param name="blockState">The removed block.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBlockListInner`2">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBlockListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.InitNewBlock(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex)">
            <summary>
            Creates and initializes a new block state in the inner.
            </summary>
            <param name="newBlockIndex">Index of the new block state to create.</param>
            <returns>The created block state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex)">
            <summary>
            Initializes a newly created state for a node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingExistingBlockNodeIndex)">
            <summary>
            Initializes a newly created state for a node in the inner.
            </summary>
            <param name="existingNodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.IsNeverEmpty">
            <summary>
            Checks if the inner must have at list one item.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.IsEmpty">
            <summary>
            Checks if the inner has no blocks.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.IsSingle">
            <summary>
            Checks if the inner has only ont child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.InterfaceType">
            <summary>
            Interface type for all nodes in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.BlockType">
            <summary>
            Block type for all blocks in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.ItemType">
            <summary>
            Class type for all nodes in the inner. Must inherit from <see cref="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.InterfaceType"/>.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.BlockStateCreated">
            <summary>
            Called when a block state is created.
            </summary>
        </member>
        <member name="E:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.BlockStateRemoved">
            <summary>
            Called when a block state is removed.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.Count">
            <summary>
            Count of all node states in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.IndexAt(System.Int32,System.Int32)">
            <summary>
            Gets the index of the node at the given position.
            </summary>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
            <returns>The index of the node at position <paramref name="blockIndex"/> and <paramref name="index"/>.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.AllIndexes">
            <summary>
            Gets indexes for all nodes in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.CloneChildren(BaseNode.INode)">
            <summary>
            Creates a clone of all children of the inner, using <paramref name="parentNode"/> as their parent.
            </summary>
            <param name="parentNode">The node that will contains references to cloned children upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.NotifyBlockStateRemoved(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Requests that the notification that a block has been removed be sent.
            </summary>
            <param name="blockState">The removed block.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyInner"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.CreateBlockStateList">
            <summary>
            Creates a IxxxBlockStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.CreateBlockState(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Creates a IxxxBlockState object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockListInner`2.CreateBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyCollectionInner">
            <summary>
            Base inner for a list or a block list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyCollectionInner.Count">
            <summary>
            Count of all node states in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyCollectionInner.IsNeverEmpty">
            <summary>
            Checks if the inner must have at list one item.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyCollectionInner`1">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyCollectionInner`1.Count">
            <summary>
            Count of all node states in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyCollectionInner`1.IsNeverEmpty">
            <summary>
            Checks if the inner must have at list one item.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyCollectionInner`2">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyCollectionInner`2.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyCollectionInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyCollectionInner`2.Count">
            <summary>
            Count of all node states in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyCollectionInner`2.IsNeverEmpty">
            <summary>
            Checks if the inner must have at list one item.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyCollectionInner`2.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyInner"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyListInner">
            <summary>
            Inner for a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyListInner.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyListInner.IndexAt(System.Int32)">
            <summary>
            Gets the index of the node at the given position.
            </summary>
            <param name="index">Position of the node in the list.</param>
            <returns>The index of the node at position <paramref name="index"/>.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyListInner.AllIndexes">
            <summary>
            Gets indexes for all nodes in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyListInner`1">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyListInner`1.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyListInner`1.IndexAt(System.Int32)">
            <summary>
            Gets the index of the node at the given position.
            </summary>
            <param name="index">Position of the node in the list.</param>
            <returns>The index of the node at position <paramref name="index"/>.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyListInner`1.AllIndexes">
            <summary>
            Gets indexes for all nodes in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyListInner`2">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex)">
            <summary>
            Initializes a newly created state for a node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex)">
            <summary>
            Initializes a newly created state for a node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyListInner`2.IsNeverEmpty">
            <summary>
            Checks if the inner must have at list one item.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyListInner`2.InterfaceType">
            <summary>
            Interface type for all nodes in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyListInner`2.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyListInner`2.Count">
            <summary>
            Count of all node states in the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.IndexAt(System.Int32)">
            <summary>
            Gets the index of the node at the given position.
            </summary>
            <param name="index">Position of the node in the list.</param>
            <returns>The index of the node at position <paramref name="index"/>.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.AllIndexes">
            <summary>
            Gets indexes for all nodes in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.CloneChildren(BaseNode.INode)">
            <summary>
            Creates a clone of all children of the inner, using <paramref name="parentNode"/> as their parent.
            </summary>
            <param name="parentNode">The node that will contains references to cloned children upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyInner"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyListInner`2.CreateListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyInner">
            <summary>
            Interface for all inners.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyInner.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyInner.PropertyName">
            <summary>
            Property name of the inner in the parent.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyInner.InterfaceType">
            <summary>
            Interface type for all nodes in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyInner`1.PropertyName">
            <summary>
            Property name of the inner in the parent.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyInner`1.InterfaceType">
            <summary>
            Interface type for all nodes in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyInner`1.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex)">
            <summary>
            Initializes a newly created state for a node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyInner`1.CloneChildren(BaseNode.INode)">
            <summary>
            Creates a clone of all children of the inner, using <paramref name="parentNode"/> as their parent.
            </summary>
            <param name="parentNode">The node that will contains references to cloned children upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyInner`1.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyInner`1.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInner`1.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyInner`1.PropertyName">
            <summary>
            Property name of the inner in the parent.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyInner`1.InterfaceType">
            <summary>
            Interface type for all nodes in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInner`1.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex)">
            <summary>
            Initializes a newly created state for a node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInner`1.CloneChildren(BaseNode.INode)">
            <summary>
            Creates a clone of all children of the inner, using <paramref name="parentNode"/> as their parent.
            </summary>
            <param name="parentNode">The node that will contains references to cloned children upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInner`1.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInner`1.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            DEtach a view from the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyInner`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyInner"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyOptionalInner">
            <summary>
            Inner for an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalInner.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalInner.IsAssigned">
            <summary>
            True if the optional node is provided.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyOptionalInner`1">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalInner`1.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalInner`1.IsAssigned">
            <summary>
            True if the optional node is provided.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyOptionalInner`2">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyOptionalInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex)">
            <summary>
            Initializes a newly created state for the node in the inner, provided or not.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Initializes a newly created state for the node in the inner, provided or not.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.InterfaceType">
            <summary>
            Interface type of the node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.IsAssigned">
            <summary>
            True if the optional node is provided.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.CloneChildren(BaseNode.INode)">
            <summary>
            Creates a clone of the optional node of the inner, using <paramref name="parentNode"/> as the parent.
            </summary>
            <param name="parentNode">The node that will contains a reference to the cloned child upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxOptionalNodeState object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderInner">
            <summary>
            Inner for a child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPlaceholderInner.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderInner`1">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPlaceholderInner`1.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex)">
            <summary>
            Initializes a newly created state for the node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.InitChildState(EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Initializes a newly created state for the node in the inner.
            </summary>
            <param name="nodeIndex">Index of the node.</param>
            <returns>The created node state.</returns>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.InterfaceType">
            <summary>
            Interface type of the node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.ChildState">
            <summary>
            The state of the child node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.CloneChildren(BaseNode.INode)">
            <summary>
            Creates a clone of the child node of the inner, using <paramref name="parentNode"/> as the parent.
            </summary>
            <param name="parentNode">The node that will contains a reference to the cloned child upon return.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the inner.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlySingleInner">
            <summary>
            Base inner for a single node inner.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlySingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlySingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySingleInner`1.#ctor(EaslyController.ReadOnly.IReadOnlyNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlySingleInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockStateView.#ctor(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBlockStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="blockState">The block state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyBlockStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockStateView.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeStateView.#ctor(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The node state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeStateView.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeStateView.#ctor(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyOptionalNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyOptionalNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The optional node state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyOptionalNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPatternStateView.#ctor(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyPatternState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyPatternStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The pattern state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPatternStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyPatternStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateView.#ctor(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The child node state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlySourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlySourceStateView.State">
            <summary>
            The source state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlySourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySourceStateView.#ctor(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlySourceState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlySourceStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The source state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlySourceStateView.State">
            <summary>
            The source state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySourceStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlySourceStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockState">
            <summary>
            State of a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.ChildBlock">
            <summary>
            The block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyBlockState.Comment">
            <summary>
            The comment associated to this block state. Null if none.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockState.PropertyToInner(System.String)">
            <summary>
            Gets the inner corresponding to a property.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockState`1.InitBlockState">
            <summary>
            Initializes the block state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockState`1.InitNodeState(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Initializes the state for a node of the block.
            </summary>
            <param name="state">The state to initialize.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockState`1.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the block state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockState`1.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the block state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyBlockState`1.CloneBlock(BaseNode.INode,System.Int32)">
            <summary>
            Creates a clone of the block and assigns it in the provided parent.
            </summary>
            <param name="parentNode">The node that will contains a reference to the cloned block upon return.</param>
            <param name="blockIndex">Position where to insert the block in <paramref name="parentNode"/>.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.#ctor(EaslyController.ReadOnly.IReadOnlyBlockListInner,EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyBlockState`1"/> class.
            </summary>
            <param name="parentInner">Inner containing the block state.</param>
            <param name="newBlockIndex">Index that was used to create the block state.</param>
            <param name="childBlock">The block.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.InitBlockState">
            <summary>
            Initializes the block state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.InitNodeState(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Initializes the state for a node of the block.
            </summary>
            <param name="state">The state to initialize.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.ChildBlock">
            <summary>
            The block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyBlockState`1.Comment">
            <summary>
            The comment associated to this state. Null if none.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.PropertyToInner(System.String)">
            <summary>
            Gets the inner corresponding to a property in a node.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CloneBlock(BaseNode.INode,System.Int32)">
            <summary>
            Creates a clone of the block and assigns it in the provided parent.
            </summary>
            <param name="parentNode">The node that will contains a reference to the cloned block upon return.</param>
            <param name="blockIndex">Position where to insert the block in <paramref name="parentNode"/>.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the block state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the block state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyBlockState"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreatePatternInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreateSourceInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreateExistingPatternIndex">
            <summary>
            Creates a IxxxBrowsingPatternIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreateExistingSourceIndex">
            <summary>
            Creates a IxxxBrowsingSourceIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreatePatternState(EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex)">
            <summary>
            Creates a IxxxPatternState object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyBlockState`1.CreateSourceState(EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex)">
            <summary>
            Creates a IxxxSourceState object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyOptionalNodeState">
            <summary>
            State of an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyOptionalNodeState.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.#ctor(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.Node">
            <summary>
            The node, or null if not assigned.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.Comment">
            <summary>
            The comment associated to this state. Null if none.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.BrowseChildren(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyInner{EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex})">
            <summary>
            Browse the optional node in the node tree.
            </summary>
            <param name="browseContext">The context used to browse the node tree.</param>
            <param name="parentInner">The inner containing this state as a child.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyNodeState"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyOptionalNodeState`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState">
            <summary>
            State of a child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState`1">
            <summary>
            State of a child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1">
            <summary>
            State of a child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1.#ctor(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1.Node">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1.Comment">
            <summary>
            The comment associated to this state. Null if none.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyNodeState"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPlaceholderNodeState`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.Node">
            <summary>
            The node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.ValuePropertyTypeTable">
            <summary>
            Table of children that are not nodes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyNodeState.Comment">
            <summary>
            The comment associated to this state. Null if none.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState.PropertyToInner(System.String)">
            <summary>
            Gets the inner corresponding to a property.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState.PropertyToValue(System.String,System.Object@,System.Int32@,System.Int32@)">
            <summary>
            Gets the value corresponding to a value property.
            The value type can be obtained from <see cref="P:EaslyController.ReadOnly.IReadOnlyNodeState.ValuePropertyTypeTable"/>.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value">Value of the property upon return.</param>
            <param name="minValue">Min value of the property upon return. Only applies to enum and booleans.</param>
            <param name="maxValue">Max value of the property upon return. Only applies to enum and booleans.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState.GetAllChildren">
            <summary>
            Returns a list of states for all child nodes.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyNodeState`1">
            <summary>
            Base interface for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState`1.BrowseChildren(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyInner{EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex})">
            <summary>
            Find children in the node tree.
            </summary>
            <param name="browseContext">The context used to browse the node tree.</param>
            <param name="parentInner">The inner containing this state as a child.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState`1.Init(EaslyController.ReadOnly.IReadOnlyInner{EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex},EaslyController.ReadOnly.IReadOnlyInnerReadOnlyDictionary{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,EaslyController.Constants.ValuePropertyType})">
            <summary>
            Initializes a newly created state.
            </summary>
            <param name="parentInner">Inner containing this state.</param>
            <param name="innerTable">Table for all inners in this state.</param>
            <param name="valuePropertyTable">Table of children that are not nodes.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState`1.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyNodeState`1.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view from the state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyNodeState`1">
            <summary>
            Base class for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.#ctor(EaslyController.ReadOnly.IReadOnlyIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.Init(EaslyController.ReadOnly.IReadOnlyInner{EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex},EaslyController.ReadOnly.IReadOnlyInnerReadOnlyDictionary{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,EaslyController.Constants.ValuePropertyType})">
            <summary>
            Initializes a newly created state.
            </summary>
            <param name="parentInner">Inner containing this state.</param>
            <param name="innerTable">Table for all inners in this state.</param>
            <param name="valuePropertyTable">Table of children that are not nodes.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.BrowseChildren(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyInner{EaslyController.ReadOnly.IReadOnlyBrowsingChildIndex})">
            <summary>
            Find children in the node tree.
            </summary>
            <param name="browseContext">The context used to browse the node tree.</param>
            <param name="parentInner">The inner containing this state as a child.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.Node">
            <summary>
            The node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.ValuePropertyTypeTable">
            <summary>
            Table of children that are not nodes.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.Comment">
            <summary>
            The comment associated to this state. Null if none.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.PropertyToInner(System.String)">
            <summary>
            Gets the inner corresponding to a property in the node.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.PropertyToValue(System.String,System.Object@,System.Int32@,System.Int32@)">
            <summary>
            Gets the value corresponding to a value property.
            The value type can be obtained from <see cref="P:EaslyController.ReadOnly.ReadOnlyNodeState`1.ValuePropertyTypeTable"/>.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="value">Value of the property upon return.</param>
            <param name="minValue">Min value of the property upon return. Only applies to enum and booleans.</param>
            <param name="maxValue">Max value of the property upon return. Only applies to enum and booleans.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.GetAllChildren">
            <summary>
            Returns a list of states for all child nodes.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.Attach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Attach a view to the state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.Detach(EaslyController.ReadOnly.IReadOnlyControllerView,EaslyController.ReadOnly.IReadOnlyAttachCallbackSet)">
            <summary>
            Detach a view to the state.
            </summary>
            <param name="view">The attaching view.</param>
            <param name="callbackSet">The set of callbacks to no longer call when enumerating existing states.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyNodeState"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPatternState">
            <summary>
            State of an replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPatternState.Node">
            <summary>
            The replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPatternState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlyPatternState.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlyPatternState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlyPatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlyPatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPatternState`1.#ctor(EaslyController.ReadOnly.IReadOnlyBlockState,EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlyPatternState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPatternState`1.Node">
            <summary>
            The replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPatternState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlyPatternState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPatternState`1.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPatternState`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyNodeState"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlyPatternState`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlySourceState">
            <summary>
            State of a source identifier node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlySourceState.Node">
            <summary>
            The source identifier  node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlySourceState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.IReadOnlySourceState.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="P:EaslyController.ReadOnly.IReadOnlySourceState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="T:EaslyController.ReadOnly.IReadOnlySourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.ReadOnly.ReadOnlySourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySourceState`1.#ctor(EaslyController.ReadOnly.IReadOnlyBlockState,EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.ReadOnly.ReadOnlySourceState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlySourceState`1.Node">
            <summary>
            The source identifier  node.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlySourceState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.ReadOnly.ReadOnlySourceState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySourceState`1.CloneNode">
            <summary>
            Returns a clone of the node of this state.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySourceState`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyNodeState"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.ReadOnly.ReadOnlySourceState`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableIndexNodeStateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInnerDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInnerReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableInnerReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeStateReadOnlyList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteablePlaceholderNodeStateReadOnlyList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableBlockStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowseContext.#ctor(EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowseContext"/> class.
            </summary>
            <param name="state">The state that will be browsed.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowseContext.CheckConsistency">
            <summary>
            Checks the context consistency, for code coverage purpose.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowseContext.CreateIndexCollectionList">
            <summary>
            Creates a IxxxCollectionList object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAttachCallbackSet.NodeStateAttachedHandler">
            <summary>
            Handler to call when attaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAttachCallbackSet.NodeStateDetachedHandler">
            <summary>
            Handler to call when detaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAttachCallbackSet.BlockListInnerAttachedHandler">
            <summary>
            Handler to call when attaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAttachCallbackSet.BlockListInnerDetachedHandler">
            <summary>
            Handler to call when detaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAttachCallbackSet.BlockStateAttachedHandler">
            <summary>
            Handler to call when attaching a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAttachCallbackSet.BlockStateDetachedHandler">
            <summary>
            Handler to call when detaching a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAttachCallbackSet.OnNodeStateAttached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been attached.
            </summary>
            <param name="state">The attached state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAttachCallbackSet.OnNodeStateDetached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been detached.
            </summary>
            <param name="state">The detached state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAttachCallbackSet.OnBlockListInnerAttached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been attached.
            </summary>
            <param name="inner">The inner attached.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAttachCallbackSet.OnBlockListInnerDetached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been detached.
            </summary>
            <param name="inner">The inner detached.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAttachCallbackSet.OnBlockStateAttached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been attached.
            </summary>
            <param name="blockState">The attached block state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAttachCallbackSet.OnBlockStateDetached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been detached.
            </summary>
            <param name="blockState">The detached block state.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.Create(EaslyController.Writeable.IWriteableController)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Writeable.WriteableControllerView"/> object.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.#ctor(EaslyController.Writeable.IWriteableController)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableControllerView"/> class.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.InitAddEvents">
            <summary>
            Add events to handlers.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlockStateInserted(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Handler called every time a block state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlockStateRemoved(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Handler called every time a block state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlockViewRemoved(EaslyController.Writeable.IWriteableRemoveBlockViewOperation)">
            <summary>
            Handler called every time a block view must be removed from the controller view.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnStateInserted(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnStateRemoved(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Handler called every time a state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnStateReplaced(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Handler called every time a state is replaced in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnStateAssigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is assigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnStateUnassigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is unassigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnDiscreteValueChanged(EaslyController.Writeable.IWriteableChangeDiscreteValueOperation)">
            <summary>
            Handler called every time a discrete value is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnTextChanged(EaslyController.Writeable.IWriteableChangeTextOperation)">
            <summary>
            Handler called every time a string is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnCommentChanged(EaslyController.Writeable.IWriteableChangeCommentOperation)">
            <summary>
            Handler called every time a comment is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlockStateChanged(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Handler called every time a block state is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnStateMoved(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Handler called every time a state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlockStateMoved(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Handler called every time a block state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlockSplit(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Handler called every time a block split in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnBlocksMerged(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Handler called every time two blocks are merged.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.OnGenericRefresh(EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Handler called to refresh views.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableControllerView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreateStateViewTable">
            <summary>
            Creates a IxxxStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreateBlockStateViewTable">
            <summary>
            Creates a IxxxBlockStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreateCallbackSet">
            <summary>
            Creates a IxxxAttachCallbackSet object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreatePlaceholderNodeStateView(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Creates a IxxxPlaceholderNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreateOptionalNodeStateView(EaslyController.ReadOnly.IReadOnlyOptionalNodeState)">
            <summary>
            Creates a IxxxOptionalNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreatePatternStateView(EaslyController.ReadOnly.IReadOnlyPatternState)">
            <summary>
            Creates a IxxxPatternStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreateSourceStateView(EaslyController.ReadOnly.IReadOnlySourceState)">
            <summary>
            Creates a IxxxSourceStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableControllerView.CreateBlockStateView(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Creates a IxxxBlockStateView object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableAssignmentOperation.ParentNode">
            <summary>
            Node where the assignment is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableAssignmentOperation.PropertyName">
            <summary>
            Optional property of <see cref="P:EaslyController.Writeable.IWriteableAssignmentOperation.ParentNode"/> for which assignment is changed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableAssignmentOperation.Update(EaslyController.Writeable.IWriteableOptionalNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">The modified state.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableAssignmentOperation.ToInverseAssignment">
            <summary>
            Creates an operation to undo the assignment operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAssignmentOperation.#ctor(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableAssignmentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the assignment is taking place.</param>
            <param name="propertyName">Optional property of <paramref name="parentNode"/> for which assignment is changed.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAssignmentOperation.ParentNode">
            <summary>
            Node where the assignment is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAssignmentOperation.PropertyName">
            <summary>
            Optional property of <see cref="P:EaslyController.Writeable.WriteableAssignmentOperation.ParentNode"/> for which assignment is changed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAssignmentOperation.Update(EaslyController.Writeable.IWriteableOptionalNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">The new state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAssignmentOperation.ToInverseAssignment">
            <summary>
            Creates an operation to undo the assignment operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableAssignmentOperation.CreateAssignmentOperation(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableChangeBlockOperation">
            <summary>
            Operation details for changing a block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeBlockOperation.ParentNode">
            <summary>
            Node where the block change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeBlockOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.IWriteableChangeBlockOperation.ParentNode"/> for which a block is changed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeBlockOperation.BlockIndex">
            <summary>
            Index of the changed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeBlockOperation.Replication">
            <summary>
            New replication value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state changed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeBlockOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change replication operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableChangeBlockOperation">
            <summary>
            Operation details for changing a block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableChangeBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block change is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> for which a block is changed.</param>
            <param name="blockIndex">Index of the changed block.</param>
            <param name="replication">New replication value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeBlockOperation.ParentNode">
            <summary>
            Node where the block change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeBlockOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.WriteableChangeBlockOperation.ParentNode"/> for which a block is changed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeBlockOperation.BlockIndex">
            <summary>
            Index of the changed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeBlockOperation.Replication">
            <summary>
            New replication value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state changed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeBlockOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change replication operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeBlockOperation.CreateChangeBlockOperation(BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeCommentOperation.ParentNode">
            <summary>
            Node where the change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeCommentOperation.OldText">
            <summary>
            The old comment.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeCommentOperation.NewText">
            <summary>
            The new comment.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeCommentOperation.Update(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State changed.</param>
            <param name="oldText">The old text.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeCommentOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change commment operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeCommentOperation.#ctor(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableChangeCommentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="text">The new comment.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeCommentOperation.ParentNode">
            <summary>
            Node where the change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeCommentOperation.OldText">
            <summary>
            The old comment.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeCommentOperation.NewText">
            <summary>
            The new comment.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeCommentOperation.Update(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State changed.</param>
            <param name="oldText">The old comment.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeCommentOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change commment operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeCommentOperation.CreateChangeCommentOperation(System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeTextOperation.ParentNode">
            <summary>
            Node where the change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeTextOperation.PropertyName">
            <summary>
            Name of the property to change.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeTextOperation.OldText">
            <summary>
            The old text.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeTextOperation.NewText">
            <summary>
            The new text.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeTextOperation.Update(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State changed.</param>
            <param name="oldText">The old text.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeTextOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change text operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeTextOperation.#ctor(BaseNode.INode,System.String,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableChangeTextOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeTextOperation.ParentNode">
            <summary>
            Node where the change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeTextOperation.PropertyName">
            <summary>
            Name of the property to change.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeTextOperation.OldText">
            <summary>
            The old text.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeTextOperation.NewText">
            <summary>
            The new text.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeTextOperation.Update(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State changed.</param>
            <param name="oldText">The old text.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeTextOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change text operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeTextOperation.CreateChangeTextOperation(System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.ParentNode">
            <summary>
            Node where the change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.PropertyName">
            <summary>
            Name of the property to change.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.OldValue">
            <summary>
            The old value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.NewValue">
            <summary>
            The new value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.Update(EaslyController.Writeable.IWriteableNodeState,System.Int32)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State changed.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableChangeDiscreteValueOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change value operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableChangeDiscreteValueOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="value">The new value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.ParentNode">
            <summary>
            Node where the change is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.PropertyName">
            <summary>
            Name of the property to change.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.OldValue">
            <summary>
            The old value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.NewValue">
            <summary>
            The new value.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.Update(EaslyController.Writeable.IWriteableNodeState,System.Int32)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State changed.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change value operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableChangeDiscreteValueOperation.CreateChangeDiscreteValueOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveNodeOperation.ParentNode">
            <summary>
            Node where the node is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveNodeOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableMoveNodeOperation.ParentNode"/> where the node is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveNodeOperation.BlockIndex">
            <summary>
            Block position where the node is moved, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveNodeOperation.Index">
            <summary>
            The current position before move.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveNodeOperation.Direction">
            <summary>
            The change in position, relative to the current position.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableMoveNodeOperation.Update(EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="childState">State moved.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableMoveNodeOperation.ToInverseMove">
            <summary>
            Creates an operation to undo the move operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableMoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the node is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is moved.</param>
            <param name="blockIndex">Block position where the node is moved, if applicable.</param>
            <param name="index">The current position before move.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveNodeOperation.ParentNode">
            <summary>
            Node where the node is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveNodeOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableMoveNodeOperation.ParentNode"/> where the node is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveNodeOperation.BlockIndex">
            <summary>
            Block position where the node is moved, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveNodeOperation.Index">
            <summary>
            The current position before move.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveNodeOperation.Direction">
            <summary>
            The change in position, relative to the current position.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveNodeOperation.Update(EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="state">State moved.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveNodeOperation.ToInverseMove">
            <summary>
            Creates an operation to undo the move operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveNodeOperation.CreateMoveNodeOperation(System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.ParentNode">
            <summary>
            Node where the blocks are merged.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.ParentNode"/> where blocks are merged.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.BlockIndex">
            <summary>
            Index of the block merged.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.MergedBlock">
            <summary>
            The merged block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMergeBlocksOperation.Index">
            <summary>
            Position of the first node that was merged, relative to the merged block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableMergeBlocksOperation.Update(EaslyController.Writeable.IWriteableBlockState,System.Int32)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">The merged block state.</param>
            <param name="index">Position of the first node that was merged, relative to the merged block.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableMergeBlocksOperation.ToSplitBlockOperation">
            <summary>
            Creates an operation to undo the merge blocks operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMergeBlocksOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableMergeBlocksOperation"/> class.
            </summary>
            <param name="parentNode">Node where the blocks are merged.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where blocks are merged.</param>
            <param name="blockIndex">Position of the merged block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMergeBlocksOperation.ParentNode">
            <summary>
            Node where the blocks are merged.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMergeBlocksOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableMergeBlocksOperation.ParentNode"/> where blocks are merged.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMergeBlocksOperation.BlockIndex">
            <summary>
            Index of the block merged.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMergeBlocksOperation.MergedBlock">
            <summary>
            The merged block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMergeBlocksOperation.Index">
            <summary>
            Position of the first node that was merged, relative to the merged block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMergeBlocksOperation.Update(EaslyController.Writeable.IWriteableBlockState,System.Int32)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">The merged block state.</param>
            <param name="index">Position of the first node that was merged, relative to the merged block.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMergeBlocksOperation.ToSplitBlockOperation">
            <summary>
            Creates an operation to undo the merge blocks operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMergeBlocksOperation.CreateSplitBlockOperation(System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveBlockOperation.ParentNode">
            <summary>
            Node where the block is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveBlockOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableMoveBlockOperation.ParentNode"/> where the block is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveBlockOperation.BlockIndex">
            <summary>
            Index of the moved block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveBlockOperation.Direction">
            <summary>
            The change in position, relative to the current position.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableMoveBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">The moved block state.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableMoveBlockOperation.ToInverseMoveBlock">
            <summary>
            Creates an operation to undo the move block operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableMoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is moved.</param>
            <param name="blockIndex">Index of the moved block.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveBlockOperation.ParentNode">
            <summary>
            Node where the block is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveBlockOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableMoveBlockOperation.ParentNode"/> where the block is moved.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveBlockOperation.BlockIndex">
            <summary>
            Index of the moved block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveBlockOperation.Direction">
            <summary>
            The change in position, relative to the current position.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">The moved block state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveBlockOperation.ToInverseMoveBlock">
            <summary>
            Creates an operation to undo the move block operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableMoveBlockOperation.CreateMoveBlockOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableGenericRefreshOperation">
            <summary>
            Operation details for refreshing views.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableGenericRefreshOperation">
            <summary>
            Operation details for refreshing views.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableGenericRefreshOperation.#ctor(EaslyController.Writeable.IWriteableNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableGenericRefreshOperation"/> class.
            </summary>
            <param name="refreshState">State in the source where to start refresh.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOperationGroup.Redo">
            <summary>
            Execute all operations in the group.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOperationGroup.Undo">
            <summary>
            Undo all operations in the group.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOperationGroup.#ctor(EaslyController.Writeable.IWriteableOperationReadOnlyList,EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableOperationGroup"/> class.
            </summary>
            <param name="operationList">List of operations belonging to this group.</param>
            <param name="refresh">Optional refresh operation to execute at the end of undo and redo.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOperationGroup.Redo">
            <summary>
            Execute all operations in the group.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOperationGroup.Undo">
            <summary>
            Undo all operations in the group.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableRemoveBlockViewOperation">
            <summary>
            Operation details for updating a view after block has been removed from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockViewOperation.ParentNode">
            <summary>
            Node where the block removal is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockViewOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.IWriteableRemoveBlockViewOperation.ParentNode"/> where a block is removed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockViewOperation.BlockIndex">
            <summary>
            Index of the removed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableRemoveBlockViewOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state removed.</param>
        </member>
        <member name="T:EaslyController.Writeable.WriteableRemoveBlockViewOperation">
            <summary>
            Operation details for updating a view after block has been removed from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveBlockViewOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableRemoveBlockViewOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockViewOperation.ParentNode">
            <summary>
            Node where the block removal is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockViewOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.WriteableRemoveBlockViewOperation.ParentNode"/> where a block is removed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockViewOperation.BlockIndex">
            <summary>
            Index of the removed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveBlockViewOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state removed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSplitBlockOperation.ParentNode">
            <summary>
            Node where the block is split.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSplitBlockOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableSplitBlockOperation.ParentNode"/> where the block is split.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSplitBlockOperation.BlockIndex">
            <summary>
            Position of the split block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSplitBlockOperation.Index">
            <summary>
            Position of the last node to stay in the old block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSplitBlockOperation.NewBlock">
            <summary>
            The inserted block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableSplitBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableSplitBlockOperation.ToMergeBlocksOperation">
            <summary>
            Creates an operation to undo the split block operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSplitBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableSplitBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is split.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is split.</param>
            <param name="blockIndex">Position of the split block.</param>
            <param name="index">Position of the last node to stay in the old block.</param>
            <param name="newBlock">The inserted block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSplitBlockOperation.ParentNode">
            <summary>
            Node where the block is split.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSplitBlockOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableSplitBlockOperation.ParentNode"/> where the block is split.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSplitBlockOperation.BlockIndex">
            <summary>
            Position of the split block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSplitBlockOperation.Index">
            <summary>
            Position of the last node to stay in the old block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSplitBlockOperation.NewBlock">
            <summary>
            The inserted block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSplitBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSplitBlockOperation.ToMergeBlocksOperation">
            <summary>
            Creates an operation to undo the split block operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSplitBlockOperation.CreateMergeBlocksOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.ParentNode">
            <summary>
            Node where the replacement is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableReplaceOperation.ParentNode"/> where the node is replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.BlockIndex">
            <summary>
            Block position where the node is replaced, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.Index">
            <summary>
            Position where the node is replaced, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.NewNode">
            <summary>
            The new node. Null to clear an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.OldNode">
            <summary>
            The old node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableReplaceOperation.Update(EaslyController.Writeable.IWriteableBrowsingChildIndex,EaslyController.Writeable.IWriteableBrowsingChildIndex,BaseNode.INode,EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="oldBrowsingIndex">Index of the state before it's replaced.</param>
            <param name="newBrowsingIndex">Index of the state after it's replaced.</param>
            <param name="oldNode">The old node. Can be null if optional and replaced.</param>
            <param name="newChildState">The new state.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableReplaceOperation.ToInverseReplace">
            <summary>
            Creates an operation to undo the replace operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableReplaceOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableReplaceOperation"/> class.
            </summary>
            <param name="parentNode">Node where the replacement is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is replaced.</param>
            <param name="blockIndex">Block position where the node is replaced, if applicable.</param>
            <param name="index">Position where the node is replaced, if applicable.</param>
            <param name="newNode">The new node. Null to clear an optional node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.ParentNode">
            <summary>
            Node where the replacement is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableReplaceOperation.ParentNode"/> where the node is replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.BlockIndex">
            <summary>
            Block position where the node is replaced, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.Index">
            <summary>
            Position where the node is replaced, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.NewNode">
            <summary>
            The new node. Null to clear an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.OldNode">
            <summary>
            The old node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableReplaceOperation.Update(EaslyController.Writeable.IWriteableBrowsingChildIndex,EaslyController.Writeable.IWriteableBrowsingChildIndex,BaseNode.INode,EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="oldBrowsingIndex">Index of the state before it's replaced.</param>
            <param name="newBrowsingIndex">Index of the state after it's replaced.</param>
            <param name="oldNode">The old node. Can be null if optional and replaced.</param>
            <param name="newChildState">The new state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableReplaceOperation.ToInverseReplace">
            <summary>
            Creates an operation to undo the replace operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableReplaceOperation.CreateReplaceOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.ParentNode">
            <summary>
            Node where the removal is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.ParentNode"/> where a node is removed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.BlockIndex">
            <summary>
            Block position where the node is removed, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.Index">
            <summary>
            Position of the removed node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveNodeOperation.RemovedNode">
            <summary>
            The removed node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableRemoveNodeOperation.Update(EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="childState">State removed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableRemoveNodeOperation.ToInsertNodeOperation">
            <summary>
            Creates an operation to undo the remove operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableRemoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the removal is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is removed.</param>
            <param name="blockIndex">Block position where the node is removed, if applicable.</param>
            <param name="index">Position of the removed node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveNodeOperation.ParentNode">
            <summary>
            Node where the removal is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveNodeOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableRemoveNodeOperation.ParentNode"/> where a node is removed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveNodeOperation.BlockIndex">
            <summary>
            Block position where the node is removed, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveNodeOperation.Index">
            <summary>
            Position of the removed node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveNodeOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveNodeOperation.RemovedNode">
            <summary>
            The removed node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveNodeOperation.Update(EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="childState">State removed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveNodeOperation.ToInsertNodeOperation">
            <summary>
            Creates an operation to undo the remove operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveNodeOperation.CreateInsertNodeOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableRemoveOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.ParentNode">
            <summary>
            Node where the block removal is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.ParentNode"/> where a block is removed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.BlockIndex">
            <summary>
            Index of the removed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.Block">
            <summary>
            The removed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableRemoveBlockOperation.Node">
            <summary>
            The removed node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableRemoveBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState,EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state removed.</param>
            <param name="removedState">The state removed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableRemoveBlockOperation.ToInsertBlockOperation">
            <summary>
            Creates an operation to undo the remove block operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableRemoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.ParentNode">
            <summary>
            Node where the block removal is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.WriteableRemoveBlockOperation.ParentNode"/> where a block is removed.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.BlockIndex">
            <summary>
            Index of the removed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.Block">
            <summary>
            The removed block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableRemoveBlockOperation.Node">
            <summary>
            The removed node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveBlockOperation.Update(EaslyController.Writeable.IWriteableBlockState,EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="blockState">Block state removed.</param>
            <param name="removedState">The state removed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveBlockOperation.ToInsertBlockOperation">
            <summary>
            Creates an operation to undo the remove block operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRemoveBlockOperation.CreateInsertBlockOperation(System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.ParentNode">
            <summary>
            Node where the insertion is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.IWriteableInsertNodeOperation.ParentNode"/> where a node is inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.BlockIndex">
            <summary>
            Block position where the node is inserted, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.Index">
            <summary>
            Position where the node is inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.Node">
            <summary>
            The inserted node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInsertNodeOperation.Update(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="browsingIndex">Index of the state after it's inserted.</param>
            <param name="childState">State inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInsertNodeOperation.ToRemoveNodeOperation">
            <summary>
            Creates an operation to undo the insert operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the insertion is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is inserted.</param>
            <param name="blockIndex">Block position where the node is inserted, if applicable.</param>
            <param name="index">Position where the node is inserted.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.ParentNode">
            <summary>
            Node where the insertion is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.PropertyName">
            <summary>
            Property of <see cref="P:EaslyController.Writeable.WriteableInsertNodeOperation.ParentNode"/> where a node is inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.BlockIndex">
            <summary>
            Block position where the node is inserted, if applicable.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.Index">
            <summary>
            Position where the node is inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.Node">
            <summary>
            The inserted node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertNodeOperation.Update(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="browsingIndex">Index of the state after it's inserted.</param>
            <param name="childState">State inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertNodeOperation.ToRemoveNodeOperation">
            <summary>
            Creates an operation to undo the insert operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertNodeOperation.CreateRemoveNodeOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableExpandArgumentOperation.#ctor(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableExpandArgumentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted item.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.ParentNode">
            <summary>
            Node where the block insertion is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.IWriteableInsertBlockOperation.ParentNode"/> where a block is inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.BlockIndex">
            <summary>
            Index of the inserted block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.Block">
            <summary>
            The inserted block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.Node">
            <summary>
            The inserted node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInsertBlockOperation.Update(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex,EaslyController.Writeable.IWriteableBlockState,EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="browsingIndex">Index of the state after it's inserted.</param>
            <param name="blockState">Block state inserted.</param>
            <param name="childState">State inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInsertBlockOperation.ToRemoveBlockOperation">
            <summary>
            Creates an operation to undo the insert block operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="blockIndex">Index of the inserted block.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.ParentNode">
            <summary>
            Node where the block insertion is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.PropertyName">
            <summary>
            Block list property of <see cref="P:EaslyController.Writeable.WriteableInsertBlockOperation.ParentNode"/> where a block is inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.BlockIndex">
            <summary>
            Index of the inserted block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.Block">
            <summary>
            The inserted block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.Node">
            <summary>
            The inserted node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertBlockOperation.Update(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex,EaslyController.Writeable.IWriteableBlockState,EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="browsingIndex">Index of the state after it's inserted.</param>
            <param name="blockState">Block state inserted.</param>
            <param name="childState">State inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertBlockOperation.ToRemoveBlockOperation">
            <summary>
            Creates an operation to undo the insert block operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertBlockOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOperation.HandlerRedo">
            <summary>
            Handler to execute to redo the operation.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOperation.HandlerUndo">
            <summary>
            Handler to execute to undo the operation.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOperation.IsNested">
            <summary>
            True if the operation is nested within another more general one.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOperation.Redo">
            <summary>
            Execute the operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOperation.Undo">
            <summary>
            Undo the operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOperation.HandlerRedo">
            <summary>
            Handler to execute to redo the operation.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOperation.HandlerUndo">
            <summary>
            Handler to execute to undo the operation.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOperation.IsNested">
            <summary>
            True if the operation is nested within another more general one.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOperation.Redo">
            <summary>
            Execute the operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOperation.Undo">
            <summary>
            Undo the operation.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableController">
            <summary>
            Controller for a node tree.
            This controller supports operations to modify the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.RedoIndex">
            <summary>
            Index of the next operation that can be redone in <see cref="P:EaslyController.Writeable.IWriteableController.OperationStack"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.CanUndo">
            <summary>
            Checks if there is an operation that can be undone.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableController.CanRedo">
            <summary>
            Checks if there is an operation that can be redone.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlockStateInserted">
            <summary>
            Called when a block state is inserted.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlockStateRemoved">
            <summary>
            Called when a block state is removed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlockViewRemoved">
            <summary>
            Called when a block view must be removed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.StateInserted">
            <summary>
            Called when a state is inserted.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.StateRemoved">
            <summary>
            Called when a state is removed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.StateReplaced">
            <summary>
            Called when a state is replaced.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.StateAssigned">
            <summary>
            Called when a state is assigned.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.StateUnassigned">
            <summary>
            Called when a state is unassigned.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.DiscreteValueChanged">
            <summary>
            Called when a discrete value is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.TextChanged">
            <summary>
            Called when text is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.CommentChanged">
            <summary>
            Called when comment is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlockStateChanged">
            <summary>
            Called when a block state is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.StateMoved">
            <summary>
            Called when a state is moved.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlockStateMoved">
            <summary>
            Called when a block state is moved.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlockSplit">
            <summary>
            Called when a block is split.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.BlocksMerged">
            <summary>
            Called when two blocks are merged.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.IWriteableController.GenericRefresh">
            <summary>
            Called to refresh views.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Insert(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex@)">
            <summary>
            Inserts a new node in a list or block list.
            </summary>
            <param name="inner">The inner for the list or block list where the node is inserted.</param>
            <param name="insertedIndex">Index for the insertion operation.</param>
            <param name="nodeIndex">Index of the inserted node upon return.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.InsertBlockRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionBlockNodeIndex})">
            <summary>
            Inserts a range of blocks in a block list.
            </summary>
            <param name="inner">The inner for the block list in which blocks are inserted.</param>
            <param name="insertedIndex">Index where to insert the first block.</param>
            <param name="indexList">List of nodes in blocks to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.InsertNodeRange(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary>
            Inserts a range of nodes in a list or block list.
            </summary>
            <param name="inner">The inner for the list or block list in which nodes are inserted.</param>
            <param name="blockIndex">Index of the block where to insert nodes, for a block list. -1 for a list.</param>
            <param name="insertedIndex">Index of the first node to insert.</param>
            <param name="indexList">List of nodes to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsRemoveable(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex)">
            <summary>
            Checks whether a node can be removed from a list.
            </summary>
            <param name="inner">The inner where the node is.</param>
            <param name="nodeIndex">Index of the node that would be removed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Remove(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex)">
            <summary>
            Removes a node from a list or block list.
            </summary>
            <param name="inner">The inner for the list or block list from which the node is removed.</param>
            <param name="nodeIndex">Index for the removed node.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Replace(EaslyController.Writeable.IWriteableInner,EaslyController.Writeable.IWriteableInsertionChildIndex,EaslyController.Writeable.IWriteableBrowsingChildIndex@)">
            <summary>
            Replace an existing node with a new one.
            </summary>
            <param name="inner">The inner where the node is replaced.</param>
            <param name="replaceIndex">Index for the replace operation.</param>
            <param name="nodeIndex">Index of the replacing node upon return.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsBlockRangeRemoveable(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Checks whether a range of blocks can be removed from a block list.
            </summary>
            <param name="inner">The inner with blocks to remove.</param>
            <param name="firstBlockIndex">Index of the first block to remove.</param>
            <param name="lastBlockIndex">Index following the last block to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.RemoveBlockRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Removes a range of blocks from a block list.
            </summary>
            <param name="inner">The inner for the block list from which blocks are removed.</param>
            <param name="firstBlockIndex">Index of the first block to remove.</param>
            <param name="lastBlockIndex">Index following the last block to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.ReplaceBlockRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionBlockNodeIndex})">
            <summary>
            Removes a range of blocks from a block list and replace them with other blocks.
            </summary>
            <param name="inner">The inner for the block list from which blocks are replaced.</param>
            <param name="firstBlockIndex">Index of the first block to remove.</param>
            <param name="lastBlockIndex">Index following the last block to remove.</param>
            <param name="indexList">List of nodes in blocks to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsNodeRangeRemoveable(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether a range of nodes can be removed from a list or block list.
            </summary>
            <param name="inner">The inner with nodes to remove.</param>
            <param name="blockIndex">Index of the block where to remove nodes, for a block list. -1 for a list.</param>
            <param name="firstNodeIndex">Index of the first node to remove.</param>
            <param name="lastNodeIndex">Index following the last node to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.RemoveNodeRange(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a range of nodes from a list or block list.
            </summary>
            <param name="inner">The inner with nodes to remove.</param>
            <param name="blockIndex">Index of the block where to remove nodes, for a block list. -1 for a list.</param>
            <param name="firstNodeIndex">Index of the first node to remove.</param>
            <param name="lastNodeIndex">Index following the last node to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.ReplaceNodeRange(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary>
            Removes a range of nodes from a list or block list and replace them with other nodes.
            </summary>
            <param name="inner">The inner for the list or block list from which nodes are replaced.</param>
            <param name="blockIndex">Index of the block where to remove nodes, for a block list. -1 for a list.</param>
            <param name="firstNodeIndex">Index of the first node to remove.</param>
            <param name="lastNodeIndex">Index following the last node to remove.</param>
            <param name="indexList">List of nodes to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Assign(EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex,System.Boolean@)">
            <summary>
            Assign the optional node.
            </summary>
            <param name="nodeIndex">Index of the optional node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already assigned.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Unassign(EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex,System.Boolean@)">
            <summary>
            Unassign the optional node.
            </summary>
            <param name="nodeIndex">Index of the optional node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already not assigned.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.ChangeReplication(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,BaseNode.ReplicationStatus)">
            <summary>
            Changes the replication state of a block.
            </summary>
            <param name="inner">The inner where the blok is changed.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="replication">New replication value.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.ChangeDiscreteValue(EaslyController.Writeable.IWriteableIndex,System.String,System.Int32)">
            <summary>
            Changes the value of an enum or boolean.
            If the value exceeds allowed values, it is rounded to fit.
            </summary>
            <param name="nodeIndex">Index of the state with the enum to change.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.ChangeText(EaslyController.Writeable.IWriteableIndex,System.String,System.String)">
            <summary>
            Changes the value of a text.
            </summary>
            <param name="nodeIndex">Index of the state with the string to change.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.ChangeComment(EaslyController.Writeable.IWriteableIndex,System.String)">
            <summary>
            Changes the value of a comment.
            </summary>
            <param name="nodeIndex">Index of the state with the comment to change.</param>
            <param name="text">The new text.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsSplittable(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be split at the given index.
            </summary>
            <param name="inner">The inner where the block would be split.</param>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.SplitBlock(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Splits a block in two at the given index.
            </summary>
            <param name="inner">The inner where the block is split.</param>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsMergeable(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be merged at the given index.
            </summary>
            <param name="inner">The inner where the block would be split.</param>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.MergeBlocks(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Merges two blocks at the given index.
            </summary>
            <param name="inner">The inner where blocks are merged.</param>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsMoveable(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a list.
            </summary>
            <param name="inner">The inner where the node is.</param>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Move(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="inner">The inner for the list or block list in which the node is moved.</param>
            <param name="nodeIndex">Index for the moved node.</param>
            <param name="direction">The change in position, relative to the current position.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.IsBlockMoveable(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Checks whether a block can be moved in a block list.
            </summary>
            <param name="inner">The inner where the block is.</param>
            <param name="blockIndex">Index of the block that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.MoveBlock(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Moves a block around in a block list.
            </summary>
            <param name="inner">The inner where the block is moved.</param>
            <param name="blockIndex">Index of the block to move.</param>
            <param name="direction">The change in position, relative to the current block position.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Expand(EaslyController.Writeable.IWriteableNodeIndex,System.Boolean@)">
            <summary>
            Expands an existing node. In the node:
            * All optional children are assigned if they aren't
            * If the node is a feature call, with no arguments, an empty argument is inserted.
            </summary>
            <param name="expandedIndex">Index of the expanded node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already expanded.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Reduce(EaslyController.Writeable.IWriteableNodeIndex,System.Boolean@)">
            <summary>
            Reduces an existing node. Opposite of <see cref="M:EaslyController.Writeable.IWriteableController.Expand(EaslyController.Writeable.IWriteableNodeIndex,System.Boolean@)"/>.
            </summary>
            <param name="reducedIndex">Index of the reduced node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already reduced.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Canonicalize(System.Boolean@)">
            <summary>
            Reduces all expanded nodes, and clear all unassigned optional nodes.
            </summary>
            <param name="isChanged">True upon return if the node was changed. False if the node was already canonic.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Undo">
            <summary>
            Undo the last operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.Redo">
            <summary>
            Redo the last operation undone.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableController.SplitIdentifier(EaslyController.Writeable.IWriteableListInner,EaslyController.Writeable.IWriteableInsertionListNodeIndex,EaslyController.Writeable.IWriteableInsertionListNodeIndex,EaslyController.Writeable.IWriteableBrowsingListNodeIndex@,EaslyController.Writeable.IWriteableBrowsingListNodeIndex@)">
            <summary>
            Split an identifier with replace and insert indexes.
            </summary>
            <param name="inner">The inner where the node is replaced.</param>
            <param name="replaceIndex">Index for the replace operation.</param>
            <param name="insertIndex">Index for the insert operation.</param>
            <param name="firstIndex">Index of the replacing node upon return.</param>
            <param name="secondIndex">Index of the inserted node upon return.</param>
        </member>
        <member name="T:EaslyController.Writeable.WriteableController">
            <summary>
            Controller for a node tree.
            This controller supports operations to modify the tree.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Create(EaslyController.Writeable.IWriteableRootNodeIndex)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Writeable.WriteableController"/> object.
            </summary>
            <param name="nodeIndex">Index of the root of the node tree.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableController"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.RedoIndex">
            <summary>
            Index of the next operation that can be redone in <see cref="P:EaslyController.Writeable.WriteableController.OperationStack"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.CanUndo">
            <summary>
            Checks if there is an operation that can be undone.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableController.CanRedo">
            <summary>
            Checks if there is an operation that can be redone.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlockStateInserted">
            <summary>
            Called when a block state is inserted.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlockStateRemoved">
            <summary>
            Called when a block state is removed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlockViewRemoved">
            <summary>
            Called when a block view must be removed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.StateInserted">
            <summary>
            Called when a state is inserted.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.StateRemoved">
            <summary>
            Called when a state is removed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.StateReplaced">
            <summary>
            Called when a state is replaced.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.StateAssigned">
            <summary>
            Called when a state is assigned.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.StateUnassigned">
            <summary>
            Called when a state is unassigned.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.DiscreteValueChanged">
            <summary>
            Called when a discrete value is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.TextChanged">
            <summary>
            Called when text is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.CommentChanged">
            <summary>
            Called when a comment is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlockStateChanged">
            <summary>
            Called when a block state is changed.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.StateMoved">
            <summary>
            Called when a state is moved.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlockStateMoved">
            <summary>
            Called when a block state is moved.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlockSplit">
            <summary>
            Called when a block is split.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.BlocksMerged">
            <summary>
            Called when two blocks are merged.
            </summary>
        </member>
        <member name="E:EaslyController.Writeable.WriteableController.GenericRefresh">
            <summary>
            Called to refresh views.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Insert(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex@)">
            <summary>
            Inserts a new node in a list or block list.
            </summary>
            <param name="inner">The inner for the list or block list where the node is inserted.</param>
            <param name="insertedIndex">Index for the insertion operation.</param>
            <param name="nodeIndex">Index of the inserted node upon return.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.InsertBlockRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionBlockNodeIndex})">
            <summary>
            Inserts a range of blocks in a block list.
            </summary>
            <param name="inner">The inner for the block list in which blocks are inserted.</param>
            <param name="insertedIndex">Index where to insert the first block.</param>
            <param name="indexList">List of nodes in blocks to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.InsertNodeRange(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary>
            Inserts a range of nodes in a list or block list.
            </summary>
            <param name="inner">The inner for the list or block list in which nodes are inserted.</param>
            <param name="blockIndex">Index of the block where to insert nodes, for a block list. -1 for a list.</param>
            <param name="insertedIndex">Index of the first node to insert.</param>
            <param name="indexList">List of nodes to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.InsertNodeRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.InsertNodeRange(EaslyController.Writeable.IWriteableListInner,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsRemoveable(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex)">
            <summary>
            Checks whether a node can be removed from a list.
            </summary>
            <param name="inner">The inner where the node is.</param>
            <param name="nodeIndex">Index of the node that would be removed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Remove(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex)">
            <summary>
            Removes a node from a list or block list.
            </summary>
            <param name="inner">The inner for the list or block list from which the node is removed.</param>
            <param name="nodeIndex">Index for the removed node.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Replace(EaslyController.Writeable.IWriteableInner,EaslyController.Writeable.IWriteableInsertionChildIndex,EaslyController.Writeable.IWriteableBrowsingChildIndex@)">
            <summary>
            Replace an existing node with a new one.
            </summary>
            <param name="inner">The inner where the node is replaced.</param>
            <param name="replaceIndex">Index for the replace operation.</param>
            <param name="nodeIndex">Index of the replacing node upon return.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsBlockRangeRemoveable(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Checks whether a range of blocks can be removed from a block list.
            </summary>
            <param name="inner">The inner with blocks to remove.</param>
            <param name="firstBlockIndex">Index of the first block to remove.</param>
            <param name="lastBlockIndex">Index following the last block to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.RemoveBlockRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Removes a range of blocks from a block list.
            </summary>
            <param name="inner">The inner for the block list from which blocks are removed.</param>
            <param name="firstBlockIndex">Index of the first block to remove.</param>
            <param name="lastBlockIndex">Index following the last block to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ReplaceBlockRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionBlockNodeIndex})">
            <summary>
            Removes a range of blocks from a block list and replace them with other blocks.
            </summary>
            <param name="inner">The inner for the block list from which blocks are replaced.</param>
            <param name="firstBlockIndex">Index of the first block to remove.</param>
            <param name="lastBlockIndex">Index following the last block to remove.</param>
            <param name="indexList">List of nodes in blocks to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsNodeRangeRemoveable(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether a range of nodes can be removed from a list or block list.
            </summary>
            <param name="inner">The inner with nodes to remove.</param>
            <param name="blockIndex">Index of the block where to remove nodes, for a block list. -1 for a list.</param>
            <param name="firstNodeIndex">Index of the first node to remove.</param>
            <param name="lastNodeIndex">Index following the last node to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.RemoveNodeRange(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes a range of nodes from a list or block list.
            </summary>
            <param name="inner">The inner with nodes to remove.</param>
            <param name="blockIndex">Index of the block where to remove nodes, for a block list. -1 for a list.</param>
            <param name="firstNodeIndex">Index of the first node to remove.</param>
            <param name="lastNodeIndex">Index following the last node to remove.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.RemoveNodeRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.RemoveNodeRange(EaslyController.Writeable.IWriteableListInner,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ReplaceNodeRange(EaslyController.Writeable.IWriteableCollectionInner,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary>
            Removes a range of nodes from a list or block list and replace them with other nodes.
            </summary>
            <param name="inner">The inner for the list or block list from which nodes are replaced.</param>
            <param name="blockIndex">Index of the block where to remove nodes, for a block list. -1 for a list.</param>
            <param name="firstNodeIndex">Index of the first node to remove.</param>
            <param name="lastNodeIndex">Index following the last node to remove.</param>
            <param name="indexList">List of nodes to insert.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ReplaceNodeRange(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ReplaceNodeRange(EaslyController.Writeable.IWriteableListInner,System.Int32,System.Int32,System.Collections.Generic.IList{EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex})">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Assign(EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex,System.Boolean@)">
            <summary>
            Assign the optional node.
            </summary>
            <param name="nodeIndex">Index of the optional node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already assigned.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Unassign(EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex,System.Boolean@)">
            <summary>
            Unassign the optional node.
            </summary>
            <param name="nodeIndex">Index of the optional node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already not assigned.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ChangeReplication(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,BaseNode.ReplicationStatus)">
            <summary>
            Changes the replication state of a block.
            </summary>
            <param name="inner">The inner where the blok is changed.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="replication">New replication value.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ChangeDiscreteValue(EaslyController.Writeable.IWriteableIndex,System.String,System.Int32)">
            <summary>
            Changes the value of an enum or boolean.
            If the value exceeds allowed values, it is rounded to fit.
            </summary>
            <param name="nodeIndex">Index of the state with the enum to change.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ChangeText(EaslyController.Writeable.IWriteableIndex,System.String,System.String)">
            <summary>
            Changes the value of a text.
            </summary>
            <param name="nodeIndex">Index of the state with the string to change.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ChangeComment(EaslyController.Writeable.IWriteableIndex,System.String)">
            <summary>
            Changes the value of a text.
            </summary>
            <param name="nodeIndex">Index of the state with the comment to change.</param>
            <param name="text">The new comment.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsSplittable(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be split at the given index.
            </summary>
            <param name="inner">The inner where the block would be split.</param>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.SplitBlock(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Splits a block in two at the given index.
            </summary>
            <param name="inner">The inner where the block is split.</param>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsMergeable(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be merged at the given index.
            </summary>
            <param name="inner">The inner where the block would be split.</param>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.MergeBlocks(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Merges two blocks at the given index.
            </summary>
            <param name="inner">The inner where blocks are merged.</param>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsMoveable(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a list.
            </summary>
            <param name="inner">The inner where the node is.</param>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Move(EaslyController.Writeable.IWriteableCollectionInner,EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="inner">The inner for the list or block list in which the node is moved.</param>
            <param name="nodeIndex">Index for the moved node.</param>
            <param name="direction">The change in position, relative to the current position.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.IsBlockMoveable(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Checks whether a block can be moved in a block list.
            </summary>
            <param name="inner">The inner where the block is.</param>
            <param name="blockIndex">Index of the block that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.MoveBlock(EaslyController.Writeable.IWriteableBlockListInner,System.Int32,System.Int32)">
            <summary>
            Moves a block around in a block list.
            </summary>
            <param name="inner">The inner where the block is moved.</param>
            <param name="blockIndex">Index of the block to move.</param>
            <param name="direction">The change in position, relative to the current block position.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Expand(EaslyController.Writeable.IWriteableNodeIndex,System.Boolean@)">
            <summary>
            Expands an existing node. In the node:
            * All optional children are assigned if they aren't
            * If the node is a feature call, with no arguments, an empty argument is inserted.
            </summary>
            <param name="expandedIndex">Index of the expanded node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already expanded.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ExpandOptional(EaslyController.Writeable.IWriteableOptionalInner{EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex},EaslyController.Writeable.IWriteableOperationList)">
            <summary>
            Expands the optional node.
            * If assigned, does nothing.
            * If it has an item, assign it.
            * Otherwise, assign the item to a default node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ExpandBlockList(EaslyController.Writeable.IWriteableBlockListInner{EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex},EaslyController.Writeable.IWriteableOperationList)">
            <summary>
            Expands the block list.
            * Only expand block list of arguments
            * Only expand if the list is empty. In that case, add a single default argument.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Reduce(EaslyController.Writeable.IWriteableNodeIndex,System.Boolean@)">
            <summary>
            Reduces an existing node. Opposite of Expand.
            </summary>
            <param name="reducedIndex">Index of the reduced node.</param>
            <param name="isChanged">True upon return if the node was changed. False if the node was already reduced.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ReduceOptional(EaslyController.Writeable.IWriteableOptionalInner{EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex},EaslyController.Writeable.IWriteableOperationList,System.Boolean)">
            <summary>
            Reduces the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.ReduceBlockList(EaslyController.Writeable.IWriteableBlockListInner{EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex},EaslyController.Writeable.IWriteableOperationList,System.Boolean)">
            <summary>
            Reduces the block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Canonicalize(System.Boolean@)">
            <summary>
            Reduces all expanded nodes, and clear all unassigned optional nodes.
            </summary>
            <param name="isChanged">True upon return if the node was changed. False if the node was already canonic.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Undo">
            <summary>
            Undo the last operation.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.Redo">
            <summary>
            Redo the last operation undone.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.SplitIdentifier(EaslyController.Writeable.IWriteableListInner,EaslyController.Writeable.IWriteableInsertionListNodeIndex,EaslyController.Writeable.IWriteableInsertionListNodeIndex,EaslyController.Writeable.IWriteableBrowsingListNodeIndex@,EaslyController.Writeable.IWriteableBrowsingListNodeIndex@)">
            <summary>
            Split an identifier with replace and insert indexes.
            </summary>
            <param name="inner">The inner where the node is replaced.</param>
            <param name="replaceIndex">Index for the replace operation.</param>
            <param name="insertIndex">Index for the insert operation.</param>
            <param name="firstIndex">Index of the replacing node upon return.</param>
            <param name="secondIndex">Index of the inserted node upon return.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateChildStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateBrowseContext(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxxBrowseContext object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreatePlaceholderInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex})">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateOptionalInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex})">
            <summary>
            Creates a IxxxOptionalInner{IxxxBrowsingOptionalNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex})">
            <summary>
            Creates a IxxxListInner{IxxxBrowsingListNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateBlockListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex})">
            <summary>
            Creates a IxxxBlockListInner{IxxxBrowsingBlockNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateRootNodeState(EaslyController.ReadOnly.IReadOnlyRootNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateNewOptionalNodeIndex(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxWriteableInsertionOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateInsertNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateInsertBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateRemoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateRemoveBlockViewOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockViewOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateRemoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateReplaceOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateAssignmentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateChangeDiscreteValueOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateChangeTextOperation(BaseNode.INode,System.String,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateChangeCommentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateChangeBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateSplitBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateMergeBlocksOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateMoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateMoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateExpandArgumentOperation(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxExpandArgumentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateGenericRefreshOperation(EaslyController.Writeable.IWriteableNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxGenericRefreshOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateOperationGroupStack">
            <summary>
            Creates a IxxxOperationGroupList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateOperationList">
            <summary>
            Creates a IxxxOperationList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableController.CreateOperationGroup(EaslyController.Writeable.IWriteableOperationReadOnlyList,EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Creates a IxxxOperationGroup object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingBlockNodeIndex.#ctor(BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingBlockNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingCollectionNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingCollectionNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex.MoveUp">
            <summary>
            Modifies the index to address the next position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex.MoveDown">
            <summary>
            Modifies the index to address the previous position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex.MoveBlockUp">
            <summary>
            Modifies the index to address the next position in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex.MoveBlockDown">
            <summary>
            Modifies the index to address the previous position in a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">Indexed node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.MoveUp">
            <summary>
            Modifies the index to address the next position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.MoveDown">
            <summary>
            Modifies the index to address the previous position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.MoveBlockUp">
            <summary>
            Modifies the index to address the next position in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.MoveBlockDown">
            <summary>
            Modifies the index to address the previous position in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.ToInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates an insertion index from this instance, that can be used to replace it.
            </summary>
            <param name="parentNode">The parent node where the index would be used to replace a node.</param>
            <param name="node">The node inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingExistingBlockNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingListNodeIndex.MoveUp">
            <summary>
            Modifies the index to address the next position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingListNodeIndex.MoveDown">
            <summary>
            Modifies the index to address the previous position in a list.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingListNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="node">Indexed node in the list</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="index">Position of the node in the list.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingListNodeIndex.MoveUp">
            <summary>
            Modifies the index to address the next position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingListNodeIndex.MoveDown">
            <summary>
            Modifies the index to address the previous position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingListNodeIndex.ToInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates an insertion index from this instance, that can be used to replace it.
            </summary>
            <param name="parentNode">The parent node where the index would be used to replace a node.</param>
            <param name="node">The node inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingListNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingNewBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingNewBlockNodeIndex.CreateExistingBlockIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingInsertableIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBrowsingInsertableIndex.ToInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates an insertion index from this instance, that can be used to replace it.
            </summary>
            <param name="parentNode">The parent node where the index would be used to replace a node.</param>
            <param name="node">The node inserted.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingChildIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndexCollection">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableIndexCollection`1.#ctor(System.String,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableIndexCollection`1"/> class.
            </summary>
            <param name="propertyName">Property indexed for all nodes in the collection.</param>
            <param name="nodeIndexList">Collection of node indexes.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex.ToInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates an insertion index from this instance, that can be used to replace it.
            </summary>
            <param name="parentNode">The parent node where the index would be used to replace a node.</param>
            <param name="node">The node inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex.CreateInsertionOptionalNodeIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingOptionalNodeIndex.CreateInsertionOptionalClearIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionOptionalClearIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingPatternIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingPatternIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed replication pattern node.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingPatternIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingPlaceholderNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed node.</param>
            <param name="node">The indexed node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingPlaceholderNodeIndex.ToInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates an insertion index from this instance, that can be used to replace it.
            </summary>
            <param name="parentNode">The parent node where the index would be used to replace a node.</param>
            <param name="node">The node inserted.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingPlaceholderNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingSourceIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBrowsingSourceIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed source identifier node.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBrowsingSourceIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.ParentNode">
            <summary>
            Node in which the insertion operation is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.Node"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.Node">
            <summary>
            Node inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionCollectionNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionExistingBlockNodeIndex.BlockIndex">
            <summary>
            Position of the block in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionExistingBlockNodeIndex.Index">
            <summary>
            Position where the node is inserted in the block.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list..</param>
            <param name="node">Inserted node.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the block.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex.BlockIndex">
            <summary>
            Position of the block in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex.Index">
            <summary>
            Position where the node is inserted in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionExistingBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionListNodeIndex.Index">
            <summary>
            Position where to insert in the list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInsertionListNodeIndex.MoveUp">
            <summary>
            Modifies the index to address the next position in a list.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionListNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="node">Inserted node.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the list.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionListNodeIndex.Index">
            <summary>
            Position where to insert in the list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionListNodeIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionListNodeIndex.MoveUp">
            <summary>
            Modifies the index to address the next position in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionListNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionNewBlockNodeIndex.BlockIndex">
            <summary>
            Position of the inserted block in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionNewBlockNodeIndex.PatternNode">
            <summary>
            Replication pattern in the block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionNewBlockNodeIndex.SourceNode">
            <summary>
            Source identifier in the block.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="patternNode">Replication pattern in the block.</param>
            <param name="sourceNode">Source identifier in the block.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.BlockIndex">
            <summary>
            Position of the inserted block in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.PatternNode">
            <summary>
            Replication pattern in the block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.SourceNode">
            <summary>
            Source identifier in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionNewBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionOptionalClearIndex">
            <summary>
            Index for clearing an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionOptionalClearIndex.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionOptionalClearIndex">
            <summary>
            Index for clearing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionOptionalClearIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.ParentNode">
            <summary>
            Node in which the insertion operation is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.Optional"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalClearIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionChildNodeIndex">
            <summary>
            Index for an inserted child node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionChildIndex">
            <summary>
            Index for an inserted child.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionChildIndex.ParentNode">
            <summary>
            Node in which the insertion operation is taking place.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInsertionChildIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInsertionOptionalNodeIndex.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.ParentNode">
            <summary>
            Node in which the insertion operation is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.Optional"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.Node">
            <summary>
            The assigned node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.Optional">
            <summary>
            Interface to the optional object for the node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionOptionalNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the replaced node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.ParentNode">
            <summary>
            Node in which the insertion operation is taking place.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.PropertyName">
            <summary>
            Property indexed for <see cref="P:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.Node"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.Node">
            <summary>
            The assigned node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.ToBrowsingIndex">
            <summary>
            Creates a browsing index from an insertion index.
            To call after the insertion operation has been completed.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInsertionPlaceholderNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableChildIndex">
            <summary>
            Base interface for any index representing the child node of a parent node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableIndex">
            <summary>
            Base interface for any index.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableNodeIndex">
            <summary>
            Base interface for any index representing a node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRootNodeIndex.#ctor(BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableRootNodeIndex"/> class.
            </summary>
            <param name="node">The indexed root node.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableRootNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.ReadOnly.IReadOnlyIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockListInner">
            <summary>
            Inner for a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockListInner.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.InsertNewBlock(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Inserts a new block with one node in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.RemoveWithBlock(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Removes a node from a block list. This method is allowed to remove the last node of a block.
            </summary>
            <param name="blockOperation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.ChangeReplication(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Changes the replication state of a block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.IsSplittable(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be split at the given index.
            </summary>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.SplitBlock(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Splits a block in two at the given index.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.IsMergeable(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be merged at the given index.
            </summary>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.MergeBlocks(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Merges two blocks at the given index.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner.MoveBlock(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Moves a block around in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockListInner`1">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockListInner`1.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.InsertNewBlock(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Inserts a new block with one node in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.RemoveWithBlock(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Removes a node from a block list. This method is allowed to remove the last node of a block.
            </summary>
            <param name="blockOperation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.ChangeReplication(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Changes the replication state of a block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.IsSplittable(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be split at the given index.
            </summary>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.SplitBlock(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Splits a block in two at the given index.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.IsMergeable(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be merged at the given index.
            </summary>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.MergeBlocks(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Merges two blocks at the given index.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockListInner`1.MoveBlock(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Moves a block around in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBlockListInner`2">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBlockListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockListInner`2.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.Insert(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Inserts a new node in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.InsertNewBlock(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Inserts a new block with one node in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.Remove(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Removes a node from a block list. This method is not allowed to remove the last node of a block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.RemoveWithBlock(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Removes a node from a block list. This method is allowed to remove the last node of a block.
            </summary>
            <param name="blockOperation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.ChangeReplication(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Changes the replication state of a block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.IsSplittable(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be split at the given index.
            </summary>
            <param name="nodeIndex">Index of the last node to stay in the old block.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.SplitBlock(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Splits a block in two at the given index.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.IsMergeable(EaslyController.Writeable.IWriteableBrowsingExistingBlockNodeIndex)">
            <summary>
            Checks whether a block can be merged at the given index.
            </summary>
            <param name="nodeIndex">Index of the first node in the block to merge.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.MergeBlocks(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Merges two blocks at the given index.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.IsMoveable(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a block list.
            </summary>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.Move(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.MoveBlock(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Moves a block around in a block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.CreateBlockStateList">
            <summary>
            Creates a IxxxBlockStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.CreateBlockState(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Creates a IxxxBlockState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.CreateBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockListInner`2.CreateNewBlockNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableCollectionInner">
            <summary>
            Base inner for a list or a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner.Insert(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Inserts a new node in a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner.Remove(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Removes a node from a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner.IsMoveable(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a list or block list.
            </summary>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner.Move(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableCollectionInner`1">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner`1.Insert(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Inserts a new node in a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner`1.Remove(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Removes a node from a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner`1.IsMoveable(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a list or block list.
            </summary>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableCollectionInner`1.Move(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.WriteableCollectionInner`2">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableCollectionInner`2.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableCollectionInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableCollectionInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableCollectionInner`2.Insert(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Inserts a new node in a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableCollectionInner`2.Remove(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Removes a node from a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableCollectionInner`2.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableCollectionInner`2.IsMoveable(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a list or block list.
            </summary>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableCollectionInner`2.Move(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableListInner">
            <summary>
            Inner for a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableListInner.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableListInner`1">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableListInner`1.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableListInner`2">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableListInner`2.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.Insert(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Inserts a new node in a list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.Remove(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Removes a node from a list or block list.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.IsMoveable(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32)">
            <summary>
            Checks whether a node can be moved in a list.
            </summary>
            <param name="nodeIndex">Index of the node that would be moved.</param>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.Move(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Moves a node around in a list or block list. In a block list, the node stays in same block.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.CreateListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInner">
            <summary>
            Interface for all inners.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInner.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInner.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableInner`1.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.WriteableInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInner`1.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableInner`1.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOptionalInner">
            <summary>
            Inner for an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOptionalInner.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOptionalInner.Assign(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Assign the optional node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOptionalInner.Unassign(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Unassign the optional node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOptionalInner`1">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOptionalInner`1.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOptionalInner`1.Assign(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Assign the optional node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableOptionalInner`1.Unassign(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Unassign the optional node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOptionalInner`2">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalInner`2.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableOptionalInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalInner`2.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalInner`2.Assign(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Assign the optional node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalInner`2.Unassign(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Unassign the optional node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxOptionalNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalInner`2.CreateBrowsingNodeIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderInner">
            <summary>
            Inner for a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePlaceholderInner.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderInner`1">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePlaceholderInner`1.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePlaceholderInner`2">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderInner`2.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteablePlaceholderInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderInner`2.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderInner`2.CreateBrowsingNodeIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableSingleInner">
            <summary>
            Base inner for a single node inner.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSingleInner`1.#ctor(EaslyController.Writeable.IWriteableNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableSingleInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSingleInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSingleInner`1.Replace(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Replaces a node.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockStateView.#ctor(EaslyController.Writeable.IWriteableControllerView,EaslyController.Writeable.IWriteableBlockState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBlockStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="blockState">The block state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableBlockStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableNodeStateView.#ctor(EaslyController.Writeable.IWriteableControllerView,EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The node state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeStateView.#ctor(EaslyController.Writeable.IWriteableControllerView,EaslyController.Writeable.IWriteableOptionalNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableOptionalNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The optional node state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableOptionalNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePatternStateView.#ctor(EaslyController.Writeable.IWriteableControllerView,EaslyController.Writeable.IWriteablePatternState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteablePatternStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The pattern state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePatternStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteablePatternStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeStateView.#ctor(EaslyController.Writeable.IWriteableControllerView,EaslyController.Writeable.IWriteablePlaceholderNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteablePlaceholderNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The child node state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteablePlaceholderNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.WriteableSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSourceStateView.#ctor(EaslyController.Writeable.IWriteableControllerView,EaslyController.Writeable.IWriteableSourceState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableSourceStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The source state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSourceStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Writeable.IWriteableSourceStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockState">
            <summary>
            State of a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockState.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockState.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockState.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockState.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockState.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableBlockState.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockState.Insert(EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex,System.Int32,EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Inserts a new node in a block.
            </summary>
            <param name="nodeIndex">Index of the node to insert.</param>
            <param name="index">Position of the inserted node in the block.</param>
            <param name="childState">Node state.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockState.Remove(EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex,System.Int32)">
            <summary>
            Removes a node from a block.
            </summary>
            <param name="nodeIndex">Index of the node to remove.</param>
            <param name="index">Position of the removed node in the block.</param>
        </member>
        <member name="M:EaslyController.Writeable.IWriteableBlockState.Move(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32,System.Int32)">
            <summary>
            Moves a node around in a block.
            </summary>
            <param name="nodeIndex">Index for the moved node.</param>
            <param name="index">Position of the moved node in the block.</param>
            <param name="direction">The change in position, relative to the current position.</param>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.#ctor(EaslyController.Writeable.IWriteableBlockListInner,EaslyController.Writeable.IWriteableBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableBlockState`1"/> class.
            </summary>
            <param name="parentInner">Inner containing the block state.</param>
            <param name="newBlockIndex">Index that was used to create the block state.</param>
            <param name="childBlock">The block.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockState`1.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockState`1.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockState`1.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockState`1.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockState`1.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableBlockState`1.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.Insert(EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex,System.Int32,EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Inserts a new node in a block.
            </summary>
            <param name="nodeIndex">Index of the node to insert.</param>
            <param name="index">Position of the inserted node in the block.</param>
            <param name="childState">Node state.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.Remove(EaslyController.Writeable.IWriteableBrowsingBlockNodeIndex,System.Int32)">
            <summary>
            Removes a node from a block.
            </summary>
            <param name="nodeIndex">Index of the node to remove.</param>
            <param name="index">Position of the removed node in the block.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.Move(EaslyController.Writeable.IWriteableBrowsingCollectionNodeIndex,System.Int32,System.Int32)">
            <summary>
            Moves a node around in a block.
            </summary>
            <param name="nodeIndex">Index for the moved node.</param>
            <param name="index">Position of the moved node in the block.</param>
            <param name="direction">The change in position, relative to the current position.</param>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreatePatternInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreateSourceInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreateExistingPatternIndex">
            <summary>
            Creates a IxxxBrowsingPatternIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreateExistingSourceIndex">
            <summary>
            Creates a IxxxBrowsingSourceIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreatePatternState(EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex)">
            <summary>
            Creates a IxxxPatternState object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableBlockState`1.CreateSourceState(EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex)">
            <summary>
            Creates a IxxxSourceState object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableNodeState.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableNodeState.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableNodeState`1">
            <summary>
            Base interface for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableNodeState`1">
            <summary>
            Base class for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableNodeState`1.#ctor(EaslyController.Writeable.IWriteableIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOptionalNodeState">
            <summary>
            State of an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOptionalNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableOptionalNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.#ctor(EaslyController.Writeable.IWriteableBrowsingOptionalNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableOptionalNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableOptionalNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableOptionalNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePatternState">
            <summary>
            State of an replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePatternState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePatternState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePatternState`1.#ctor(EaslyController.Writeable.IWriteableBlockState,EaslyController.Writeable.IWriteableBrowsingPatternIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteablePatternState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePatternState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePatternState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderNodeState">
            <summary>
            State of an child node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePlaceholderNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteablePlaceholderNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteablePlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteablePlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.#ctor(EaslyController.Writeable.IWriteableNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteablePlaceholderNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteablePlaceholderNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteablePlaceholderNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableSourceState">
            <summary>
            State of a source identifier node.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSourceState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.IWriteableSourceState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Writeable.IWriteableSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Writeable.WriteableSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSourceState`1.#ctor(EaslyController.Writeable.IWriteableBlockState,EaslyController.Writeable.IWriteableBrowsingSourceIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Writeable.WriteableSourceState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Writeable.WriteableSourceState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Writeable.WriteableSourceState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCellViewCollection">
            <summary>
            Base interface for collection of cell views.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellViewCollection.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellViewCollection.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewCollection.Insert(System.Int32,EaslyController.Frame.IFrameCellView)">
            <summary>
            Inserts a new cell view in the collection.
            </summary>
            <param name="index">Index where to insert the cell view.</param>
            <param name="cellView">The cell view to insert.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewCollection.Remove(System.Int32)">
            <summary>
            Removes a cell view from the collection.
            </summary>
            <param name="index">Index where to remove the cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewCollection.Replace(EaslyController.Frame.IFrameCellView,EaslyController.Frame.IFrameCellView)">
            <summary>
            Replaces a cell view with another in the collection.
            </summary>
            <param name="oldCellView">The cell view to replace.</param>
            <param name="newCellView">The new cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewCollection.Replace(System.Int32,EaslyController.Frame.IFrameCellView)">
            <summary>
            Replaces a cell view with another in the collection.
            </summary>
            <param name="index">Index where to replace the cell view.</param>
            <param name="cellView">The new cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves a cell view around in the collection.
            </summary>
            <param name="index">Index of the cell view to move.</param>
            <param name="direction">The change in position, relative to the current position.</param>
        </member>
        <member name="T:EaslyController.Frame.FrameCellViewCollection">
            <summary>
            Base interface for collection of cell views.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameCellViewCollection"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">The frame that was used to create this cell. Can be null.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewCollection.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewCollection.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewCollection.IsAssignedToTable">
            <summary>
            True if the cell is assigned to a property in a cell view table.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewCollection.HasVisibleCellView">
            <summary>
            True if the collection contain at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.AssignToCellViewTable">
            <summary>
            Indicates that the cell view is assigned to a property in a cell view table.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.Insert(System.Int32,EaslyController.Frame.IFrameCellView)">
            <summary>
            Inserts a new cell view in the collection.
            </summary>
            <param name="index">Index where to insert the cell view.</param>
            <param name="cellView">The cell view to insert.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.Remove(System.Int32)">
            <summary>
            Removes a cell view from the collection.
            </summary>
            <param name="index">Index where to remove the cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.Replace(EaslyController.Frame.IFrameCellView,EaslyController.Frame.IFrameCellView)">
            <summary>
            Replaces a cell view with another in the collection.
            </summary>
            <param name="oldCellView">The cell view to replace.</param>
            <param name="newCellView">The new cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.Replace(System.Int32,EaslyController.Frame.IFrameCellView)">
            <summary>
            Replaces a cell view with another in the collection.
            </summary>
            <param name="index">Index where to replace the cell view.</param>
            <param name="cellView">The new cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves a cell view around in the collection.
            </summary>
            <param name="index">Index of the cell view to move.</param>
            <param name="direction">The change in position, relative to the current position.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewCollection.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameColumn">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameColumn">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameColumn.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameColumn"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">The frame that was used to create this cell. Can be null.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameColumn.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameColumn.RecalculateChildLineNumbers(EaslyController.Frame.IFrameCellView,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view from the update in a child cell.
            </summary>
            <param name="cellView">The child cell view.</param>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameColumn.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameColumn.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameLine">
            <summary>
            A collection of cell views organized in a line.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameLine">
            <summary>
            A collection of cell views organized in a line.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameLine.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameLine"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">Frame providing the horizontal separator to insert between cells. Can be null.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameLine.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameLine.RecalculateChildLineNumbers(EaslyController.Frame.IFrameCellView,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view from the update in a child cell.
            </summary>
            <param name="cellView">The child cell view.</param>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameLine.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameLine.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameAssignableCellView">
            <summary>
            Cell view that can be assigned to a property in a state view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameAssignableCellView.IsAssignedToTable">
            <summary>
            True if the cell is assigned to a property in a cell view table.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameAssignableCellView.AssignToCellViewTable">
            <summary>
            Indicates that the cell view is assigned to a property in a cell view table.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCellView">
            <summary>
            Atomic cell view of a component in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellView.HasVisibleCellView">
            <summary>
            True if the cell view is visible or contains at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellView.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Updates line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellView.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellView.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.FrameCellView">
            <summary>
            Atomic cell view of a component in a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellView.HasVisibleCellView">
            <summary>
            True if the cell view is visible or contains at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Updates line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellView.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockCellView">
            <summary>
            A cell view for a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockCellView.BlockStateView">
            <summary>
            The block state view of the state associated to this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBlockCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="blockStateView">The block state view of the state associated to this cell.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockCellView.BlockStateView">
            <summary>
            The block state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockCellView.HasVisibleCellView">
            <summary>
            True if the block cell view contain at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockCellView.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameContainerCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameContainerCellView.ChildStateView">
            <summary>
            The state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameContainerCellView.Frame">
            <summary>
            The frame that was used to create this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameContainerCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameContainerCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view.</param>
            <param name="childStateView">The state view of the state associated to this cell.</param>
            <param name="frame">The frame that was used to create this cell.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameContainerCellView.ChildStateView">
            <summary>
            The state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameContainerCellView.Frame">
            <summary>
            The frame that was used to create this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameContainerCellView.IsAssignedToTable">
            <summary>
            True if the cell is assigned to a property in a cell view table.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameContainerCellView.HasVisibleCellView">
            <summary>
            True if the block view contain at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.AssignToCellViewTable">
            <summary>
            Indicates that the cell view is assigned to a property in a cell view table.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.RecalculateChildLineNumbers(EaslyController.Frame.IFrameNodeStateView,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view from the update in the child state view.
            </summary>
            <param name="nodeStateView">The child state view.</param>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameContainerCellView.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameContentFocusableCellView">
            <summary>
            Cell view for components that can receive the focus and be modified.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameContentFocusableCellView.PropertyName">
            <summary>
            Property corresponding to the component of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameContentFocusableCellView">
            <summary>
            Cell view for components that can receive the focus and be modified.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameContentFocusableCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameFrame,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameContentFocusableCellView.PropertyName">
            <summary>
            Property corresponding to the component of the node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameFocusableCellView">
            <summary>
            Cell view for discrete elements that can receive the focus but are not always the component of a node (insertion points, keywords and other decorations)
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameFocusableCellView">
            <summary>
            Cell view for discrete elements that can receive the focus but are not always the component of a node (insertion points, keywords and other decorations)
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameFocusableCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameDiscreteContentFocusableCellView">
            <summary>
            Cell view for discrete components that can receive the focus and be modified (enum, bool...)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameDiscreteContentFocusableCellView.KeywordFrame">
            <summary>
            The keyword frame that was used to create this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameDiscreteContentFocusableCellView">
            <summary>
            Cell view for discrete components that can receive the focus and be modified (enum, bool...)
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteContentFocusableCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameFrame,System.String,EaslyController.Frame.IFrameKeywordFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameDiscreteContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
            <param name="keywordFrame">The keyword frame that was used to create this cell.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameDiscreteContentFocusableCellView.KeywordFrame">
            <summary>
            The keyword frame that was used to create this cell.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameCommentCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCommentCellView.Documentation">
            <summary>
            The comment this cell is displaying.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameCommentCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameFrame,BaseNode.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameCommentCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="documentation">The comment this cell is displaying.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameCommentCellView.Documentation">
            <summary>
            The comment this cell is displaying.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameTextFocusableCellView">
            <summary>
            Cell view for any text (property or comment).
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameStringContentFocusableCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameStringContentFocusableCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameStringContentFocusableCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameFrame,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameStringContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameStringContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameEmptyCellView">
            <summary>
            Cell view with no content and that is not displayed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameEmptyCellView">
            <summary>
            Cell view with no content and that is not displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameEmptyCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameEmptyCellView.HasVisibleCellView">
            <summary>
            True if the cell view is visible or contains at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameEmptyCellView.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameVisibleCellView">
            <summary>
            Cell view for components that are displayed.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameVisibleCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameVisibleCellView.LineNumber">
            <summary>
            Line number where the cell view appears.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameVisibleCellView.ColumnNumber">
            <summary>
            Column number where the cell view appears.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameVisibleCellView">
            <summary>
            Cell view for components that are displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.#ctor(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameVisibleCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameVisibleCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameVisibleCellView.LineNumber">
            <summary>
            Line number where the cell view appears.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameVisibleCellView.ColumnNumber">
            <summary>
            Column number where the cell view appears.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameVisibleCellView.HasVisibleCellView">
            <summary>
            True if the cell view is visible or contains at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.ClearCellTree">
            <summary>
            Clears all views (cells and states) within this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.PrintTree(System.Int32,System.Boolean)">
            <summary>
            Returns a string representing this part of the cell view tree.
            </summary>
            <param name="indentation">The indentation level to use.</param>
            <param name="isVerbose">True to verbose information.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameVisibleCellView.IsCellViewTreeValid(EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary{System.String},EaslyController.Frame.IFrameAssignableCellViewDictionary{System.String})">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
            <param name="expectedCellViewTable">Cell views that are associated to a property of the node.</param>
            <param name="actualCellViewTable">Cell views that are found in the tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameVisibleCellViewList">
            <summary>
            List of IxxxVisibleCellView
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameVisibleCellViewList">
            <summary>
            List of IxxxVisibleCellView
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameKeywordFrameList">
            <summary>
            List of IxxxKeywordFrame
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameKeywordFrameList">
            <summary>
            List of IxxxKeywordFrame
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameTemplateList">
            <summary>
            List of IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameTemplateList">
            <summary>
            List of IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameIndexNodeStateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameInnerDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameInnerReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameInnerReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateReadOnlyList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFramePlaceholderNodeStateReadOnlyList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameBlockStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameTemplateReadOnlyDictionary">
            <summary>
            Read-only dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameTemplateReadOnlyDictionary">
            <summary>
            Read-only dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameTemplateDictionary">
            <summary>
            Dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameTemplateDictionary">
            <summary>
            Dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameFrameList">
            <summary>
            List of IxxxFrame
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameFrameList">
            <summary>
            List of IxxxFrame
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCellViewList">
            <summary>
            List of IxxxCellView
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameCellViewList">
            <summary>
            List of IxxxCellView
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameCellViewList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameAssignableCellViewDictionary`1">
            <summary>
            Dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.IFrameAssignableCellViewDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameAssignableCellViewDictionary`1">
            <summary>
            Dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameAssignableCellViewDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameAssignableCellViewReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameAssignableCellViewReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameAssignableCellViewReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowseContext.#ctor(EaslyController.Frame.IFrameNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowseContext"/> class.
            </summary>
            <param name="state">The state that will be browsed.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowseContext.CheckConsistency">
            <summary>
            Checks the context consistency, for code coverage purpose.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowseContext.CreateIndexCollectionList">
            <summary>
            Creates a IxxxCollectionList object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameAttachCallbackSet.NodeStateAttachedHandler">
            <summary>
            Handler to call when attaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameAttachCallbackSet.NodeStateDetachedHandler">
            <summary>
            Handler to call when detaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameAttachCallbackSet.BlockListInnerAttachedHandler">
            <summary>
            Handler to call when attaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameAttachCallbackSet.BlockListInnerDetachedHandler">
            <summary>
            Handler to call when detaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameAttachCallbackSet.BlockStateAttachedHandler">
            <summary>
            Handler to call when attaching a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameAttachCallbackSet.BlockStateDetachedHandler">
            <summary>
            Handler to call when detaching a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameAttachCallbackSet.OnNodeStateAttached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been attached.
            </summary>
            <param name="state">The attached state.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameAttachCallbackSet.OnNodeStateDetached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been detached.
            </summary>
            <param name="state">The detached state.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameAttachCallbackSet.OnBlockListInnerAttached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been attached.
            </summary>
            <param name="inner">The inner attached.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameAttachCallbackSet.OnBlockListInnerDetached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been detached.
            </summary>
            <param name="inner">The inner detached.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameAttachCallbackSet.OnBlockStateAttached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been attached.
            </summary>
            <param name="blockState">The attached block state.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameAttachCallbackSet.OnBlockStateDetached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been detached.
            </summary>
            <param name="blockState">The detached block state.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameCellViewTreeContext">
            <summary>
            Context used when building the cell view tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellViewTreeContext.ControllerView">
            <summary>
            The view in which cells are created.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellViewTreeContext.StateView">
            <summary>
            The state view for which to create cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameCellViewTreeContext.BlockStateView">
            <summary>
            The block state view for which to create cells. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewTreeContext.SetChildStateView(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Changes the state view to that of a child state.
            </summary>
            <param name="childStateView">The new state view.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewTreeContext.RestoreParentStateView(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Changes the state view to that of the parent state.
            </summary>
            <param name="parentStateView">The new state view.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameCellViewTreeContext.SetBlockStateView(EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Changes the block state view.
            </summary>
            <param name="blockStateView">The new block state view.</param>
        </member>
        <member name="T:EaslyController.Frame.FrameCellViewTreeContext">
            <summary>
            Context used when building the cell view tree.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewTreeContext.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameCellViewTreeContext"/> class.
            </summary>
            <param name="controllerView">The view in which cells are created.</param>
            <param name="stateView">The state view for which to create cells.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewTreeContext.ControllerView">
            <summary>
            The view in which cells are created.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewTreeContext.StateView">
            <summary>
            The state view for which to create cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameCellViewTreeContext.BlockStateView">
            <summary>
            The block state view for which to create cells. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewTreeContext.SetChildStateView(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Changes the state view to that of a child state.
            </summary>
            <param name="childStateView">The new state view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewTreeContext.RestoreParentStateView(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Changes the state view to that of the parent state.
            </summary>
            <param name="parentStateView">The new state view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCellViewTreeContext.SetBlockStateView(EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Changes the block state view.
            </summary>
            <param name="blockStateView">The new block state view.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.TemplateSet">
            <summary>
            Template set describing the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.LastLineNumber">
            <summary>
            Last line number in the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.LastColumnNumber">
            <summary>
            Last column number in the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameControllerView.CommentDisplayMode">
            <summary>
            The display mode for comments.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameControllerView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.IFrameControllerView.PrintCellViewTree(System.Boolean)">
            <summary>
            Prints the cell view tree.
            </summary>
            <param name="isVerbose">Prints all information.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameControllerView.SetCommentDisplayMode(EaslyController.Constants.CommentDisplayModes)">
            <summary>
            Sets the comment display mode.
            </summary>
            <param name="mode">The new mode.</param>
        </member>
        <member name="T:EaslyController.Frame.FrameControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.Create(EaslyController.Frame.IFrameController,EaslyController.Frame.IFrameTemplateSet)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Frame.FrameControllerView"/> object.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
            <param name="templateSet">The template set used to describe the view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.#ctor(EaslyController.Frame.IFrameController,EaslyController.Frame.IFrameTemplateSet)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameControllerView"/> class.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
            <param name="templateSet">The template set used to describe the view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.Init">
            <summary>
            Initializes the view by attaching it to the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.TemplateSet">
            <summary>
            Template set describing the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.LastLineNumber">
            <summary>
            Last line number in the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.LastColumnNumber">
            <summary>
            Last column number in the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameControllerView.CommentDisplayMode">
            <summary>
            Gets and sets the display mode for comments.
            All modes are quivalent to <see cref="F:EaslyController.Constants.CommentDisplayModes.None"/> except <see cref="F:EaslyController.Constants.CommentDisplayModes.All"/>.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.PrintCellViewTree(System.Boolean)">
            <summary>
            Prints the cell view tree.
            </summary>
            <param name="isVerbose">Prints all information.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.SetCommentDisplayMode(EaslyController.Constants.CommentDisplayModes)">
            <summary>
            Sets the comment display mode.
            </summary>
            <param name="mode">The new mode.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlockStateInserted(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Handler called every time a block state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlockStateRemoved(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Handler called every time a block state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlockViewRemoved(EaslyController.Writeable.IWriteableRemoveBlockViewOperation)">
            <summary>
            Handler called every time a block view must be removed from the controller view.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnStateInserted(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnStateRemoved(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Handler called every time a state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnStateReplaced(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnStateAssigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is assigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnStateUnassigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is unassigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnDiscreteValueChanged(EaslyController.Writeable.IWriteableChangeDiscreteValueOperation)">
            <summary>
            Handler called every time a discrete value is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnTextChanged(EaslyController.Writeable.IWriteableChangeTextOperation)">
            <summary>
            Handler called every time a text is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnCommentChanged(EaslyController.Writeable.IWriteableChangeCommentOperation)">
            <summary>
            Handler called every time a comment is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlockStateChanged(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Handler called every time a block state is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnStateMoved(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Handler called every time a state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlockStateMoved(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Handler called every time a block state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlockSplit(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Handler called every time a block split in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnBlocksMerged(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Handler called every time two blocks are merged.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.OnGenericRefresh(EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Handler called to refresh views.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameControllerView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateStateViewTable">
            <summary>
            Creates a IxxxStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateBlockStateViewTable">
            <summary>
            Creates a IxxxBlockStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateCallbackSet">
            <summary>
            Creates a IxxxAttachCallbackSet object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreatePlaceholderNodeStateView(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Creates a IxxxPlaceholderNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateOptionalNodeStateView(EaslyController.ReadOnly.IReadOnlyOptionalNodeState)">
            <summary>
            Creates a IxxxOptionalNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreatePatternStateView(EaslyController.ReadOnly.IReadOnlyPatternState)">
            <summary>
            Creates a IxxxPatternStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateSourceStateView(EaslyController.ReadOnly.IReadOnlySourceState)">
            <summary>
            Creates a IxxxSourceStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateBlockStateView(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Creates a IxxxBlockStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameControllerView.CreateCellViewTreeContext(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxCellViewTreeContext object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameController">
            <summary>
            Controller for a node tree.
            This controller supports:
            * Operations to modify the tree.
            * Organizing nodes and their content in cells, assigning line and column numbers.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameController">
            <summary>
            Controller for a node tree.
            This controller supports:
            * Operations to modify the tree.
            * Organizing nodes and their content in cells, assigning line and column numbers.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.Create(EaslyController.Frame.IFrameRootNodeIndex)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Frame.FrameController"/> object.
            </summary>
            <param name="nodeIndex">Index of the root of the node tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameController"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateChildStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateBrowseContext(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxxBrowseContext object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreatePlaceholderInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex})">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateOptionalInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex})">
            <summary>
            Creates a IxxxOptionalInner{IxxxBrowsingOptionalNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex})">
            <summary>
            Creates a IxxxListInner{IxxxBrowsingListNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateBlockListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex})">
            <summary>
            Creates a IxxxBlockListInner{IxxxBrowsingBlockNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateRootNodeState(EaslyController.ReadOnly.IReadOnlyRootNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateNewOptionalNodeIndex(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxWriteableInsertionOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateInsertNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateInsertBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateRemoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateRemoveBlockViewOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockViewOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateRemoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateReplaceOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateAssignmentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateChangeDiscreteValueOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateChangeTextOperation(BaseNode.INode,System.String,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateChangeCommentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateChangeBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateSplitBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateMergeBlocksOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateMoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateMoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateExpandArgumentOperation(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxExpandArgumentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateGenericRefreshOperation(EaslyController.Writeable.IWriteableNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxGenericRefreshOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateOperationGroupStack">
            <summary>
            Creates a IxxxOperationGroupList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateOperationList">
            <summary>
            Creates a IxxxOperationList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameController.CreateOperationGroup(EaslyController.Writeable.IWriteableOperationReadOnlyList,EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Creates a IxxxOperationGroup object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeCommentOperation.#ctor(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameChangeCommentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="text">The new comment.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeCommentOperation.CreateChangeCommentOperation(System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeTextOperation.#ctor(BaseNode.INode,System.String,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameChangeTextOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeTextOperation.CreateChangeTextOperation(System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the insertion is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is inserted.</param>
            <param name="blockIndex">Block position where the node is inserted, if applicable.</param>
            <param name="index">Position where the node is inserted.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertNodeOperation.CreateRemoveNodeOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="blockIndex">Index of the inserted block.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertBlockOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeDiscreteValueOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameChangeDiscreteValueOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="value">The new value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeDiscreteValueOperation.CreateChangeDiscreteValueOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameRemoveBlockViewOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameRemoveBlockViewOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRemoveBlockViewOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameRemoveBlockViewOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRemoveOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameRemoveOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameExpandArgumentOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameExpandArgumentOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameExpandArgumentOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameExpandArgumentOperation.#ctor(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameExpandArgumentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted item.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameExpandArgumentOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameExpandArgumentOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameExpandArgumentOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameExpandArgumentOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRemoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameRemoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRemoveBlockOperation.CreateInsertBlockOperation(System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameRemoveNodeOperation.RemovedState">
            <summary>
            State removed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRemoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameRemoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the removal is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is removed.</param>
            <param name="blockIndex">Block position where the node is removed, if applicable.</param>
            <param name="index">Position of the removed node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameRemoveNodeOperation.RemovedState">
            <summary>
            State removed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRemoveNodeOperation.CreateInsertNodeOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameReplaceOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameReplaceOperation"/> class.
            </summary>
            <param name="parentNode">Node where the replacement is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is replaced.</param>
            <param name="blockIndex">Block position where the node is replaced, if applicable.</param>
            <param name="index">Position where the node is replaced, if applicable.</param>
            <param name="newNode">The new node. Null to clear an optional node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameReplaceOperation.CreateReplaceOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameAssignmentOperation.#ctor(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameAssignmentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the assignment is taking place.</param>
            <param name="propertyName">Optional property of <paramref name="parentNode"/> for which assignment is changed.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameAssignmentOperation.CreateAssignmentOperation(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSplitBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameSplitBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is split.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is split.</param>
            <param name="blockIndex">Position of the split block.</param>
            <param name="index">Position of the last node to stay in the old block.</param>
            <param name="newBlock">The inserted block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSplitBlockOperation.CreateMergeBlocksOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameMergeBlocksOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameMergeBlocksOperation"/> class.
            </summary>
            <param name="parentNode">Node where the blocks are merged.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where blocks are merged.</param>
            <param name="blockIndex">Position of the merged block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameMergeBlocksOperation.CreateSplitBlockOperation(System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameMoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameMoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the node is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is moved.</param>
            <param name="blockIndex">Block position where the node is moved, if applicable.</param>
            <param name="index">The current position before move.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameMoveNodeOperation.CreateMoveNodeOperation(System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameMoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameMoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is moved.</param>
            <param name="blockIndex">Index of the moved block.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameMoveBlockOperation.CreateMoveBlockOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameGenericRefreshOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameGenericRefreshOperation">
            <summary>
            Operation details for replacing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameGenericRefreshOperation.#ctor(EaslyController.Frame.IFrameNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameGenericRefreshOperation"/> class.
            </summary>
            <param name="refreshState">State in the source where to start refresh.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameChangeBlockOperation">
            <summary>
            Operation details for changing a block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameChangeBlockOperation">
            <summary>
            Operation details for changing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameChangeBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block change is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> for which a block is changed.</param>
            <param name="blockIndex">Index of the changed block.</param>
            <param name="replication">New replication value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameChangeBlockOperation.CreateChangeBlockOperation(BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOperationGroup.#ctor(EaslyController.Frame.IFrameOperationReadOnlyList,EaslyController.Frame.IFrameGenericRefreshOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameOperationGroup"/> class.
            </summary>
            <param name="operationList">List of operations belonging to this group.</param>
            <param name="refresh">Optional refresh operation to execute at the end of undo and redo.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockFrame">
            <summary>
            Frame for cells within a block.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameCommentFrame">
            <summary>
            Frame to display comments.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameCommentFrame">
            <summary>
            Frame to display comments.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentFrame.IsDisplayed(EaslyController.Frame.IFrameCellViewTreeContext,System.String)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentFrame.CreateCommentCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,BaseNode.IDocument)">
            <summary>
            Creates a IxxxCommentCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCommentFrame.CreateEmptyCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameNumberFrame">
            <summary>
            Frame describing a number string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameNumberFrame">
            <summary>
            Frame describing a number string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertFrame">
            <summary>
            Frame for bringing the focus to an insertion point.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertFrame.CollectionName">
            <summary>
            The property name for the list or block list where new elements should be inserted.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInsertFrame.InterfaceType">
            <summary>
            Interface type of items in the collection associated to this frame.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertFrame">
            <summary>
            Frame for bringing the focus to an insertion point.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertFrame.CollectionName">
            <summary>
            The property name for the list or block list where new elements should be inserted.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameInsertFrame.InterfaceType">
            <summary>
            Interface type of items in the collection associated to this frame.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeFrame">
            <summary>
            Frame for cells within a single node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameKeywordFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameKeywordFrame.Text">
            <summary>
            Free text.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameKeywordFrame.IsFocusable">
            <summary>
            True if the keyword should be allowed to receive the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameKeywordFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameKeywordFrame.Text">
            <summary>
            Free text.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameKeywordFrame.IsFocusable">
            <summary>
            True if the keyword should be allowed to receive the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameKeywordFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameKeywordFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameDiscreteFrame">
            <summary>
            Frame describing an enum value that can be displayed with different frames depending on its value.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameDiscreteFrame.Items">
            <summary>
            List of frames that can be displayed.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameDiscreteFrame">
            <summary>
            Frame describing an enum value that can be displayed with different frames depending on its value.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameDiscreteFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameDiscreteFrame.Items">
            <summary>
            List of frames that can be displayed.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteFrame.CreateKeywordFrameList">
            <summary>
            Creates a IxxxKeywordFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameDiscreteFrame.CreateDiscreteContentFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameKeywordFrame)">
            <summary>
            Creates a IxxxDiscreteContentFocusableCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSymbolFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameSymbolFrame.Symbol">
            <summary>
            Free symbol.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameSymbolFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSymbolFrame.Symbol">
            <summary>
            Free symbol.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCharacterFrame">
            <summary>
            Frame describing a single-character string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameCharacterFrame">
            <summary>
            Frame describing a single-character string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameTextValueFrame">
            <summary>
            Frame describing a string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameTextValueFrame">
            <summary>
            Frame describing a string value property in a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTextValueFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTextValueFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTextValueFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameVerticalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameVerticalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVerticalCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameHorizontalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameHorizontalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameHorizontalCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameVerticalBlockListFrame">
            <summary>
            Frame for a block list displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameVerticalBlockListFrame">
            <summary>
            Frame for a block list displayed vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVerticalBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameHorizontalBlockListFrame">
            <summary>
            Frame for a block list displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameHorizontalBlockListFrame">
            <summary>
            Frame for a block list displayed horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameHorizontalBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockListFrame">
            <summary>
            Base frame for a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockListFrame">
            <summary>
            Base frame for a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListFrame.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameVerticalListFrame">
            <summary>
            Base frame for a list of nodes displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameVerticalListFrame">
            <summary>
            Base frame for a list of nodes displayed vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVerticalListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameHorizontalListFrame">
            <summary>
            Base frame for a list of nodes displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameHorizontalListFrame">
            <summary>
            Base frame for a list of nodes displayed horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameHorizontalListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameVerticalPanelFrame">
            <summary>
            Frame for displaying more frames vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameVerticalPanelFrame">
            <summary>
            Frame for displaying more frames vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameVerticalPanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameListFrame">
            <summary>
            Base frame for a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameListFrame">
            <summary>
            Base frame for a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCollectionPlaceholderFrame">
            <summary>
            Base frame for a placeholder node in a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameCollectionPlaceholderFrame">
            <summary>
            Base frame for a placeholder node in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCollectionPlaceholderFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameCollectionPlaceholderFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCollectionPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameFrame">
            <summary>
            Base frame.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="T:EaslyController.Frame.FrameFrame">
            <summary>
            Base frame.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameFrame.FrameRoot">
            <summary>
            Singleton object representing the root of a tree of frames.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameNamedFrame">
            <summary>
            Base frame for frames that describe property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNamedFrame.PropertyName">
            <summary>
            The property name.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameNamedFrame">
            <summary>
            Base frame for frames that describe property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNamedFrame.PropertyName">
            <summary>
            The property name.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameNamedFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameHorizontalPanelFrame">
            <summary>
            Frame for displaying more frames horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameHorizontalPanelFrame">
            <summary>
            Frame for displaying more frames horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameHorizontalPanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePanelFrame">
            <summary>
            Base frame for displaying more frames.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePanelFrame">
            <summary>
            Base frame for displaying more frames.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FramePanelFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.CreateItems">
            <summary>
            Creates a IxxxFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFramePlaceholderFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOptionalFrame">
            <summary>
            Frame for describing an optional child node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOptionalFrame">
            <summary>
            Frame for describing an optional child node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderFrame">
            <summary>
            Frame for describing an child node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePlaceholderFrame">
            <summary>
            Frame for describing an child node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameStaticFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameStaticFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameStaticFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameStaticFrame.CreateFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameStaticFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxVisibleCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameValueFrame">
            <summary>
            Frame describing a value property (or string) in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameValueFrame">
            <summary>
            Frame describing a value property (or string) in a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameValueFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingBlockNodeIndex.#ctor(BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingBlockNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingCollectionNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingCollectionNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingExistingBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">Indexed node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingExistingBlockNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingListNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="node">Indexed node in the list</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="index">Position of the node in the list.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingListNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingNewBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingNewBlockNodeIndex.CreateExistingBlockIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingOptionalNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingOptionalNodeIndex.CreateInsertionOptionalNodeIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingOptionalNodeIndex.CreateInsertionOptionalClearIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionOptionalClearIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingPatternIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingPatternIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed replication pattern node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingPatternIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingPlaceholderNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed node.</param>
            <param name="node">The indexed node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingPlaceholderNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingSourceIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBrowsingSourceIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed source identifier node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBrowsingSourceIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingChildIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndexCollection">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameIndexCollection`1.#ctor(System.String,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameIndexCollection`1"/> class.
            </summary>
            <param name="propertyName">Property indexed for all nodes in the collection.</param>
            <param name="nodeIndexList">Collection of node indexes.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBrowsingInsertableIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionCollectionNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionCollectionNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionExistingBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list..</param>
            <param name="node">Inserted node.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the block.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionExistingBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionListNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="node">Inserted node.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the list.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionListNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionNewBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="patternNode">Replication pattern in the block.</param>
            <param name="sourceNode">Source identifier in the block.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionNewBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionNewBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionChildNodeIndex">
            <summary>
            Index for an inserted child node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionOptionalClearIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionOptionalClearIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionOptionalClearIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionOptionalClearIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionOptionalClearIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionOptionalClearIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionOptionalNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionOptionalNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionPlaceholderNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInsertionPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the replaced node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameInsertionPlaceholderNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInsertionChildIndex">
            <summary>
            Index for an inserted child.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameChildIndex">
            <summary>
            Base interface for any index representing the child node of a parent node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameIndex">
            <summary>
            Base interface for any index.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeIndex">
            <summary>
            Base interface for any index representing a node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameRootNodeIndex.#ctor(BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameRootNodeIndex"/> class.
            </summary>
            <param name="node">The indexed root node.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameRootNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockListInner">
            <summary>
            Inner for a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockListInner.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockListInner`1">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockListInner`1.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockListInner`2">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBlockListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockListInner`2.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.CreateBlockStateList">
            <summary>
            Creates a IxxxBlockStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.CreateBlockState(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Creates a IxxxBlockState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.CreateBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockListInner`2.CreateNewBlockNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCollectionInner">
            <summary>
            Base inner for a list or a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameCollectionInner`1">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameCollectionInner`2">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameCollectionInner`2.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameCollectionInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameCollectionInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameListInner">
            <summary>
            Inner for a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameListInner.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameListInner`1">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Frame.IFrameListInner`1.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameListInner`2">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameListInner`2.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameListInner`2.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListInner`2.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListInner`2.CreateListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOptionalInner">
            <summary>
            Inner for an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOptionalInner.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOptionalInner`1">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Frame.IFrameOptionalInner`1.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOptionalInner`2">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalInner`2.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameOptionalInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxOptionalNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalInner`2.CreateBrowsingNodeIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderInner">
            <summary>
            Inner for a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePlaceholderInner.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderInner`1">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Frame.IFramePlaceholderInner`1.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePlaceholderInner`2">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderInner`2.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FramePlaceholderInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderInner`2.CreateBrowsingNodeIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSingleInner">
            <summary>
            Base inner for a single node inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameSingleInner`1.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameSingleInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameSingleInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInner">
            <summary>
            Interface for all inners.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameInner.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Frame.IFrameInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameInner`1.#ctor(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockStateView.Template">
            <summary>
            The template used to display the block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockStateView.EmbeddingCellView">
            <summary>
            List of cell views for each child node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockStateView.HasVisibleCellView">
            <summary>
            True if the block view contain at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockStateView.AssignEmbeddingCellView(EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Assign the cell view for each child node.
            </summary>
            <param name="embeddingCellView">The assigned cell view list.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockStateView.ClearRootCellView(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Clears the cell view tree for this view.
            </summary>
            <param name="stateView">The state view for which to delete cells.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFrameBlockState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBlockStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="blockState">The block state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockStateView.Template">
            <summary>
            The template used to display the block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockStateView.EmbeddingCellView">
            <summary>
            List of cell views for each child node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockStateView.HasVisibleCellView">
            <summary>
            True if the block view contain at least one visible cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.AssignEmbeddingCellView(EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Assign the cell view for each child node.
            </summary>
            <param name="embeddingCellView">The assigned cell view list.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.ClearRootCellView(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Clears the cell view tree for this view.
            </summary>
            <param name="stateView">The state view for which to delete cells.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameBlockStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameReplaceableStateView">
            <summary>
            A state view that can be replaced.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameReplaceableStateView.AssignCellViewTable(System.String,EaslyController.Frame.IFrameAssignableCellView)">
            <summary>
            Assign the cell view corresponding to an inner.
            </summary>
            <param name="propertyName">The property name of the inner.</param>
            <param name="cellView">The assigned cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameReplaceableStateView.ReplaceCellView(System.String,EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Replaces the cell view for the given property.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="cellView">The new cell view.</param>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.HasVisibleCellView">
            <summary>
            True if the node view contain at least one visible cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeStateView.SetContainerCellView(EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Set the container for this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeStateView.ClearRootCellView">
            <summary>
            Clears the cell view tree for this view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFrameNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The node state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.HasVisibleCellView">
            <summary>
            True if the node view contain at least one visible cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.SetContainerCellView(EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Set the container for this state view.
            </summary>
            <param name="parentContainer">The cell view where the tree is restarted.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.ClearRootCellView">
            <summary>
            Clears the cell view tree for this view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFrameOptionalNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameOptionalNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The optional node state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.HasVisibleCellView">
            <summary>
            True if the node view contain at least one visible cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.AssignCellViewTable(System.String,EaslyController.Frame.IFrameAssignableCellView)">
            <summary>
            Assign the cell view corresponding to an inner.
            </summary>
            <param name="propertyName">The property name of the inner.</param>
            <param name="cellView">The assigned cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.SetContainerCellView(EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Set the container for this state view.
            </summary>
            <param name="parentContainer">The cell view where the tree is restarted.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.ClearRootCellView">
            <summary>
            Clears the cell view tree for this view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.ReplaceCellView(System.String,EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Replaces the cell view for the given property.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="cellView">The new cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameOptionalNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeStateView.CreateEmptyCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFramePatternState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FramePatternStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The pattern state.</param>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.HasVisibleCellView">
            <summary>
            True if the node view contain at least one visible cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.SetContainerCellView(EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Set the container for this state view.
            </summary>
            <param name="parentContainer">The cell view where the tree is restarted.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.ClearRootCellView">
            <summary>
            Clears the cell view tree for this view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFramePatternStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePatternStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FramePlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFramePlaceholderNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FramePlaceholderNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The child node state.</param>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.HasVisibleCellView">
            <summary>
            True if the node view contain at least one visible cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.AssignCellViewTable(System.String,EaslyController.Frame.IFrameAssignableCellView)">
            <summary>
            Assign the cell view corresponding to an inner.
            </summary>
            <param name="propertyName">The property name of the inner.</param>
            <param name="cellView">The assigned cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.SetContainerCellView(EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Set the container for this state view.
            </summary>
            <param name="parentContainer">The cell view where the tree is restarted.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.ClearRootCellView">
            <summary>
            Clears the cell view tree for this view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.ReplaceCellView(System.String,EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Replaces the cell view for the given property.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="cellView">The new cell view.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFramePlaceholderNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFrameSourceState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameSourceStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The source state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.HasVisibleCellView">
            <summary>
            True if the node view contain at least one visible cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.SetContainerCellView(EaslyController.Frame.IFrameContainerCellView)">
            <summary>
            Set the container for this state view.
            </summary>
            <param name="parentContainer">The cell view where the tree is restarted.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.ClearRootCellView">
            <summary>
            Clears the cell view tree for this view.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.UpdateLineNumbers(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Update line numbers in the root cell view.
            </summary>
            <param name="lineNumber">The current line number, updated upon return.</param>
            <param name="maxLineNumber">The maximum line number observed, updated upon return.</param>
            <param name="columnNumber">The current column number, updated upon return.</param>
            <param name="maxColumnNumber">The maximum column number observed, updated upon return.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.EnumerateVisibleCellViews(System.Func{EaslyController.Frame.IFrameVisibleCellView,System.Boolean},EaslyController.Frame.IFrameVisibleCellView@,System.Boolean)">
            <summary>
            Enumerate all visible cell views. Enumeration is interrupted if <paramref name="handler"/> returns true.
            </summary>
            <param name="handler">A handler to execute for each cell view.</param>
            <param name="cellView">The cell view for which <paramref name="handler"/> returned true. Null if none.</param>
            <param name="reversed">If true, search in reverse order.</param>
            <returns>The last value returned by <paramref name="handler"/>.</returns>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Frame.IFrameSourceStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.IsCellViewTreeValid">
            <summary>
            Checks if the tree of cell views under this state is valid.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockState">
            <summary>
            State of a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockState.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockState.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockState.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockState.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockState.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameBlockState.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.#ctor(EaslyController.Frame.IFrameBlockListInner,EaslyController.Frame.IFrameBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameBlockState`1"/> class.
            </summary>
            <param name="parentInner">Inner containing the block state.</param>
            <param name="newBlockIndex">Index that was used to create the block state.</param>
            <param name="childBlock">The block.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockState`1.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockState`1.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockState`1.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockState`1.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockState`1.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameBlockState`1.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreatePatternInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreateSourceInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreateExistingPatternIndex">
            <summary>
            Creates a IxxxBrowsingPatternIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreateExistingSourceIndex">
            <summary>
            Creates a IxxxBrowsingSourceIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreatePatternState(EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex)">
            <summary>
            Creates a IxxxPatternState object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockState`1.CreateSourceState(EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex)">
            <summary>
            Creates a IxxxSourceState object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeState.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameNodeState.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeState`1">
            <summary>
            Base interface for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameNodeState`1">
            <summary>
            Base class for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeState`1.#ctor(EaslyController.Frame.IFrameIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOptionalNodeState">
            <summary>
            State of an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOptionalNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameOptionalNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.#ctor(EaslyController.Frame.IFrameBrowsingOptionalNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameOptionalNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameOptionalNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameOptionalNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePatternState">
            <summary>
            State of an replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePatternState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePatternState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FramePatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FramePatternState`1.#ctor(EaslyController.Frame.IFrameBlockState,EaslyController.Frame.IFrameBrowsingPatternIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FramePatternState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Frame.FramePatternState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePatternState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePatternState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderNodeState">
            <summary>
            State of an child node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePlaceholderNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFramePlaceholderNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFramePlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FramePlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.#ctor(EaslyController.Frame.IFrameNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FramePlaceholderNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FramePlaceholderNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FramePlaceholderNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSourceState">
            <summary>
            State of a source identifier node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameSourceState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameSourceState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Frame.FrameSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceState`1.#ctor(EaslyController.Frame.IFrameBlockState,EaslyController.Frame.IFrameBrowsingSourceIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameSourceState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameSourceState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameSourceState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameBlockTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockTemplate.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameBlockTemplate.GetPlaceholderFrame">
            <summary>
            Gets the collection placeholder frame that creates cells for nodes using this template.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameBlockTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockTemplate.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockTemplate.GetPlaceholderFrame">
            <summary>
            Gets the collection placeholder frame that creates cells for nodes using this template.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameBlockTemplate.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameNodeTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeTemplate.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeTemplate.PropertyToFrame(System.String)">
            <summary>
            Gets the frame that associated to a given property.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameNodeTemplate.GetCommentFrame">
            <summary>
            Gets the frame associated to the comment.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameNodeTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeTemplate.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeTemplate.PropertyToFrame(System.String)">
            <summary>
            Gets the frame that associated to a given property.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeTemplate.GetCommentFrame">
            <summary>
            Gets the frame associated to the comment.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameNodeTemplate.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameTemplate.NodeType">
            <summary>
            Type of the node associated to this template (an interface type).
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameTemplate.IsValid">
            <summary>
            Checks that a template and all its frames are valid.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.FrameTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameTemplate.NodeType">
            <summary>
            Type of the node associated to this template (an interface type).
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameTemplate.IsValid">
            <summary>
            Checks that a template and all its frames are valid.
            </summary>
        </member>
        <member name="T:EaslyController.Frame.IFrameTemplateSet">
            <summary>
            Set of templates used to describe all possible nodes in the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameTemplateSet.NodeTemplateTable">
            <summary>
            Templates for nodes by their type.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.IFrameTemplateSet.BlockTemplateTable">
            <summary>
            Templates for blocks of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.IsValid(EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Checks that templates are valid for nodes.
            </summary>
            <param name="nodeTemplateTable">Table of templates.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.IsBlockValid(EaslyController.Frame.IFrameTemplateReadOnlyDictionary,EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Checks that templates are valid for blocks.
            </summary>
            <param name="blockTemplateTable">Table of templates.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.NodeTypeToTemplate(System.Type)">
            <summary>
            Template that will be used to describe the given node.
            </summary>
            <param name="nodeType">Type of the node for which a template is requested.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.BlockTypeToTemplate(System.Type)">
            <summary>
            Template that will be used to describe the given block.
            </summary>
            <param name="blockType">Type of the block for which a template is requested.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.InnerToFrame(EaslyController.Frame.IFrameInner{EaslyController.Frame.IFrameBrowsingChildIndex})">
            <summary>
            Gets the frame that creates cells associated to states in the inner.
            </summary>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.PropertyToFrame(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Gets the frame that creates cells associated to a property in a state.
            </summary>
            <param name="state">The state.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:EaslyController.Frame.IFrameTemplateSet.GetCommentFrame(EaslyController.Frame.IFrameNodeState)">
            <summary>
            Gets the frame that creates cells associated to a comment in a state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:EaslyController.Frame.FrameTemplateSet">
            <summary>
            Set of templates used to describe all possible nodes in the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameTemplateSet.Default">
            <summary>
            Returns a default template set.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameTemplateSet"/> class.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.#ctor(EaslyController.Frame.IFrameTemplateReadOnlyDictionary,EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Frame.FrameTemplateSet"/> class.
            </summary>
            <param name="nodeTemplateTable">Templates for nodes by their type.</param>
            <param name="blockTemplateTable">Templates for blocks of nodes.</param>
        </member>
        <member name="P:EaslyController.Frame.FrameTemplateSet.NodeTemplateTable">
            <summary>
            Templates for nodes by their type.
            </summary>
        </member>
        <member name="P:EaslyController.Frame.FrameTemplateSet.BlockTemplateTable">
            <summary>
            Templates for blocks of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.IsValid(EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Checks that templates are valid for nodes.
            </summary>
            <param name="nodeTemplateTable">Table of templates.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.IsValidNodeType(System.Type,System.Type)">
            <summary>
            Checks that a node type is a compatible interface to another.
            </summary>
            <param name="expectedType">The type a template must support.</param>
            <param name="providedType">The type a template has declared.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.IsBlockValid(EaslyController.Frame.IFrameTemplateReadOnlyDictionary,EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Checks that templates are valid for blocks.
            </summary>
            <param name="blockTemplateTable">Table of templates.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.NodeTypeToTemplate(System.Type)">
            <summary>
            Template that will be used to describe the given node.
            </summary>
            <param name="nodeType">Type of the node for which a template is requested.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.BlockTypeToTemplate(System.Type)">
            <summary>
            Template that will be used to describe the given block.
            </summary>
            <param name="blockType">Type of the block for which a template is requested.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.InnerToFrame(EaslyController.Frame.IFrameInner{EaslyController.Frame.IFrameBrowsingChildIndex})">
            <summary>
            Gets the frame that creates cells associated to states in the inner.
            </summary>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.PropertyToFrame(EaslyController.Frame.IFrameNodeState,System.String)">
            <summary>
            Gets the frame that creates cells associated to a property in a state.
            </summary>
            <param name="state">The state.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.GetCommentFrame(EaslyController.Frame.IFrameNodeState)">
            <summary>
            Gets the frame that creates cells associated to a comment in a state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateEmptyTemplateDictionary">
            <summary>
            Creates a IxxxTemplateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateDefaultTemplateDictionary">
            <summary>
            Creates a IxxxTemplateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateHorizontalPanelFrame">
            <summary>
            Creates a IxxxHorizontalPanelFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateHorizontalCollectionPlaceholderFrame">
            <summary>
            Creates a IxxxHorizontalCollectionPlaceholderFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreatePlaceholderFrame">
            <summary>
            Creates a IxxxPlaceholderFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateOptionalFrame">
            <summary>
            Creates a IxxxOptionalFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateHorizontalListFrame">
            <summary>
            Creates a IxxxHorizontalListFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateHorizontalBlockListFrame">
            <summary>
            Creates a IxxxHorizontalBlockListFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateDiscreteFrame">
            <summary>
            Creates a IxxxDiscreteFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateKeywordFrame">
            <summary>
            Creates a IxxxKeywordFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateTextValueFrame">
            <summary>
            Creates a IxxxTextValueFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateCommentFrame">
            <summary>
            Creates a IxxxCommentFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateNodeTemplate">
            <summary>
            Creates a IxxxTemplate object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateBlockTemplate">
            <summary>
            Creates a IxxxTemplate object.
            </summary>
        </member>
        <member name="M:EaslyController.Frame.FrameTemplateSet.CreateDefaultTemplateSet(EaslyController.Frame.IFrameTemplateReadOnlyDictionary,EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Creates a IxxxTemplateSet object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCellViewCollection">
            <summary>
            Base interface for collection of cell views.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewCollection.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewCollection.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCellViewCollection">
            <summary>
            Base interface for collection of cell views.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewCollection.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusCellViewList,EaslyController.Focus.IFocusFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCellViewCollection"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">The frame that was used to create this cell. Can be null.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewCollection.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewCollection.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewCollection.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewCollection.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewCollection.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewCollection.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusColumn">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusColumn">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusColumn.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusCellViewList,EaslyController.Focus.IFocusFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusColumn"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">The frame that was used to create this cell. Can be null.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusColumn.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusColumn.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusColumn.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusColumn.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusColumn.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusColumn.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusLine">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusLine">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusLine.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusCellViewList,EaslyController.Focus.IFocusFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusLine"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">Frame providing the horizontal separator to insert between cells. Can be null.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusLine.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusLine.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusLine.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusLine.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusLine.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusLine.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusCellView">
            <summary>
            Atomic cell view of a component in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusCellView">
            <summary>
            Atomic cell view of a component in a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusAssignableCellView">
            <summary>
            Cell view that can be assigned to a property in a state view.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockCellView">
            <summary>
            A cell view for a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockCellView.BlockStateView">
            <summary>
            The block state view of the state associated to this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusBlockStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view.</param>
            <param name="blockStateView">The block state view of the state associated to this cell.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockCellView.BlockStateView">
            <summary>
            The block state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusContainerCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusContainerCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusContainerCellView.ChildStateView">
            <summary>
            The state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusContainerCellView.Frame">
            <summary>
            The frame that was used to create this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusContainerCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusContainerCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusNodeStateView,EaslyController.Frame.IFrameFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusContainerCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view.</param>
            <param name="childStateView">The state view of the state associated to this cell.</param>
            <param name="frame">The frame that was used to create this cell.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusContainerCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusContainerCellView.ChildStateView">
            <summary>
            The state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusContainerCellView.Frame">
            <summary>
            The frame that was used to create this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusContainerCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusContainerCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusContainerCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusContentFocusableCellView">
            <summary>
            Cell view for components that can receive the focus and be modified.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusContentFocusableCellView">
            <summary>
            Cell view for components that can receive the focus and be modified.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusContentFocusableCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusFrame,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusContentFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusContentFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusContentFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusContentFocusableCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusDiscreteContentFocusableCellView">
            <summary>
            Cell view for discrete components that can receive the focus and be modified (enum, bool...)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusDiscreteContentFocusableCellView.KeywordFrame">
            <summary>
            The keyword frame that was used to create this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusDiscreteContentFocusableCellView">
            <summary>
            Cell view for discrete components that can receive the focus and be modified (enum, bool...)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentFocusableCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusFrame,System.String,EaslyController.Focus.IFocusKeywordFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusDiscreteContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
            <param name="keywordFrame">The keyword frame that was used to create this cell.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteContentFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteContentFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteContentFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteContentFocusableCellView.KeywordFrame">
            <summary>
            The keyword frame that was used to create this cell.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentFocusableCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentFocusableCellView.CreateFocus">
            <summary>
            Creates a IxxxDiscreteContentFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusEmptyCellView">
            <summary>
            Cell view with no content and that is not displayed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusEmptyCellView">
            <summary>
            Cell view with no content and that is not displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptyCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusEmptyCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusEmptyCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusEmptyCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptyCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptyCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusFocusableCellView">
            <summary>
            Cell view for discrete elements that can receive the focus but are not always the component of a node (insertion points, keywords and other decorations)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusFocusableCellView">
            <summary>
            Cell view for discrete elements that can receive the focus but are not always the component of a node (insertion points, keywords and other decorations)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFocusableCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFocusableCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusFocusableCellView.CreateFocus">
            <summary>
            Creates a IxxxFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusStringContentFocusableCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusStringContentFocusableCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentFocusableCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusFrame,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusStringContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentFocusableCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentFocusableCellView.CreateFocus">
            <summary>
            Creates a IxxxTextFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusVisibleCellView">
            <summary>
            Cell view for components that are displayed.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusVisibleCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusVisibleCellView">
            <summary>
            Cell view for components that are displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVisibleCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusVisibleCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusVisibleCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVisibleCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVisibleCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVisibleCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVisibleCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusCommentCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCommentCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentCellView.#ctor(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection,EaslyController.Focus.IFocusFrame,BaseNode.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCommentCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="documentation">The comment this cell is displaying.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentCellView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentCellView.CreateFocus">
            <summary>
            Creates a IxxxCommentFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTextFocusableCellView">
            <summary>
            Cell view for any text (property or comment).
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusBlockStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusAssignableCellViewDictionary`1">
            <summary>
            Dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusAssignableCellViewDictionary`1">
            <summary>
            Dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusAssignableCellViewDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCycleManagerList">
            <summary>
            List of IxxxCycleManager
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCycleManagerList">
            <summary>
            List of IxxxCycleManager
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusFocusList">
            <summary>
            List of IxxxFocus
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusFocusList">
            <summary>
            List of IxxxFocus
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusFrameSelectorList">
            <summary>
            List of IxxxFrameSelector
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusFrameSelectorList">
            <summary>
            List of IxxxFrameSelector
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFrameSelectorList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusFrameSelectorList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionChildNodeIndexList">
            <summary>
            List of IxxxInsertionChildNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionChildNodeIndexList">
            <summary>
            List of IxxxInsertionChildNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSelectableFrameList">
            <summary>
            List of IxxxSelectableFrame
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSelectableFrameList">
            <summary>
            List of IxxxSelectableFrame
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusVisibleCellViewList">
            <summary>
            List of IxxxVisibleCellView
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusVisibleCellViewList">
            <summary>
            List of IxxxVisibleCellView
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCellViewList">
            <summary>
            List of IxxxCellView
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCellViewList">
            <summary>
            List of IxxxCellView
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusCellViewList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusAssignableCellViewReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusAssignableCellViewReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusAssignableCellViewReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusAssignableCellViewReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusFrameList">
            <summary>
            List of IxxxFrame
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusFrameList">
            <summary>
            List of IxxxFrame
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusIndexNodeStateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusInnerDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusInnerReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusInnerReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusKeywordFrameList">
            <summary>
            List of IxxxKeywordFrame
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusKeywordFrameList">
            <summary>
            List of IxxxKeywordFrame
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateReadOnlyList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusPlaceholderNodeStateReadOnlyList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusTemplateDictionary">
            <summary>
            Dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusTemplateDictionary">
            <summary>
            Dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTemplateList">
            <summary>
            List of IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusTemplateList">
            <summary>
            List of IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTemplateReadOnlyDictionary">
            <summary>
            Read-only dictionary of ..., IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusTemplateReadOnlyDictionary">
            <summary>
            Read-only dictionary of ..., IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeFrameVisibilityList">
            <summary>
            List of IxxxNodeFrameVisibility
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeFrameVisibilityList">
            <summary>
            List of IxxxNodeFrameVisibility
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowseContext.#ctor(EaslyController.Focus.IFocusNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowseContext"/> class.
            </summary>
            <param name="state">The state that will be browsed.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowseContext.CheckConsistency">
            <summary>
            Checks the context consistency, for code coverage purpose.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowseContext.CreateIndexCollectionList">
            <summary>
            Creates a IxxxCollectionList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusAttachCallbackSet.NodeStateAttachedHandler">
            <summary>
            Handler to call when attaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusAttachCallbackSet.NodeStateDetachedHandler">
            <summary>
            Handler to call when detaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusAttachCallbackSet.BlockListInnerAttachedHandler">
            <summary>
            Handler to call when attaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusAttachCallbackSet.BlockListInnerDetachedHandler">
            <summary>
            Handler to call when detaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusAttachCallbackSet.BlockStateAttachedHandler">
            <summary>
            Handler to call when attaching a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusAttachCallbackSet.BlockStateDetachedHandler">
            <summary>
            Handler to call when detaching a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusAttachCallbackSet.OnNodeStateAttached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been attached.
            </summary>
            <param name="state">The attached state.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusAttachCallbackSet.OnNodeStateDetached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been detached.
            </summary>
            <param name="state">The detached state.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusAttachCallbackSet.OnBlockListInnerAttached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been attached.
            </summary>
            <param name="inner">The inner attached.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusAttachCallbackSet.OnBlockListInnerDetached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been detached.
            </summary>
            <param name="inner">The inner detached.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusAttachCallbackSet.OnBlockStateAttached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been attached.
            </summary>
            <param name="blockState">The attached block state.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusAttachCallbackSet.OnBlockStateDetached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been detached.
            </summary>
            <param name="blockState">The detached block state.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusInternalControllerView">
            <summary>
            Internal interface for a view of a IxxxController.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.IsTemplateComplex(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Checks if the template associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state is complex.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the template to check.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.CollectionHasItems(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32)">
            <summary>
            Checks if the collection associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state has more than <paramref name="count"/> item.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the collection to check.</param>
            <param name="count">The number of items.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.IsOptionalNodeAssigned(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Checks if the optional node associated to <paramref name="propertyName"/> is assigned.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the node to check.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.DiscreteHasDefaultValue(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32)">
            <summary>
            Checks if the enum or boolean associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state has value <paramref name="defaultValue"/>.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the template to check.</param>
            <param name="defaultValue">Expected default value.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.IsFirstItem(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Checks if the <paramref name="stateView"/> state is the first in a collection in the parent.
            </summary>
            <param name="stateView">The state view.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.IsInReplicatedBlock(EaslyController.Focus.IFocusBlockStateView)">
            <summary>
            Checks if the <paramref name="blockStateView"/> block state belongs to a replicated block.
            </summary>
            <param name="blockStateView">The block state view.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusInternalControllerView.StringMatchTextPattern(EaslyController.Focus.IFocusNodeStateView,System.String,System.String)">
            <summary>
            Checks if the string associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state matches the pattern in <paramref name="textPattern"/>.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the template to check.</param>
            <param name="textPattern">Expected text.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.TemplateSet">
            <summary>
            Template set describing the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.Focus">
            <summary>
            Cell view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.MinFocusMove">
            <summary>
            Lowest valid value for <see cref="M:EaslyController.Focus.IFocusControllerView.MoveFocus(System.Int32,System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.MaxFocusMove">
            <summary>
            Highest valid value for <see cref="M:EaslyController.Focus.IFocusControllerView.MoveFocus(System.Int32,System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.CaretPosition">
            <summary>
            Position of the caret in a text with the focus, -1 otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.CaretAnchorPosition">
            <summary>
            Position of the caret anchor in a text with the focus, -1 otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.MaxCaretPosition">
            <summary>
            Max position of the caret in a text with the focus, -1 otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.CaretMode">
            <summary>
            Current caret mode when editing text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.FocusedText">
            <summary>
            Current text if the focus is on a string property or comment. Null otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.IsUserVisible">
            <summary>
            Indicates if the node with the focus has all its frames forced to visible.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.Selection">
            <summary>
            The current selection.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.SelectionAnchor">
            <summary>
            The anchor to use to calculate the selection.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.SelectionExtension">
            <summary>
            Gets how extended is the selection.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.IsSelectionEmpty">
            <summary>
            True if the selection is empty.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusControllerView.AutoFormatMode">
            <summary>
            Current auto formatting mode.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.MoveFocus(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Moves the current focus in the focus chain.
            </summary>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True upon return if the focus was moved.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SetCaretPosition(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Changes the caret position. Does nothing if the focus isn't on a string property.
            </summary>
            <param name="position">The new position.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the position was changed. False otherwise.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SetCaretMode(EaslyController.Constants.CaretModes,System.Boolean@)">
            <summary>
            Changes the caret mode.
            </summary>
            <param name="mode">The new mode.</param>
            <param name="isChanged">True if the mode was changed.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SetUserVisible(System.Boolean)">
            <summary>
            Sets the node with the focus to have all its frames visible.
            If another node had this flag set, it is reset, regardless of the value of <paramref name="isUserVisible"/>.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.ForceShowComment(System.Boolean@)">
            <summary>
            Force the comment attached to the node with the focus to show, if empty, and move the focus to this comment.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsNewItemInsertable(EaslyController.Focus.IFocusCollectionInner@,EaslyController.Focus.IFocusInsertionCollectionNodeIndex@)">
            <summary>
            Checks if a new item can be inserted at the focus.
            </summary>
            <param name="inner">Inner to use to insert the new item upon return.</param>
            <param name="index">Index of the new item to insert upon return.</param>
            <returns>True if a new item can be inserted at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemRemoveable(EaslyController.Focus.IFocusCollectionInner@,EaslyController.Focus.IFocusBrowsingCollectionNodeIndex@)">
            <summary>
            Checks if an existing item can be removed at the focus.
            </summary>
            <param name="inner">Inner to use to remove the item upon return.</param>
            <param name="index">Index of the item to remove upon return.</param>
            <returns>True if an item can be removed at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemSplittable(EaslyController.Focus.IFocusBlockListInner@,EaslyController.Focus.IFocusBrowsingExistingBlockNodeIndex@)">
            <summary>
            Checks if an existing block at the focus can be split in two.
            </summary>
            <param name="inner">Inner to use to split the block upon return.</param>
            <param name="index">Index of the block to split upon return.</param>
            <returns>True if a block can be split at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemMergeable(EaslyController.Focus.IFocusBlockListInner@,EaslyController.Focus.IFocusBrowsingExistingBlockNodeIndex@)">
            <summary>
            Checks if two existing blocks at the focus can be merged.
            </summary>
            <param name="inner">Inner to use to merge the blocks upon return.</param>
            <param name="index">Index of the last item in the block to merge upon return.</param>
            <returns>True if two blocks can be merged at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemMoveable(System.Int32,EaslyController.Focus.IFocusCollectionInner@,EaslyController.Focus.IFocusBrowsingCollectionNodeIndex@)">
            <summary>
            Checks if an existing item at the focus can be moved up or down.
            </summary>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
            <param name="inner">Inner to use to move the item upon return.</param>
            <param name="index">Index of the item to move upon return.</param>
            <returns>True if an item can be moved at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsBlockMoveable(System.Int32,EaslyController.Focus.IFocusBlockListInner@,System.Int32@)">
            <summary>
            Checks if an existing block at the focus can be moved up or down.
            </summary>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
            <param name="inner">Inner to use to move the block upon return.</param>
            <param name="blockIndex">Index of the block to move upon return.</param>
            <returns>True if an item can be moved at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemCyclableThrough(EaslyController.Focus.IFocusCyclableNodeState@,System.Int32@)">
            <summary>
            Checks if an existing item at the focus or above that can be cycled through.
            Such items are features and bodies.
            </summary>
            <param name="state">State that can be replaced the item upon return.</param>
            <param name="cyclePosition">Position of the current node in the cycle upon return.</param>
            <returns>True if an item can be cycled through at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemSimplifiable(EaslyController.Focus.IFocusInner@,EaslyController.Focus.IFocusInsertionChildIndex@)">
            <summary>
            Checks if a node can be simplified.
            </summary>
            <param name="inner">Inner to use to replace the node upon return.</param>
            <param name="index">Index of the simpler node upon return.</param>
            <returns>True if a node can be simplified at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsItemComplexifiable(System.Collections.Generic.IDictionary{EaslyController.Focus.IFocusInner,System.Collections.Generic.IList{EaslyController.Focus.IFocusInsertionChildNodeIndex}}@)">
            <summary>
            Checks if a node can be complexified.
            </summary>
            <param name="indexTable">List of indexes of more complex nodes upon return.</param>
            <returns>True if a node can be complexified at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsIdentifierSplittable(EaslyController.Focus.IFocusListInner@,EaslyController.Focus.IFocusInsertionListNodeIndex@,EaslyController.Focus.IFocusInsertionListNodeIndex@)">
            <summary>
            Checks if an existing identifier at the focus can be split in two.
            </summary>
            <param name="inner">Inner to use to split the identifier upon return.</param>
            <param name="replaceIndex">Index of the identifier to replace upon return.</param>
            <param name="insertIndex">Index of the identifier to insert upon return.</param>
            <returns>True if an identifier can be split at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.IsReplicationModifiable(EaslyController.Focus.IFocusBlockListInner@,System.Int32@,BaseNode.ReplicationStatus@)">
            <summary>
            Checks if an existing block can have its replication status changed.
            </summary>
            <param name="inner">Inner to use to change the replication status upon return.</param>
            <param name="blockIndex">Index of the block that can be changed upon return.</param>
            <param name="replication">The current replication status upon return.</param>
            <returns>True if an existing block can have its replication status changed at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.ChangeFocusedText(System.String,System.Int32,System.Boolean)">
            <summary>
            Changes the value of a text. The caret position is also moved for this view and other views where the caret is at the same focus and position.
            </summary>
            <param name="newText">The new text.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.ExtendSelection(System.Boolean@)">
            <summary>
            Extends the selection by one step, starting from the focus.
            </summary>
            <param name="isChanged">True upon return is the selection was changed.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.ReduceSelection(System.Boolean@)">
            <summary>
            Reduces the selection by one step, ending at the focus.
            </summary>
            <param name="isChanged">True upon return is the selection was changed.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectDiscreteContent(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Selects the specified discrete content.
            </summary>
            <param name="state">The state with a discrete content property.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectStringContent(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32)">
            <summary>
            Selects the specified string content.
            </summary>
            <param name="state">The state with a string content property.</param>
            <param name="propertyName">The property name.</param>
            <param name="start">Index of the first character of the selection.</param>
            <param name="end">Index following the last character of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectComment(EaslyController.Focus.IFocusNodeState,System.Int32,System.Int32)">
            <summary>
            Selects the specified string content.
            </summary>
            <param name="state">The state with the comment to select.</param>
            <param name="start">Index of the first character of the selection.</param>
            <param name="end">Index following the last character of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectNode(EaslyController.Focus.IFocusNodeState)">
            <summary>
            Selects the specified node.
            </summary>
            <param name="state">The state with the node to select.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectNodeList(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32)">
            <summary>
            Selects the specified list of nodes in a node list.
            </summary>
            <param name="state">The state with a node list property.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first node of the selection.</param>
            <param name="endIndex">Index following the last node of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectBlockNodeList(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified list of nodes in a block of a block list.
            </summary>
            <param name="state">The state with a node list property.</param>
            <param name="propertyName">The property name.</param>
            <param name="blockIndex">Index of the block.</param>
            <param name="startIndex">Index of the first node of the selection.</param>
            <param name="endIndex">Index of the last node of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SelectBlockList(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32)">
            <summary>
            Selects the specified list of blocks in a block list.
            </summary>
            <param name="state">The state with a node list property.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first block of the selection.</param>
            <param name="endIndex">Index of the last block of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusControllerView.SetAutoFormatMode(EaslyController.Constants.AutoFormatModes)">
            <summary>
            Change auto formatting mode.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.Create(EaslyController.Focus.IFocusController,EaslyController.Focus.IFocusTemplateSet)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Focus.FocusControllerView"/> object.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
            <param name="templateSet">The template set used to describe the view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.#ctor(EaslyController.Focus.IFocusController,EaslyController.Focus.IFocusTemplateSet)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusControllerView"/> class.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
            <param name="templateSet">The template set used to describe the view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.Init">
            <summary>
            Initializes the view by attaching it to the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.TemplateSet">
            <summary>
            Template set describing the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.Focus">
            <summary>
            Cell view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.MinFocusMove">
            <summary>
            Lowest valid value for <see cref="M:EaslyController.Focus.FocusControllerView.MoveFocus(System.Int32,System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.MaxFocusMove">
            <summary>
            Highest valid value for <see cref="M:EaslyController.Focus.FocusControllerView.MoveFocus(System.Int32,System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.CaretPosition">
            <summary>
            Position of the caret in a text with the focus, -1 otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.CaretAnchorPosition">
            <summary>
            Position of the caret anchor in a text with the focus, -1 otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.MaxCaretPosition">
            <summary>
            Max position of the caret in a text with the focus, -1 otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.CaretMode">
            <summary>
            Current caret mode when editing text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.FocusedText">
            <summary>
            Current text if the focus is on a string property or comment. Null otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.IsUserVisible">
            <summary>
            Indicates if the node with the focus has all its frames forced to visible.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.Selection">
            <summary>
            The current selection.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.SelectionAnchor">
            <summary>
            The anchor to use to calculate the selection.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.SelectionExtension">
            <summary>
            Gets how extended is the selection.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.IsSelectionEmpty">
            <summary>
            True if the selection is empty.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.AutoFormatMode">
            <summary>
            Current auto formatting mode.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.MoveFocus(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Moves the current focus in the focus chain.
            </summary>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True upon return if the focus was moved.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SetCaretPosition(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Changes the caret position. Does nothing if the focus isn't on a string property.
            </summary>
            <param name="position">The new position.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the position was changed. False otherwise.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SetCaretMode(EaslyController.Constants.CaretModes,System.Boolean@)">
            <summary>
            Changes the caret mode.
            </summary>
            <param name="mode">The new mode.</param>
            <param name="isChanged">True if the mode was changed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SetUserVisible(System.Boolean)">
            <summary>
            Sets the node with the focus to have all its frames visible.
            If another node had this flag set, it is reset, regardless of the value of <paramref name="isUserVisible"/>.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.ForceShowComment(System.Boolean@)">
            <summary>
            Force the comment attached to the node with the focus to show, if empty, and move the focus to this comment.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsNewItemInsertable(EaslyController.Focus.IFocusCollectionInner@,EaslyController.Focus.IFocusInsertionCollectionNodeIndex@)">
            <summary>
            Checks if a new item can be inserted at the focus.
            </summary>
            <param name="inner">Inner to use to insert the new item upon return.</param>
            <param name="index">Index of the new item to insert upon return.</param>
            <returns>True if a new item can be inserted at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemRemoveable(EaslyController.Focus.IFocusCollectionInner@,EaslyController.Focus.IFocusBrowsingCollectionNodeIndex@)">
            <summary>
            Checks if an existing item can be removed at the focus.
            </summary>
            <param name="inner">Inner to use to remove the item upon return.</param>
            <param name="index">Index of the item to remove upon return.</param>
            <returns>True if an item can be removed at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemSplittable(EaslyController.Focus.IFocusBlockListInner@,EaslyController.Focus.IFocusBrowsingExistingBlockNodeIndex@)">
            <summary>
            Checks if an existing block at the focus can be split in two.
            </summary>
            <param name="inner">Inner to use to split the block upon return.</param>
            <param name="index">Index of the block to split upon return.</param>
            <returns>True if a block can be split at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemMergeable(EaslyController.Focus.IFocusBlockListInner@,EaslyController.Focus.IFocusBrowsingExistingBlockNodeIndex@)">
            <summary>
            Checks if two existing blocks at the focus can be merged.
            </summary>
            <param name="inner">Inner to use to merge the blocks upon return.</param>
            <param name="index">Index of the last item in the block to merge upon return.</param>
            <returns>True if two blocks can be merged at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemMoveable(System.Int32,EaslyController.Focus.IFocusCollectionInner@,EaslyController.Focus.IFocusBrowsingCollectionNodeIndex@)">
            <summary>
            Checks if an existing item at the focus can be moved up or down.
            </summary>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
            <param name="inner">Inner to use to move the item upon return.</param>
            <param name="index">Index of the item to move upon return.</param>
            <returns>True if an item can be moved at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsBlockMoveable(System.Int32,EaslyController.Focus.IFocusBlockListInner@,System.Int32@)">
            <summary>
            Checks if an existing block at the focus can be moved up or down.
            </summary>
            <param name="direction">Direction of the move, relative to the current position of the item.</param>
            <param name="inner">Inner to use to move the block upon return.</param>
            <param name="blockIndex">Index of the block to move upon return.</param>
            <returns>True if an item can be moved at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemCyclableThrough(EaslyController.Focus.IFocusCyclableNodeState@,System.Int32@)">
            <summary>
            Checks if an existing item at the focus or above that can be cycled through.
            Such items are features and bodies.
            </summary>
            <param name="state">State that can be replaced the item upon return.</param>
            <param name="cyclePosition">Position of the current node in the cycle upon return.</param>
            <returns>True if an item can be cycled through at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemSimplifiable(EaslyController.Focus.IFocusInner@,EaslyController.Focus.IFocusInsertionChildIndex@)">
            <summary>
            Checks if a node can be simplified.
            </summary>
            <param name="inner">Inner to use to replace the node upon return.</param>
            <param name="index">Index of the simpler node upon return.</param>
            <returns>True if a node can be simplified at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsItemComplexifiable(System.Collections.Generic.IDictionary{EaslyController.Focus.IFocusInner,System.Collections.Generic.IList{EaslyController.Focus.IFocusInsertionChildNodeIndex}}@)">
            <summary>
            Checks if a node can be complexified.
            </summary>
            <param name="indexTable">List of indexes of more complex nodes upon return.</param>
            <returns>True if a node can be complexified at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsIdentifierSplittable(EaslyController.Focus.IFocusListInner@,EaslyController.Focus.IFocusInsertionListNodeIndex@,EaslyController.Focus.IFocusInsertionListNodeIndex@)">
            <summary>
            Checks if an existing identifier at the focus can be split in two.
            </summary>
            <param name="inner">Inner to use to split the identifier upon return.</param>
            <param name="replaceIndex">Index of the identifier to replace upon return.</param>
            <param name="insertIndex">Index of the identifier to insert upon return.</param>
            <returns>True if an identifier can be split at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsReplicationModifiable(EaslyController.Focus.IFocusBlockListInner@,System.Int32@,BaseNode.ReplicationStatus@)">
            <summary>
            Checks if an existing block can have its replication status changed.
            </summary>
            <param name="inner">Inner to use to change the replication status upon return.</param>
            <param name="blockIndex">Index of the block that can be changed upon return.</param>
            <param name="replication">The current replication status upon return.</param>
            <returns>True if an existing block can have its replication status changed at the focus.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.ChangeFocusedText(System.String,System.Int32,System.Boolean)">
            <summary>
            Changes the value of a text. The caret position is also moved for this view and other views where the caret is at the same focus and position.
            </summary>
            <param name="newText">The new text.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.ExtendSelection(System.Boolean@)">
            <summary>
            Extends the selection by one step, starting from the focus.
            </summary>
            <param name="isChanged">True upon return is the selection was changed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.ReduceSelection(System.Boolean@)">
            <summary>
            Reduces the selection by one step, ending at the focus.
            </summary>
            <param name="isChanged">True upon return is the selection was changed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectDiscreteContent(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Selects the specified discrete content.
            </summary>
            <param name="state">The state with a discrete content property.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectStringContent(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32)">
            <summary>
            Selects the specified string content.
            </summary>
            <param name="state">The state with a string content property.</param>
            <param name="propertyName">The property name.</param>
            <param name="start">Index of the first character of the selection.</param>
            <param name="end">Index following the last character of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectStringContent(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectComment(EaslyController.Focus.IFocusNodeState,System.Int32,System.Int32)">
            <summary>
            Selects the specified string content.
            </summary>
            <param name="state">The state with the comment to select.</param>
            <param name="start">Index of the first character of the selection.</param>
            <param name="end">Index following the last character of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectComment(EaslyController.Focus.IFocusNodeStateView,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectNode(EaslyController.Focus.IFocusNodeState)">
            <summary>
            Selects the specified node.
            </summary>
            <param name="state">The state with the node to select.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectNodeList(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32)">
            <summary>
            Selects the specified list of nodes in a node list.
            </summary>
            <param name="state">The state with a node list property.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first node of the selection.</param>
            <param name="endIndex">Index following the last node of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectBlockNodeList(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified list of nodes in a block of a block list.
            </summary>
            <param name="state">The state with a node list property.</param>
            <param name="propertyName">The property name.</param>
            <param name="blockIndex">Index of the block.</param>
            <param name="startIndex">Index of the first node of the selection.</param>
            <param name="endIndex">Index of the last node of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SelectBlockList(EaslyController.Focus.IFocusNodeState,System.String,System.Int32,System.Int32)">
            <summary>
            Selects the specified list of blocks in a block list.
            </summary>
            <param name="state">The state with a node list property.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first block of the selection.</param>
            <param name="endIndex">Index of the last block of the selection.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.SetAutoFormatMode(EaslyController.Constants.AutoFormatModes)">
            <summary>
            Change auto formatting mode.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlockStateInserted(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Handler called every time a block state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlockStateRemoved(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Handler called every time a block state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlockViewRemoved(EaslyController.Writeable.IWriteableRemoveBlockViewOperation)">
            <summary>
            Handler called every time a block view must be removed from the controller view.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnStateInserted(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnStateRemoved(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Handler called every time a state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnStateReplaced(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnStateAssigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is assigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnStateUnassigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is unassigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnDiscreteValueChanged(EaslyController.Writeable.IWriteableChangeDiscreteValueOperation)">
            <summary>
            Handler called every time a discrete value is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnTextChanged(EaslyController.Writeable.IWriteableChangeTextOperation)">
            <summary>
            Handler called every time a text is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnCommentChanged(EaslyController.Writeable.IWriteableChangeCommentOperation)">
            <summary>
            Handler called every time a comment is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlockStateChanged(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Handler called every time a block state is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnStateMoved(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Handler called every time a state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlockStateMoved(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Handler called every time a block state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlockSplit(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Handler called every time a block split in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnBlocksMerged(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Handler called every time two blocks are merged.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.OnGenericRefresh(EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Handler called to refresh views.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsTemplateComplex(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Checks if the template associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state is complex.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the template to check.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CollectionHasItems(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32)">
            <summary>
            Checks if the collection associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state has more than <paramref name="count"/> item.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the collection to check.</param>
            <param name="count">The number of items.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsOptionalNodeAssigned(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Checks if the optional node associated to <paramref name="propertyName"/> is assigned.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the node to check.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.DiscreteHasDefaultValue(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32)">
            <summary>
            Checks if the enum or boolean associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state has value <paramref name="defaultValue"/>.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the template to check.</param>
            <param name="defaultValue">Expected default value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsFirstItem(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Checks if the <paramref name="stateView"/> state is the first in a collection in the parent.
            </summary>
            <param name="stateView">The state view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsInReplicatedBlock(EaslyController.Focus.IFocusBlockStateView)">
            <summary>
            Checks if the <paramref name="blockStateView"/> block state belongs to a replicated block.
            </summary>
            <param name="blockStateView">The block state view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.StringMatchTextPattern(EaslyController.Focus.IFocusNodeStateView,System.String,System.String)">
            <summary>
            Checks if the string associated to the <paramref name="propertyName"/> property of the <paramref name="stateView"/> state matches the pattern in <paramref name="textPattern"/>.
            </summary>
            <param name="stateView">The state view for the node with property <paramref name="propertyName"/>.</param>
            <param name="propertyName">Name of the property pointing to the template to check.</param>
            <param name="textPattern">Expected text.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusControllerView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusControllerView.FocusHash">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.MergeHash(System.UInt64@,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateStateViewTable">
            <summary>
            Creates a IxxxStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateBlockStateViewTable">
            <summary>
            Creates a IxxxBlockStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateCallbackSet">
            <summary>
            Creates a IxxxAttachCallbackSet object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreatePlaceholderNodeStateView(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Creates a IxxxPlaceholderNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateOptionalNodeStateView(EaslyController.ReadOnly.IReadOnlyOptionalNodeState)">
            <summary>
            Creates a IxxxOptionalNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreatePatternStateView(EaslyController.ReadOnly.IReadOnlyPatternState)">
            <summary>
            Creates a IxxxPatternStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateSourceStateView(EaslyController.ReadOnly.IReadOnlySourceState)">
            <summary>
            Creates a IxxxSourceStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateBlockStateView(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Creates a IxxxBlockStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateCellViewTreeContext(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxCellViewTreeContext object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateFocusChain">
            <summary>
            Creates a IxxxFocusList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateNewBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Creates a IxxxInsertionNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateListNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateEmptySelection">
            <summary>
            Creates a IxxxEmptySelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateDiscreteContentSelection(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Creates a IxxxDiscreteContentSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateStringContentSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxStringContentSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateCommentSelection(EaslyController.Focus.IFocusNodeStateView,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxCommentSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateNodeSelection(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Creates a IxxxNodeSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateNodeListSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxListNodeSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateBlockNodeListSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBlockListNodeSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusControllerView.CreateBlockListSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBlockSelection object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCellViewTreeContext">
            <summary>
            Context used when building the cell view tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.ControllerView">
            <summary>
            The view in which cells are created.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.StateView">
            <summary>
            The state view for which to create cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.BlockStateView">
            <summary>
            The block state view for which to create cells. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.ForcedCommentStateView">
            <summary>
            The state view for which the comment must be visible, even if empty.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.IsFrameVisible">
            <summary>
            True if cells are shown ccording to the frame visibility.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.IsUserVisible">
            <summary>
            True if the user requested to see elements that are otherwise not shown.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.IsVisible">
            <summary>
            True if visibility allow the cell tree to be visible.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCellViewTreeContext.SelectorTable">
            <summary>
            Table of selectors for child frames.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.UpdateNodeFrameVisibility(EaslyController.Focus.IFocusNodeFrameWithVisibility,System.Boolean@)">
            <summary>
            Update the current visibility of frames.
            </summary>
            <param name="frame">The frame with the visibility to check.</param>
            <param name="oldFrameVisibility">The previous visibility upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.UpdateBlockFrameVisibility(EaslyController.Focus.IFocusBlockFrameWithVisibility,System.Boolean@)">
            <summary>
            Update the current visibility of frames.
            </summary>
            <param name="frame">The frame with the visibility to check.</param>
            <param name="oldFrameVisibility">The previous visibility upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.RestoreFrameVisibility(System.Boolean)">
            <summary>
            Restores the frame visibility that was changed with <see cref="M:EaslyController.Focus.IFocusCellViewTreeContext.UpdateNodeFrameVisibility(EaslyController.Focus.IFocusNodeFrameWithVisibility,System.Boolean@)"/> or <see cref="M:EaslyController.Focus.IFocusCellViewTreeContext.UpdateBlockFrameVisibility(EaslyController.Focus.IFocusBlockFrameWithVisibility,System.Boolean@)"/>.
            </summary>
            <param name="oldFrameVisibility">The previous visibility</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.AddSelectors(EaslyController.Focus.IFocusFrameSelectorList)">
            <summary>
            Adds new selectors to the table.
            </summary>
            <param name="selectors">Selectors to add.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.RemoveSelectors(EaslyController.Focus.IFocusFrameSelectorList)">
            <summary>
            Removes selectors from the table.
            </summary>
            <param name="selectors">Selectors to add.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.AddOrReplaceSelectors(EaslyController.Focus.IFocusFrameSelectorList,System.Type@,System.String@)">
            <summary>
            Adds new selectors to the table. This method is allowed to substitute one selector.
            </summary>
            <param name="selectors">Selectors to add.</param>
            <param name="oldSelectorType">Previous value for a substituted selector type upon return. Null if none.</param>
            <param name="oldSelectorName">Previous value for a substituted selector name upon return. Null if none.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.RemoveOrRestoreSelectors(EaslyController.Focus.IFocusFrameSelectorList,System.Type,System.String)">
            <summary>
            Removes selectors from the table.
            This method is allowed to substitute one selector substituted with <see cref="M:EaslyController.Focus.IFocusCellViewTreeContext.AddOrReplaceSelectors(EaslyController.Focus.IFocusFrameSelectorList,System.Type@,System.String@)"/>.
            </summary>
            <param name="selectors">Selectors to add.</param>
            <param name="oldSelectorType">Previous value for a substituted selector type.</param>
            <param name="oldSelectorName">Previous value for a substituted selector name.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.ChangeIsUserVisible(System.Boolean,System.Boolean@)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.IFocusCellViewTreeContext.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
            <param name="oldValue">The previous value.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.RestoreIsUserVisible(System.Boolean)">
            <summary>
            Restores the <see cref="P:EaslyController.Focus.IFocusCellViewTreeContext.IsUserVisible"/> flag previously set with <see cref="M:EaslyController.Focus.IFocusCellViewTreeContext.ChangeIsUserVisible(System.Boolean,System.Boolean@)"/>.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusCellViewTreeContext.CheckCommentForced(System.Boolean@)">
            <summary>
            Checks if a comment is forced for the current state view. If true, <see cref="P:EaslyController.Focus.IFocusCellViewTreeContext.ForcedCommentStateView"/> is reset to null.
            </summary>
            <param name="isCommentForced">True upon return if forced.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusCellViewTreeContext">
            <summary>
            Context used when building the cell view tree.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.#ctor(EaslyController.Frame.IFrameControllerView,EaslyController.Frame.IFrameNodeStateView,EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCellViewTreeContext"/> class.
            </summary>
            <param name="controllerView">The view in which cells are created.</param>
            <param name="stateView">The state view for which to create cells.</param>
            <param name="forcedCommentStateView">The state view for which the comment must be visible, even if empty.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.ControllerView">
            <summary>
            The view in which cells are created.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.StateView">
            <summary>
            The state view for which to create cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.BlockStateView">
            <summary>
            The block state view for which to create cells. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.ForcedCommentStateView">
            <summary>
            The state view for which the comment must be visible, even if empty.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.IsFrameVisible">
            <summary>
            True if cells are shown ccording to the frame visibility.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.IsUserVisible">
            <summary>
            True if the user requested to see elements that are otherwise not shown.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.IsVisible">
            <summary>
            True if visibility allow the cell tree to be visible.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCellViewTreeContext.SelectorTable">
            <summary>
            Table of selectors for child frames.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.UpdateNodeFrameVisibility(EaslyController.Focus.IFocusNodeFrameWithVisibility,System.Boolean@)">
            <summary>
            Update the current visibility of frames.
            </summary>
            <param name="frame">The frame with the visibility to check.</param>
            <param name="oldFrameVisibility">The previous visibility upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.UpdateBlockFrameVisibility(EaslyController.Focus.IFocusBlockFrameWithVisibility,System.Boolean@)">
            <summary>
            Update the current visibility of frames.
            </summary>
            <param name="frame">The frame with the visibility to check.</param>
            <param name="oldFrameVisibility">The previous visibility upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.RestoreFrameVisibility(System.Boolean)">
            <summary>
            Restores the frame visibility that was changed with <see cref="M:EaslyController.Focus.FocusCellViewTreeContext.UpdateNodeFrameVisibility(EaslyController.Focus.IFocusNodeFrameWithVisibility,System.Boolean@)"/> or <see cref="M:EaslyController.Focus.FocusCellViewTreeContext.UpdateBlockFrameVisibility(EaslyController.Focus.IFocusBlockFrameWithVisibility,System.Boolean@)"/>.
            </summary>
            <param name="oldFrameVisibility">The previous visibility</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.AddSelectors(EaslyController.Focus.IFocusFrameSelectorList)">
            <summary>
            Adds new selectors to the table.
            </summary>
            <param name="selectors">Selectors to add.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.RemoveSelectors(EaslyController.Focus.IFocusFrameSelectorList)">
            <summary>
            Removes selectors from the table.
            </summary>
            <param name="selectors">Selectors to add.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.AddOrReplaceSelectors(EaslyController.Focus.IFocusFrameSelectorList,System.Type@,System.String@)">
            <summary>
            Adds new selectors to the table. This method is allowed to substitute one selector.
            </summary>
            <param name="selectors">Selectors to add.</param>
            <param name="oldSelectorType">Previous value for a substituted selector type upon return. Null if none.</param>
            <param name="oldSelectorName">Previous value for a substituted selector name upon return. Null if none.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.RemoveOrRestoreSelectors(EaslyController.Focus.IFocusFrameSelectorList,System.Type,System.String)">
            <summary>
            Removes selectors from the table.
            This method is allowed to substitute one selector substituted with <see cref="M:EaslyController.Focus.FocusCellViewTreeContext.AddOrReplaceSelectors(EaslyController.Focus.IFocusFrameSelectorList,System.Type@,System.String@)"/>.
            </summary>
            <param name="selectors">Selectors to add.</param>
            <param name="oldSelectorType">Previous value for a substituted selector type.</param>
            <param name="oldSelectorName">Previous value for a substituted selector name.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.ChangeIsUserVisible(System.Boolean,System.Boolean@)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.FocusCellViewTreeContext.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
            <param name="oldValue">The previous value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.RestoreIsUserVisible(System.Boolean)">
            <summary>
            Restores the <see cref="P:EaslyController.Focus.FocusCellViewTreeContext.IsUserVisible"/> flag previously set with <see cref="M:EaslyController.Focus.FocusCellViewTreeContext.ChangeIsUserVisible(System.Boolean,System.Boolean@)"/>.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCellViewTreeContext.CheckCommentForced(System.Boolean@)">
            <summary>
            Checks if a comment is forced for the current state view. If true, <see cref="P:EaslyController.Focus.FocusCellViewTreeContext.ForcedCommentStateView"/> is reset to null.
            </summary>
            <param name="isCommentForced">True upon return if forced.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockListSelection">
            <summary>
            A selection of blocks in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockListSelection.StartIndex">
            <summary>
            Index of the first selected block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockListSelection.EndIndex">
            <summary>
            Index following the last selected block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusBlockListSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the selection with new start and end index values.
            </summary>
            <param name="startIndex">The new start index value.</param>
            <param name="endIndex">The new end index value.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockListSelection">
            <summary>
            A selection of blocks in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListSelection.#ctor(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockListSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first selected block.</param>
            <param name="endIndex">Index following the last selected block.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListSelection.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListSelection.StartIndex">
            <summary>
            Index of the first selected block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListSelection.EndIndex">
            <summary>
            Index following the last selected block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the selection with new start and end index values.
            </summary>
            <param name="startIndex">The new start index value.</param>
            <param name="endIndex">The new end index value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListSelection.CreateNewBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Creates a IxxxInsertionNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListSelection.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCommentSelection">
            <summary>
            A selection of part of a comment.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCommentSelection">
            <summary>
            A selection of part of a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentSelection.#ctor(EaslyController.Focus.IFocusNodeStateView,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCommentSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="start">Index of the first character in the selected text.</param>
            <param name="end">Index following the last character in the selected text.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentSelection.Start">
            <summary>
            Index of the first character in the selected text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentSelection.End">
            <summary>
            Index following the last character in the selected text.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the text selection with new start and end values.
            </summary>
            <param name="start">The new start value.</param>
            <param name="end">The new end value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockNodeListSelection">
            <summary>
            A selection of nodes in a block of a list block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockNodeListSelection.BlockIndex">
            <summary>
            Index of the block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockNodeListSelection.StartIndex">
            <summary>
            Index of the first selected node in the block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockNodeListSelection.EndIndex">
            <summary>
            Index following the last selected node in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusBlockNodeListSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the selection with new start and end index values.
            </summary>
            <param name="startIndex">The new start index value.</param>
            <param name="endIndex">The new end index value.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockNodeListSelection">
            <summary>
            A selection of nodes in a block of a list block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockNodeListSelection.#ctor(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockNodeListSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="blockIndex">Index of the block.</param>
            <param name="startIndex">Index of the first selected node in the block.</param>
            <param name="endIndex">Index following the last selected node in the block.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockNodeListSelection.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockNodeListSelection.BlockIndex">
            <summary>
            Index of the block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockNodeListSelection.StartIndex">
            <summary>
            Index of the first selected node in the block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockNodeListSelection.EndIndex">
            <summary>
            Index following the last selected node in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockNodeListSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the selection with new start and end index values.
            </summary>
            <param name="startIndex">The new start index value.</param>
            <param name="endIndex">The new end index value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockNodeListSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockNodeListSelection.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeListSelection">
            <summary>
            A selection of nodes in a list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeListSelection.StartIndex">
            <summary>
            Index of the first selected node in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeListSelection.EndIndex">
            <summary>
            Index following the last selected node in the list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeListSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the selection with new start and end index values.
            </summary>
            <param name="startIndex">The new start index value.</param>
            <param name="endIndex">The new end index value.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeListSelection">
            <summary>
            A selection of nodes in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeListSelection.#ctor(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusNodeListSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first selected node in the list.</param>
            <param name="endIndex">Index following the last selected node in the list.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeListSelection.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeListSelection.StartIndex">
            <summary>
            Index of the first selected node in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeListSelection.EndIndex">
            <summary>
            Index following the last selected node in the list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeListSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the selection with new start and end index values.
            </summary>
            <param name="startIndex">The new start index value.</param>
            <param name="endIndex">The new end index value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeListSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeListSelection.CreateListNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusEmptySelection">
            <summary>
            An empty selection.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusEmptySelection">
            <summary>
            An empty selection.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptySelection.#ctor(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusEmptySelection"/> class.
            </summary>
            <param name="stateView">The selected state view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptySelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptySelection.CreateListNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptySelection.CreateNewBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Creates a IxxxInsertionNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusEmptySelection.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeSelection">
            <summary>
            A selection of a node an all its content and children.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeSelection">
            <summary>
            A selection of a node an all its content and children.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeSelection.#ctor(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusNodeSelection"/> class.
            </summary>
            <param name="stateView">The selected state view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusDiscreteContentSelection">
            <summary>
            A selection of discrete property (enum or boolean).
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusDiscreteContentSelection">
            <summary>
            A selection of discrete property (enum or boolean).
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentSelection.#ctor(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusDiscreteContentSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteContentSelection.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusStringContentSelection">
            <summary>
            A selection of part of a string property.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusStringContentSelection">
            <summary>
            A selection of part of a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentSelection.#ctor(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusStringContentSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="start">Index of the first character in the selected text.</param>
            <param name="end">Index following the last character in the selected text.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentSelection.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentSelection.Start">
            <summary>
            Index of the first character in the selected text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentSelection.End">
            <summary>
            Index following the last character in the selected text.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the text selection with new start and end values.
            </summary>
            <param name="start">The new start value.</param>
            <param name="end">The new end value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentSelection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusContentSelection">
            <summary>
            A selection of a property of a node, or a partial selection for text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusContentSelection.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTextSelection">
            <summary>
            A selection of text, either in a string property or comment.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTextSelection.Start">
            <summary>
            Index of the first character in the selected text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTextSelection.End">
            <summary>
            Index following the last character in the selected text.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusTextSelection.Update(System.Int32,System.Int32)">
            <summary>
            Updates the text selection with new start and end values.
            </summary>
            <param name="start">The new start value.</param>
            <param name="end">The new end value.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusSelection">
            <summary>
            A selection of part of a node value, or a selection of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSelection">
            <summary>
            A selection of part of a node value, or a selection of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSelection.#ctor(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusController">
            <summary>
            Controller for a node tree.
            This controller supports:
            * Operations to modify the tree.
            * Organizing nodes and their content in cells, assigning line and column numbers.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusController.CycleManagerList">
            <summary>
            List of supported cycle managers.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusController.IsMemberOfCycle(EaslyController.Focus.IFocusNodeState,EaslyController.Focus.IFocusCycleManager@)">
            <summary>
            Checks whether a node is member of a supported cycle.
            </summary>
            <param name="state">State corresponding to the node to check.</param>
            <param name="cycleManager">The cycle manager for this node type upon return. Null if none.</param>
            <returns>True if a cycle manager exists for the node.</returns>
        </member>
        <member name="M:EaslyController.Focus.IFocusController.Replace(EaslyController.Focus.IFocusInner,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,EaslyController.Focus.IFocusBrowsingChildIndex@)">
            <summary>
            Replace an existing node with a new one, keeping its cycle.
            </summary>
            <param name="inner">The inner where the node is replaced.</param>
            <param name="cycleIndexList">Cycle of nodes that can replace the current node.</param>
            <param name="cyclePosition">New position in the cycle.</param>
            <param name="nodeIndex">Index of the replacing node upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusController.ChangeTextAndCaretPosition(EaslyController.Focus.IFocusIndex,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes the value of a text.
            </summary>
            <param name="nodeIndex">Index of the state with the string to change.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusController.ChangeCommentAndCaretPosition(EaslyController.Focus.IFocusIndex,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes the value of a comment.
            </summary>
            <param name="nodeIndex">Index of the state with the comment to change.</param>
            <param name="text">The new text.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusController">
            <summary>
            Controller for a node tree.
            This controller supports:
            * Operations to modify the tree.
            * Organizing nodes and their content in cells, assigning line and column numbers.
            * Keeping the focus in a cell.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.Create(EaslyController.Focus.IFocusRootNodeIndex)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Focus.FocusController"/> object.
            </summary>
            <param name="nodeIndex">Index of the root of the node tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusController"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusController.CycleManagerList">
            <summary>
            List of supported cycle managers.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.IsMemberOfCycle(EaslyController.Focus.IFocusNodeState,EaslyController.Focus.IFocusCycleManager@)">
            <summary>
            Checks whether a node is member of a supported cycle.
            </summary>
            <param name="state">State corresponding to the node to check.</param>
            <param name="cycleManager">The cycle manager for this node type upon return. Null if none.</param>
            <returns>True if a cycle manager exists for the node.</returns>
        </member>
        <member name="M:EaslyController.Focus.FocusController.Replace(EaslyController.Focus.IFocusInner,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,EaslyController.Focus.IFocusBrowsingChildIndex@)">
            <summary>
            Replace an existing node with a new one, keeping its cycle.
            </summary>
            <param name="inner">The inner where the node is replaced.</param>
            <param name="cycleIndexList">Cycle of nodes that can replace the current node.</param>
            <param name="cyclePosition">New position in the cycle.</param>
            <param name="nodeIndex">Index of the replacing node upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusController.ChangeTextAndCaretPosition(EaslyController.Focus.IFocusIndex,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes the value of a text.
            </summary>
            <param name="nodeIndex">Index of the state with the string to change.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusController.ChangeCommentAndCaretPosition(EaslyController.Focus.IFocusIndex,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes the value of a comment.
            </summary>
            <param name="nodeIndex">Index of the state with the comment to change.</param>
            <param name="text">The new text.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChildStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateBrowseContext(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxxBrowseContext object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreatePlaceholderInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex})">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateOptionalInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex})">
            <summary>
            Creates a IxxxOptionalInner{IxxxBrowsingOptionalNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex})">
            <summary>
            Creates a IxxxListInner{IxxxBrowsingListNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateBlockListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex})">
            <summary>
            Creates a IxxxBlockListInner{IxxxBrowsingBlockNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateRootNodeState(EaslyController.ReadOnly.IReadOnlyRootNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateNewOptionalNodeIndex(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxWriteableInsertionOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateInsertNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateInsertBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateRemoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateRemoveBlockViewOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockViewOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateRemoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateReplaceOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateAssignmentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChangeDiscreteValueOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChangeTextOperation(BaseNode.INode,System.String,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChangeTextOperation(BaseNode.INode,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChangeCommentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChangeCommentOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateChangeBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateSplitBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateMergeBlocksOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateMoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateMoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateExpandArgumentOperation(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxExpandArgumentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateGenericRefreshOperation(EaslyController.Writeable.IWriteableNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxGenericRefreshOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateOperationGroupStack">
            <summary>
            Creates a IxxxOperationGroupList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateOperationList">
            <summary>
            Creates a IxxxOperationList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateOperationGroup(EaslyController.Writeable.IWriteableOperationReadOnlyList,EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Creates a IxxxOperationGroup object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateReplaceWithCycleOperation(BaseNode.INode,System.String,System.Int32,System.Int32,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceWithCycleOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateCycleManagerList">
            <summary>
            Creates a IxxxCycleManagerList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateCycleManagerBody">
            <summary>
            Creates a IxxxCycleManagerBody object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusController.CreateCycleManagerFeature">
            <summary>
            Creates a IxxxCycleManagerFeature object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeCommentOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusChangeCommentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="text">The new comment.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeCommentOperation.OldCaretPosition">
            <summary>
            The old caret position.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeCommentOperation.NewCaretPosition">
            <summary>
            The new caret position.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeCommentOperation.ChangeCaretBeforeText">
            <summary>
            True if the caret should be changed before the text, to preserve the caret invariant.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeCommentOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change commment operation.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeCommentOperation.CreateChangeCommentOperation(System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusChangeCaretOperation">
            <summary>
            Operation details for changing the caret in a string property or comment.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeCaretOperation.OldCaretPosition">
            <summary>
            The old caret position.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeCaretOperation.NewCaretPosition">
            <summary>
            The new caret position.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeCaretOperation.ChangeCaretBeforeText">
            <summary>
            True if the caret should be changed before the text, to preserve the caret invariant.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeTextOperation.#ctor(BaseNode.INode,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusChangeTextOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeTextOperation.OldCaretPosition">
            <summary>
            The old caret position.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeTextOperation.NewCaretPosition">
            <summary>
            The new caret position.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeTextOperation.ChangeCaretBeforeText">
            <summary>
            True if the caret should be changed before the text, to preserve the caret invariant.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeTextOperation.ToInverseChange">
            <summary>
            Creates an operation to undo the change text operation.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeTextOperation.CreateChangeTextOperation(System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusGenericRefreshOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusGenericRefreshOperation">
            <summary>
            Operation details for replacing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusGenericRefreshOperation.#ctor(EaslyController.Focus.IFocusNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusGenericRefreshOperation"/> class.
            </summary>
            <param name="refreshState">State in the source where to start refresh.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusAssignmentOperation.#ctor(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusAssignmentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the assignment is taking place.</param>
            <param name="propertyName">Optional property of <paramref name="parentNode"/> for which assignment is changed.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusAssignmentOperation.CreateAssignmentOperation(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusExpandArgumentOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusExpandArgumentOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusExpandArgumentOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusExpandArgumentOperation.#ctor(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusExpandArgumentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted item.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusExpandArgumentOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusExpandArgumentOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusExpandArgumentOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusExpandArgumentOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="blockIndex">Index of the inserted block.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertBlockOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the insertion is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is inserted.</param>
            <param name="blockIndex">Block position where the node is inserted, if applicable.</param>
            <param name="index">Position where the node is inserted.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertNodeOperation.CreateRemoveNodeOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMergeBlocksOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusMergeBlocksOperation"/> class.
            </summary>
            <param name="parentNode">Node where the blocks are merged.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where blocks are merged.</param>
            <param name="blockIndex">Position of the merged block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMergeBlocksOperation.CreateSplitBlockOperation(System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusMoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is moved.</param>
            <param name="blockIndex">Index of the moved block.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMoveBlockOperation.CreateMoveBlockOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusMoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the node is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is moved.</param>
            <param name="blockIndex">Block position where the node is moved, if applicable.</param>
            <param name="index">The current position before move.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMoveNodeOperation.CreateMoveNodeOperation(System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusRemoveBlockViewOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusRemoveBlockViewOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRemoveBlockViewOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusRemoveBlockViewOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRemoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusRemoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRemoveBlockOperation.CreateInsertBlockOperation(System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusRemoveNodeOperation.RemovedState">
            <summary>
            State removed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRemoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusRemoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the removal is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is removed.</param>
            <param name="blockIndex">Block position where the node is removed, if applicable.</param>
            <param name="index">Position of the removed node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusRemoveNodeOperation.RemovedState">
            <summary>
            State removed.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRemoveNodeOperation.CreateInsertNodeOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRemoveOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusRemoveOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusReplaceWithCycleOperation">
            <summary>
            Operation details for replacing a node with another from a cycle.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusReplaceWithCycleOperation.CycleIndexList">
            <summary>
            Cycle of nodes that can replace the current node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusReplaceWithCycleOperation.NewCyclePosition">
            <summary>
            New position in the cycle.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusReplaceWithCycleOperation.OldCyclePosition">
            <summary>
            Old position in the cycle.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusReplaceWithCycleOperation">
            <summary>
            Operation details for replacing a node with another from a cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusReplaceWithCycleOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusReplaceWithCycleOperation"/> class.
            </summary>
            <param name="parentNode">Node where the replacement is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is replaced.</param>
            <param name="blockIndex">Block position where the node is replaced, if applicable.</param>
            <param name="index">Position where the node is replaced, if applicable.</param>
            <param name="cycleIndexList">Cycle of nodes that can replace the current node.</param>
            <param name="cyclePosition">New position in the cycle.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusReplaceWithCycleOperation.CycleIndexList">
            <summary>
            Cycle of nodes that can replace the current node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusReplaceWithCycleOperation.NewCyclePosition">
            <summary>
            New position in the cycle.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusReplaceWithCycleOperation.OldCyclePosition">
            <summary>
            Old position in the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusReplaceWithCycleOperation.Update(EaslyController.Writeable.IWriteableBrowsingChildIndex,EaslyController.Writeable.IWriteableBrowsingChildIndex,BaseNode.INode,EaslyController.Writeable.IWriteableNodeState)">
            <summary>
            Update the operation with details.
            </summary>
            <param name="oldBrowsingIndex">Index of the state before it's replaced.</param>
            <param name="newBrowsingIndex">Index of the state after it's replaced.</param>
            <param name="oldNode">The old node. Can be null if optional and replaced.</param>
            <param name="newChildState">The new state.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusReplaceWithCycleOperation.ToInverseReplace">
            <summary>
            Creates an operation to undo the replace operation.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusReplaceWithCycleOperation.CreateReplaceWithCycleOperation(System.Int32,System.Int32,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusReplaceOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusReplaceOperation"/> class.
            </summary>
            <param name="parentNode">Node where the replacement is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is replaced.</param>
            <param name="blockIndex">Block position where the node is replaced, if applicable.</param>
            <param name="index">Position where the node is replaced, if applicable.</param>
            <param name="newNode">The new node. Null to clear an optional node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusReplaceOperation.CreateReplaceOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSplitBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusSplitBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is split.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is split.</param>
            <param name="blockIndex">Position of the split block.</param>
            <param name="index">Position of the last node to stay in the old block.</param>
            <param name="newBlock">The inserted block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSplitBlockOperation.CreateMergeBlocksOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeDiscreteValueOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusChangeDiscreteValueOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="value">The new value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeDiscreteValueOperation.CreateChangeDiscreteValueOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusChangeBlockOperation">
            <summary>
            Operation details for changing a block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusChangeBlockOperation">
            <summary>
            Operation details for changing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusChangeBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block change is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> for which a block is changed.</param>
            <param name="blockIndex">Index of the changed block.</param>
            <param name="replication">New replication value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusChangeBlockOperation.CreateChangeBlockOperation(BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOperationGroup.#ctor(EaslyController.Focus.IFocusOperationReadOnlyList,EaslyController.Focus.IFocusGenericRefreshOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusOperationGroup"/> class.
            </summary>
            <param name="operationList">List of operations belonging to this group.</param>
            <param name="refresh">Optional refresh operation to execute at the end of undo and redo.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCycleManagerFeature">
            <summary>
            Cycle manager for IFeature nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCycleManagerFeature">
            <summary>
            Cycle manager for IFeature nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCycleManagerFeature.InterfaceType">
            <summary>
            Type of the base interface for all nodes participating to the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCycleManagerFeature.AddNextNodeToCycle(EaslyController.Focus.IFocusCyclableNodeState)">
            <summary></summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCycleManagerBody">
            <summary>
            Cycle manager for IBody nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCycleManagerBody">
            <summary>
            Cycle manager for IBody nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCycleManagerBody.InterfaceType">
            <summary>
            Type of the base interface for all nodes participating to the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCycleManagerBody.AddNextNodeToCycle(EaslyController.Focus.IFocusCyclableNodeState)">
            <summary></summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCycleManager">
            <summary>
            Base interface for cycle managers.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCycleManager.InterfaceType">
            <summary>
            Type of the base interface for all nodes participating to the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusCycleManager.AddNodeToCycle(EaslyController.Focus.IFocusCyclableNodeState)">
            <summary>
            Adds a new node to the list of nodes that can replace the current one. Does nothing if all types of nodes have been added.
            Applies only to bodies and features.
            </summary>
            <param name="state">The state to update.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusCycleManager">
            <summary>
            Base class for cycle managers.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCycleManager.InterfaceType">
            <summary>
            Type of the base interface for all nodes participating to the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCycleManager.AddNodeToCycle(EaslyController.Focus.IFocusCyclableNodeState)">
            <summary>
            Adds a new node to the list of nodes that can replace the current one. Does nothing if all types of nodes have been added.
            Applies only to bodies and features.
            </summary>
            <param name="state">The state to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCycleManager.AddNextNodeToCycle(EaslyController.Focus.IFocusCyclableNodeState)">
            <summary></summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusDiscreteContentFocus">
            <summary>
            Focus on a discrete content focusable cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusDiscreteContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusDiscreteContentFocus">
            <summary>
            Focus on a discrete content focusable cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentFocus.#ctor(EaslyController.Focus.IFocusDiscreteContentFocusableCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusDiscreteContentFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteContentFocus.ToString">
            <summary>
            Returns a string representation of this focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCommentFocus">
            <summary>
            Focus on a comment cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCommentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCommentFocus">
            <summary>
            Focus on a comment cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFocus.#ctor(EaslyController.Focus.IFocusCommentCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCommentFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFocus.ToString">
            <summary>
            Returns a string representation of this focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTextFocus">
            <summary>
            Focus on a text focusable cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTextFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusStringContentFocus">
            <summary>
            Focus on a cell view for a string property.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusStringContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusStringContentFocus">
            <summary>
            Focus on a cell view for a string property.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentFocus.#ctor(EaslyController.Focus.IFocusStringContentFocusableCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusStringContentFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStringContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStringContentFocus.ToString">
            <summary>
            Returns a string representation of this focus.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusFocus">
            <summary>
            Base focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusFocus.GetLocationInSourceCode(BaseNode.INode@,EaslyController.Focus.IFocusFrame@)">
            <summary>
            Get the location in the source code corresponding to this focus.
            </summary>
            <param name="node">The node in the source code upon return.</param>
            <param name="frame">The frame in the template associated to <paramref name="node"/> that indicates where in the node is the focus upon return.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusFocus">
            <summary>
            Base focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFocus.#ctor(EaslyController.Focus.IFocusFocusableCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFocus.GetLocationInSourceCode(BaseNode.INode@,EaslyController.Focus.IFocusFrame@)">
            <summary>
            Get the location in the source code corresponding to this focus.
            </summary>
            <param name="node">The node in the source code upon return.</param>
            <param name="frame">The frame in the template associated to <paramref name="node"/> that indicates where in the node is the focus upon return.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusFocus.Hash">
            <summary>
            A hash code for debug purpose.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockFrameVisibility">
            <summary>
            Base frame visibility for block frames.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusBlockFrameVisibility.IsBlockVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusBlockFrame)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalFrameVisibility">
            <summary>
            Frame visibility that depends if an optional node is assigned.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOptionalFrameVisibility.PropertyName">
            <summary>
            Name of the collection property.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOptionalFrameVisibility">
            <summary>
            Frame visibility that depends if an optional node is assigned.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrameVisibility.PropertyName">
            <summary>
            Name of the collection property.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusMixedFrameVisibility">
            <summary>
            Frame visibility that shows if one frame visibility among a list does.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusMixedFrameVisibility.Items">
            <summary>
            List of frame visibilities that must be satisfied at least for one.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusMixedFrameVisibility">
            <summary>
            Frame visibility that shows if one frame visibility among a list does.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMixedFrameVisibility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusMixedFrameVisibility"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusMixedFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusMixedFrameVisibility.Items">
            <summary>
            List of frame visibilities that must be satisfied at least for one.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusMixedFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusMixedFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusMixedFrameVisibility.CreateNodeFrameVisibilityList">
            <summary>
            Creates a IxxxNodeFrameVisibilityList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTextMatchFrameVisibility">
            <summary>
            Frame visibility that depends on the IsTextMatch template property.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTextMatchFrameVisibility.PropertyName">
            <summary>
            Name of the string property to check.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTextMatchFrameVisibility.TextPattern">
            <summary>
            Text that must match to show the frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusTextMatchFrameVisibility">
            <summary>
            Frame visibility that depends on the IsTextMatch template property.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextMatchFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextMatchFrameVisibility.PropertyName">
            <summary>
            Name of the string property to check.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextMatchFrameVisibility.TextPattern">
            <summary>
            Text that must match to show the frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTextMatchFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTextMatchFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeFrameVisibility">
            <summary>
            Base frame visibility for node frames.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusReplicationFrameVisibility">
            <summary>
            Frame visibility that depends if the current block is replicated.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusReplicationFrameVisibility">
            <summary>
            Frame visibility that depends if the current block is replicated.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusReplicationFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusReplicationFrameVisibility.IsBlockVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusBlockFrame)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusNotFirstItemFrameVisibility">
            <summary>
            Frame visibility that depends if the current state is not the first in the parent.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNotFirstItemFrameVisibility">
            <summary>
            Frame visibility that depends if the current state is not the first in the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNotFirstItemFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNotFirstItemFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNotFirstItemFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusDefaultDiscreteFrameVisibility">
            <summary>
            Frame visibility that depends if an enum or boolean has the default value.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusDefaultDiscreteFrameVisibility.PropertyName">
            <summary>
            Name of the enum or boolean property.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusDefaultDiscreteFrameVisibility.DefaultValue">
            <summary>
            Default value as int.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusDefaultDiscreteFrameVisibility">
            <summary>
            Frame visibility that depends if an enum or boolean has the default value.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDefaultDiscreteFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDefaultDiscreteFrameVisibility.PropertyName">
            <summary>
            Name of the enum or boolean property.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDefaultDiscreteFrameVisibility.DefaultValue">
            <summary>
            Default value as int.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDefaultDiscreteFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDefaultDiscreteFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusCountFrameVisibility">
            <summary>
            Frame visibility that depends if a collection has at least one item.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCountFrameVisibility.PropertyName">
            <summary>
            Name of the collection property.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCountFrameVisibility.MaxInvisibleCount">
            <summary>
            Max count before the frame becomes visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCountFrameVisibility">
            <summary>
            Frame visibility that depends if a collection has at least one item.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCountFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCountFrameVisibility.PropertyName">
            <summary>
            Name of the collection property.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCountFrameVisibility.MaxInvisibleCount">
            <summary>
            Max count before the frame becomes visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCountFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCountFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusComplexFrameVisibility">
            <summary>
            Frame visibility that depends on the IsComplex template property.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusComplexFrameVisibility.PropertyName">
            <summary>
            Name of the property that can be complex or not.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusComplexFrameVisibility">
            <summary>
            Frame visibility that depends on the IsComplex template property.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusComplexFrameVisibility.IsVolatile">
            <summary>
            True if the visibility depends on the show/hidden state of the view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusComplexFrameVisibility.PropertyName">
            <summary>
            Name of the property that can be complex or not.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusComplexFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusComplexFrameVisibility.IsVisible(EaslyController.Focus.IFocusCellViewTreeContext,EaslyController.Focus.IFocusNodeFrameWithVisibility)">
            <summary>
            Is the associated frame visible.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="frame">The frame with the associated visibility.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusFrameVisibility">
            <summary>
            Base frame visibility.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusFrameVisibility">
            <summary>
            Base frame visibility.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFrameVisibility.IsValid(System.Type)">
            <summary>
            Checks that a frame visibility is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame visibility can describe.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockFrame">
            <summary>
            Frame for cells within a block.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockListFrame">
            <summary>
            Base frame for a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockListFrame">
            <summary>
            Base frame for a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockListFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCharacterFrame">
            <summary>
            Frame describing a single-character string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCharacterFrame">
            <summary>
            Frame describing a single-character string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCharacterFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCharacterFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCharacterFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCharacterFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCharacterFrame.AutoFormat">
            <summary>
            If true, automatically format text.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCharacterFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCharacterFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCharacterFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCharacterFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCharacterFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCharacterFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCollectionPlaceholderFrame">
            <summary>
            Base frame for a placeholder node in a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCollectionPlaceholderFrame">
            <summary>
            Base frame for a placeholder node in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCollectionPlaceholderFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCollectionPlaceholderFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCollectionPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCollectionPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCollectionPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCollectionPlaceholderFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCollectionPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusDiscreteFrame">
            <summary>
            Frame describing an enum value that can be displayed with different frames depending on its value.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusDiscreteFrame.Items">
            <summary>
            List of frames that can be displayed.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusDiscreteFrame">
            <summary>
            Frame describing an enum value that can be displayed with different frames depending on its value.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteFrame.Items">
            <summary>
            List of frames that can be displayed.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusDiscreteFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.CreateKeywordFrameList">
            <summary>
            Creates a IxxxKeywordFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.CreateDiscreteContentFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameKeywordFrame)">
            <summary>
            Creates a IxxxDiscreteContentFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusDiscreteFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusFrame">
            <summary>
            Base frame.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusFrame">
            <summary>
            Base frame.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFrame.FocusRoot">
            <summary>
            Singleton object representing the root of a tree of frames.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockFrameWithVisibility">
            <summary>
            Block Frame that can have a custom visibility.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockFrameWithVisibility.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSelectorPropertyFrame">
            <summary>
            Frame that can have a property associated to a selector (or children).
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusSelectorPropertyFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusFrameWithSelector">
            <summary>
            Frame that can have selectors.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusFrameWithSelector.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeFrameWithVisibility">
            <summary>
            Frame that can have a custom visibility.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeFrameWithVisibility.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeFrameWithVisibility.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusHorizontalBlockListFrame">
            <summary>
            Frame for a block list displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusHorizontalBlockListFrame">
            <summary>
            Frame for a block list displayed horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusHorizontalBlockListFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalBlockListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalBlockListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalBlockListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalBlockListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalBlockListFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalBlockListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusHorizontalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalCollectionPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusHorizontalListFrame">
            <summary>
            Base frame for a list of nodes displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusHorizontalListFrame">
            <summary>
            Base frame for a list of nodes displayed horizontally.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusHorizontalListFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalListFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusHorizontalPanelFrame">
            <summary>
            Frame for displaying more frames horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusHorizontalPanelFrame">
            <summary>
            Frame for displaying more frames horizontally.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalPanelFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalPanelFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalPanelFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalPanelFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusHorizontalPanelFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.CreateItems">
            <summary>
            Creates a IxxxFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFramePlaceholderFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusHorizontalPanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertFrame">
            <summary>
            Frame for bringing the focus to an insertion point.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertFrame.ItemType">
            <summary>
            Type to use when creating a new item in the associated block list or list. Only when it's an abstract type.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInsertFrame.InsertType">
            <summary>
            Type to use when inserting a new item in the collection.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusInsertFrame.CollectionNameToInner(EaslyController.Focus.IFocusNodeState@,EaslyController.Focus.IFocusCollectionInner@)">
            <summary>
            Returns the inner for the collection associated to this frame, for a given state.
            </summary>
            <param name="state">The state, modified if <see cref="P:EaslyController.Frame.IFrameInsertFrame.CollectionName"/> points to a different state.</param>
            <param name="inner">The inner associated to the collection in <paramref name="state"/>.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertFrame">
            <summary>
            Frame for bringing the focus to an insertion point.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertFrame.ItemType">
            <summary>
            Type to use when creating a new item in the associated block list or list. Only when it's an abstract type.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusInsertFrame.InsertType">
            <summary>
            Type to use when inserting a new item in the collection.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.CollectionNameToInner(EaslyController.Focus.IFocusNodeState@,EaslyController.Focus.IFocusCollectionInner@)">
            <summary>
            Returns the inner for the collection associated to this frame, for a given state.
            </summary>
            <param name="state">The state, modified if <see cref="P:EaslyController.Frame.IFrameInsertFrame.CollectionName"/> points to a different state.</param>
            <param name="inner">The inner associated to the collection in <paramref name="state"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.CreateFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusKeywordFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusKeywordFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusKeywordFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusKeywordFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusKeywordFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusKeywordFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusKeywordFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.CreateFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxVisibleCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusKeywordFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusListFrame">
            <summary>
            Base frame for a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusListFrame">
            <summary>
            Base frame for a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusListFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNamedFrame">
            <summary>
            Base frame for frames that describe property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNamedFrame">
            <summary>
            Base frame for frames that describe property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNamedFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNamedFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeFrame">
            <summary>
            Frame for cells within a single node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusNumberFrame">
            <summary>
            Frame describing a number string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNumberFrame">
            <summary>
            Frame describing a number string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNumberFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNumberFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNumberFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNumberFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNumberFrame.AutoFormat">
            <summary>
            If true, automatically format text.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNumberFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNumberFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNumberFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNumberFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNumberFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNumberFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalFrame">
            <summary>
            Frame for describing an optional child node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOptionalFrame">
            <summary>
            Frame for describing an optional child node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusOptionalFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPanelFrame">
            <summary>
            Base frame for displaying more frames.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPanelFrame">
            <summary>
            Base frame for displaying more frames.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPanelFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPanelFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPanelFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPanelFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPanelFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPanelFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPanelFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPanelFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderFrame">
            <summary>
            Frame for describing an child node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPlaceholderFrame">
            <summary>
            Frame for describing an child node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusPlaceholderFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSelectableFrame">
            <summary>
            Frame selectable by name.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSelectableFrame.Content">
            <summary>
            The selectable frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSelectableFrame.Name">
            <summary>
            Frame name for selection.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSelectableFrame">
            <summary>
            Frame selectable by name.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSelectableFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSelectableFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSelectableFrame.Content">
            <summary>
            The selectable frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSelectableFrame.Name">
            <summary>
            Frame name for selection.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectableFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectableFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectableFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectableFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectableFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusSelectionFrame">
            <summary>
            Frame selecting sub-frames.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSelectionFrame.Items">
            <summary>
            List of frames among which to select.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSelectionFrame">
            <summary>
            Frame selecting sub-frames.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusSelectionFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSelectionFrame.Items">
            <summary>
            List of frames among which to select.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSelectionFrame.CreateSelectableFrameList">
            <summary>
            Creates a IxxxSelectableFrameList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusStaticFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusStaticFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStaticFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStaticFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStaticFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusStaticFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusStaticFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusStaticFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusStaticFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusStaticFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusSymbolFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSymbolFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSymbolFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSymbolFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSymbolFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSymbolFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSymbolFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSymbolFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSymbolFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSymbolFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSymbolFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxVisibleCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSymbolFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTextValueFrame">
            <summary>
            Frame describing a string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTextValueFrame.AutoFormat">
            <summary>
            If true, automatically format text.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusTextValueFrame">
            <summary>
            Frame describing a string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextValueFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextValueFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextValueFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextValueFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTextValueFrame.AutoFormat">
            <summary>
            If true, automatically format text.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTextValueFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTextValueFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTextValueFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTextValueFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTextValueFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTextValueFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusValueFrame">
            <summary>
            Frame describing a value property (or string) in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusValueFrame">
            <summary>
            Frame describing a value property (or string) in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusValueFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusValueFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusValueFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusValueFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusValueFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusValueFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusVerticalBlockListFrame">
            <summary>
            Frame for a block list displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusVerticalBlockListFrame">
            <summary>
            Frame for a block list displayed vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusVerticalBlockListFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalBlockListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalBlockListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalBlockListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalBlockListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalBlockListFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalBlockListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusVerticalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalCollectionPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusVerticalListFrame">
            <summary>
            Base frame for a list of nodes displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusVerticalListFrame">
            <summary>
            Base frame for a list of nodes displayed vertically.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusVerticalListFrame"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalListFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusVerticalPanelFrame">
            <summary>
            Frame for displaying more frames vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusVerticalPanelFrame">
            <summary>
            Frame for displaying more frames vertically.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalPanelFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalPanelFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalPanelFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalPanelFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusVerticalPanelFrame.IsPreferred">
            <summary>
            Indicates that this is the preferred frame when restoring the focus.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.BuildNodeCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The parent cell view.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.BuildBlockCells(EaslyController.Frame.IFrameCellViewTreeContext,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Create cells for the provided state view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.CreateItems">
            <summary>
            Creates a IxxxFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFramePlaceholderFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusVerticalPanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCommentFrame">
            <summary>
            Frame to display comments.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusCommentFrame">
            <summary>
            Frame to display comments.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusCommentFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFrame.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFrame.CollectSelectors(System.Collections.Generic.Dictionary{System.String,EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets selectors in the frame and nested frames.
            </summary>
            <param name="selectorTable">The table of selectors to update.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFrame.IsDisplayed(EaslyController.Frame.IFrameCellViewTreeContext,System.String)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFrame.CreateCommentCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,BaseNode.IDocument)">
            <summary>
            Creates a IxxxCommentCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusCommentFrame.CreateEmptyCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingBlockNodeIndex.#ctor(BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingBlockNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingCollectionNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingCollectionNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingExistingBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">Indexed node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingExistingBlockNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingListNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="node">Indexed node in the list</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="index">Position of the node in the list.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingListNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingNewBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingNewBlockNodeIndex.CreateExistingBlockIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingChildIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndexCollection">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusIndexCollection`1.#ctor(System.String,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusIndexCollection`1"/> class.
            </summary>
            <param name="propertyName">Property indexed for all nodes in the collection.</param>
            <param name="nodeIndexList">Collection of node indexes.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingInsertableIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingOptionalNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingOptionalNodeIndex.CreateInsertionOptionalNodeIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingOptionalNodeIndex.CreateInsertionOptionalClearIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionOptionalClearIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingPatternIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingPatternIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed replication pattern node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingPatternIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingPlaceholderNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed node.</param>
            <param name="node">The indexed node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingPlaceholderNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingSourceIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBrowsingSourceIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed source identifier node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBrowsingSourceIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusChildIndex">
            <summary>
            Base interface for any index representing the child node of a parent node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusIndex">
            <summary>
            Base interface for any index.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeIndex">
            <summary>
            Base interface for any index representing a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusRootNodeIndex.#ctor(BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusRootNodeIndex"/> class.
            </summary>
            <param name="node">The indexed root node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusRootNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionCollectionNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionCollectionNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionCollectionNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionExistingBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list..</param>
            <param name="node">Inserted node.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the block.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionExistingBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionListNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="node">Inserted node.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the list.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionListNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionNewBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="patternNode">Replication pattern in the block.</param>
            <param name="sourceNode">Source identifier in the block.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionNewBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionNewBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionChildNodeIndex">
            <summary>
            Index for an inserted child node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionChildIndex">
            <summary>
            Index for an inserted child.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionOptionalClearIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionOptionalClearIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionOptionalClearIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionOptionalClearIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionOptionalClearIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionOptionalClearIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionOptionalNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionOptionalNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionPlaceholderNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInsertionPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the replaced node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusInsertionPlaceholderNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockListInner">
            <summary>
            Inner for a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockListInner.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockListInner`1">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockListInner`1.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockListInner`2">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListInner`2.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.CreateBlockStateList">
            <summary>
            Creates a IxxxBlockStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.CreateBlockState(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Creates a IxxxBlockState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.CreateBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockListInner`2.CreateNewBlockNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCollectionInner">
            <summary>
            Base inner for a list or a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCollectionInner`1">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusCollectionInner`2">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusCollectionInner`2.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusCollectionInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusCollectionInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusListInner">
            <summary>
            Inner for a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusListInner.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusListInner`1">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Focus.IFocusListInner`1.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusListInner`2">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusListInner`2.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListInner`2.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusListInner`2.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusListInner`2.CreateListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInner">
            <summary>
            Interface for all inners.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusInner.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Focus.IFocusInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusInner`1.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalInner">
            <summary>
            Inner for an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOptionalInner.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalInner`1">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Focus.IFocusOptionalInner`1.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOptionalInner`2">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalInner`2.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusOptionalInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxOptionalNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalInner`2.CreateBrowsingNodeIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderInner">
            <summary>
            Inner for a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPlaceholderInner.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderInner`1">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Focus.IFocusPlaceholderInner`1.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPlaceholderInner`2">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderInner`2.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusPlaceholderInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderInner`2.CreateBrowsingNodeIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSingleInner">
            <summary>
            Base inner for a single node inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusSingleInner`1.#ctor(EaslyController.Focus.IFocusNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusSingleInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusSingleInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockStateView.Template">
            <summary>
            The template used to display the block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockStateView.EmbeddingCellView">
            <summary>
            List of cell views for each child node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusBlockStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockStateView.#ctor(EaslyController.Focus.IFocusControllerView,EaslyController.Focus.IFocusBlockState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="blockState">The block state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockStateView.Template">
            <summary>
            The template used to display the block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockStateView.EmbeddingCellView">
            <summary>
            List of cell views for each child node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusBlockStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeStateView.IsUserVisible">
            <summary>
            Indicates if this view has all its frames forced to visible.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeStateView.SetIsUserVisible(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.IFocusNodeStateView.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeStateView.GetSelectorStack">
            <summary>
            Gets the selector stack corresponding to this view and all its parent.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeStateView.#ctor(EaslyController.Focus.IFocusControllerView,EaslyController.Focus.IFocusNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The node state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeStateView.IsUserVisible">
            <summary>
            Indicates if this view has all its frames forced to visible.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeStateView.SetIsUserVisible(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.FocusNodeStateView.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeStateView.GetSelectorStack">
            <summary>
            Gets the selector stack corresponding to this view and all its parent.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.#ctor(EaslyController.Focus.IFocusControllerView,EaslyController.Focus.IFocusOptionalNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusOptionalNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The optional node state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.IsUserVisible">
            <summary>
            Indicates if this view has all its frames forced to visible.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.SetIsUserVisible(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.FocusOptionalNodeStateView.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.GetSelectorStack">
            <summary>
            Gets the selector stack corresponding to this view and all its parent.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.UpdateSelectorStackNodeState(System.Collections.Generic.List{EaslyController.Focus.IFocusFrameSelectorList},EaslyController.Focus.IFocusNodeStateView@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusOptionalNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeStateView.CreateEmptyCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.#ctor(EaslyController.Focus.IFocusControllerView,EaslyController.Focus.IFocusPatternState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusPatternStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The pattern state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.IsUserVisible">
            <summary>
            Indicates if this view has all its frames forced to visible.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.SetIsUserVisible(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.FocusPatternStateView.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.GetSelectorStack">
            <summary>
            Gets the selector stack corresponding to this view and all its parent.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.UpdateSelectorStackNodeState(System.Collections.Generic.List{EaslyController.Focus.IFocusFrameSelectorList},EaslyController.Focus.IFocusNodeStateView@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.UpdateSelectorStackBlockState(System.Collections.Generic.List{EaslyController.Focus.IFocusFrameSelectorList},EaslyController.Focus.IFocusBlockState,EaslyController.Focus.IFocusInner,EaslyController.Focus.IFocusNodeStateView@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusPatternStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusPlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.#ctor(EaslyController.Focus.IFocusControllerView,EaslyController.Focus.IFocusPlaceholderNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusPlaceholderNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The child node state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeStateView.IsUserVisible">
            <summary>
            Indicates if this view has all its frames forced to visible.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.SetIsUserVisible(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.FocusPlaceholderNodeStateView.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.GetSelectorStack">
            <summary>
            Gets the selector stack corresponding to this view and all its parent.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.UpdateSelectorStackNodeState(System.Collections.Generic.List{EaslyController.Focus.IFocusFrameSelectorList},EaslyController.Focus.IFocusNodeStateView@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusPlaceholderNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.#ctor(EaslyController.Focus.IFocusControllerView,EaslyController.Focus.IFocusSourceState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusSourceStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The source state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceStateView.IsUserVisible">
            <summary>
            Indicates if this view has all its frames forced to visible.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.BuildRootCellView(EaslyController.Frame.IFrameCellViewTreeContext)">
            <summary>
            Builds the cell view tree for this view.
            </summary>
            <param name="context">Context used to build the cell view tree.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.UpdateFocusChain(EaslyController.Focus.IFocusFocusList,BaseNode.INode,EaslyController.Focus.IFocusFrame,EaslyController.Focus.IFocusFocus@)">
            <summary>
            Updates the focus chain with cells in the tree.
            </summary>
            <param name="focusChain">The list of focusable cell views found in the tree.</param>
            <param name="focusedNode">The currently focused node.</param>
            <param name="focusedFrame">The currently focused frame in the template associated to <paramref name="focusedNode"/>.</param>
            <param name="matchingFocus">The focus in <paramref name="focusChain"/> that match <paramref name="focusedNode"/> and <paramref name="focusedFrame"/> upon return.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.SetIsUserVisible(System.Boolean)">
            <summary>
            Sets the <see cref="P:EaslyController.Focus.FocusSourceStateView.IsUserVisible"/> flag.
            </summary>
            <param name="isUserVisible">The new value.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.GetSelectorStack">
            <summary>
            Gets the selector stack corresponding to this view and all its parent.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.UpdateSelectorStackNodeState(System.Collections.Generic.List{EaslyController.Focus.IFocusFrameSelectorList},EaslyController.Focus.IFocusNodeStateView@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.UpdateSelectorStackBlockState(System.Collections.Generic.List{EaslyController.Focus.IFocusFrameSelectorList},EaslyController.Focus.IFocusBlockState,EaslyController.Focus.IFocusInner,EaslyController.Focus.IFocusNodeStateView@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusSourceStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusReplaceableStateView">
            <summary>
            A state view that can be replaced.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockState">
            <summary>
            State of a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockState.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockState.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockState.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockState.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockState.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusBlockState.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.#ctor(EaslyController.Focus.IFocusBlockListInner,EaslyController.Focus.IFocusBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusBlockState`1"/> class.
            </summary>
            <param name="parentInner">Inner containing the block state.</param>
            <param name="newBlockIndex">Index that was used to create the block state.</param>
            <param name="childBlock">The block.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockState`1.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockState`1.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockState`1.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockState`1.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockState`1.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockState`1.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreatePatternInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreateSourceInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreateExistingPatternIndex">
            <summary>
            Creates a IxxxBrowsingPatternIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreateExistingSourceIndex">
            <summary>
            Creates a IxxxBrowsingSourceIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreatePatternState(EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex)">
            <summary>
            Creates a IxxxPatternState object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockState`1.CreateSourceState(EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex)">
            <summary>
            Creates a IxxxSourceState object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusCyclableNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCyclableNodeState.CycleIndexList">
            <summary>
            List of node indexes that can replace the current node. Can be null.
            Applies only to bodies and features.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusCyclableNodeState.CycleCurrentPosition">
            <summary>
            Position of the current node in <see cref="P:EaslyController.Focus.IFocusCyclableNodeState.CycleIndexList"/>.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusCyclableNodeState.InitializeCycleIndexList">
            <summary>
            Initializes the cycle index list if not already initialized.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusCyclableNodeState.UpdateCyclePosition">
            <summary>
            Updates the position of the node in the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusCyclableNodeState.RestoreCycleIndexList(EaslyController.Focus.IFocusInsertionChildNodeIndexList)">
            <summary>
            Restores the cycle index list from which this state was created.
            </summary>
            <param name="cycleIndexList">The list to restore.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeState.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeState.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeState`1">
            <summary>
            Base interface for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeState`1">
            <summary>
            Base class for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeState`1.#ctor(EaslyController.Focus.IFocusIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalNodeState">
            <summary>
            State of an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOptionalNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusOptionalNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.#ctor(EaslyController.Focus.IFocusBrowsingOptionalNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusOptionalNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeState`1.CycleIndexList">
            <summary>
            List of node indexes that can replace the current node. Can be null.
            Applies only to bodies and features.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusOptionalNodeState`1.CycleCurrentPosition">
            <summary>
            Position of the current node in <see cref="P:EaslyController.Focus.FocusOptionalNodeState`1.CycleIndexList"/>.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.InitializeCycleIndexList">
            <summary>
            Initializes the cycle index list if not already initialized.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.UpdateCyclePosition">
            <summary>
            Updates the position of the node in the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.RestoreCycleIndexList(EaslyController.Focus.IFocusInsertionChildNodeIndexList)">
            <summary>
            Restores the cycle index list from which this state was created.
            </summary>
            <param name="cycleIndexList">The list to restore.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusOptionalNodeState`1.CreateInsertionChildIndexList">
            <summary>
            Creates a IxxxInsertionChildIndexNodeList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPatternState">
            <summary>
            State of an replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPatternState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPatternState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusPatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternState`1.#ctor(EaslyController.Focus.IFocusBlockState,EaslyController.Focus.IFocusBrowsingPatternIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusPatternState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPatternState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPatternState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderNodeState">
            <summary>
            State of an child node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPlaceholderNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusPlaceholderNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusPlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusPlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.#ctor(EaslyController.Focus.IFocusNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusPlaceholderNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeState`1.CycleIndexList">
            <summary>
            List of node indexes that can replace the current node. Can be null.
            Applies only to bodies and features.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusPlaceholderNodeState`1.CycleCurrentPosition">
            <summary>
            Position of the current node in <see cref="P:EaslyController.Focus.FocusPlaceholderNodeState`1.CycleIndexList"/>.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.InitializeCycleIndexList">
            <summary>
            Initializes the cycle index list if not already initialized.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.UpdateCyclePosition">
            <summary>
            Updates the position of the node in the cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.RestoreCycleIndexList(EaslyController.Focus.IFocusInsertionChildNodeIndexList)">
            <summary>
            Restores the cycle index list from which this state was created.
            </summary>
            <param name="cycleIndexList">The list to restore.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusPlaceholderNodeState`1.CreateInsertionChildIndexList">
            <summary>
            Creates a IxxxInsertionChildNodeIndexList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSourceState">
            <summary>
            State of a source identifier node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSourceState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusSourceState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Focus.FocusSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceState`1.#ctor(EaslyController.Focus.IFocusBlockState,EaslyController.Focus.IFocusBrowsingSourceIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusSourceState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusSourceState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusSourceState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusBlockTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusBlockTemplate.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusBlockTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusBlockTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusBlockTemplate.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusFrameSelector">
            <summary>
            Selects specific frames in the remaining of the cell view tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusFrameSelector.SelectorType">
            <summary>
            Base type this selector can specify.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusFrameSelector.SelectorName">
            <summary>
            Selector name.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusFrameSelector.IsValid(System.Type,EaslyController.Focus.IFocusTemplateReadOnlyDictionary,System.String)">
            <summary>
            Checks that a frame selector is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame selector can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="propertyName">The property for which frames can be selected.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusFrameSelector">
            <summary>
            Selects specific frames in the remaining of the cell view tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFrameSelector.SelectorType">
            <summary>
            Base type this selector can specify.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusFrameSelector.SelectorName">
            <summary>
            Selector name.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusFrameSelector.IsValid(System.Type,EaslyController.Focus.IFocusTemplateReadOnlyDictionary,System.String)">
            <summary>
            Checks that a frame selector is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame selector can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="propertyName">The property for which frames can be selected.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusFrameSelector.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Focus.IFocusFrameSelector"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Focus.IFocusNodeTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeTemplate.IsComplex">
            <summary>
            True if the associated expression should be surrounded with parenthesis.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusNodeTemplate.IsSimple">
            <summary>
            True if the parent template rather than this template should be fully displayed when visibility is enforced.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeTemplate.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeTemplate.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeTemplate.PropertyToFrame(System.String,System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that associated to a given property.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusNodeTemplate.GetCommentFrame(System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame associated to the comment.
            This overload uses selectors to choose the correct frame.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusNodeTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeTemplate.IsComplex">
            <summary>
            True if the associated expression should be surrounded with parenthesis.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeTemplate.IsSimple">
            <summary>
            True if the parent template rather than this template should be fully displayed when visibility is enforced.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusNodeTemplate.IsValid">
            <summary>
            Checks that a template and all its frames are valid.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeTemplate.FrameSelectorForProperty(System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary>
            Returns the frame associated to a property if it can have selectors.
            </summary>
            <param name="propertyName">Name of the property to look for.</param>
            <param name="frame">Frame found upon return. Null if not matching <paramref name="propertyName"/>.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeTemplate.FrameSelectorForPropertySingle(EaslyController.Focus.IFocusFrame,System.String,EaslyController.Focus.IFocusFrameWithSelector@)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeTemplate.GetPreferredFrame(EaslyController.Focus.IFocusNodeFrame@,EaslyController.Focus.IFocusNodeFrame@)">
            <summary>
            Gets preferred frames to receive the focus when the source code is changed.
            </summary>
            <param name="firstPreferredFrame">The first preferred frame found.</param>
            <param name="lastPreferredFrame">The last preferred frame found.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeTemplate.PropertyToFrame(System.String,System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that associated to a given property.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusNodeTemplate.GetCommentFrame(System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame associated to the comment.
            This overload uses selectors to choose the correct frame.
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.FocusTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Focus.IFocusTemplateSet">
            <summary>
            Set of templates used to describe all possible nodes in the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTemplateSet.NodeTemplateTable">
            <summary>
            Templates for nodes by their type.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.IFocusTemplateSet.BlockTemplateTable">
            <summary>
            Templates for blocks of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.IFocusTemplateSet.InnerToFrame(EaslyController.Focus.IFocusInner{EaslyController.Focus.IFocusBrowsingChildIndex},System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that creates cells associated to states in the inner.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="inner">The inner.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusTemplateSet.PropertyToFrame(EaslyController.Focus.IFocusNodeState,System.String,System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that creates cells associated to a property in a state.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="state">The state.</param>
            <param name="propertyName">The property name.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.IFocusTemplateSet.GetCommentFrame(EaslyController.Focus.IFocusNodeState,System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that creates cells associated to a comment in a state.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="state">The state.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="T:EaslyController.Focus.FocusTemplateSet">
            <summary>
            Set of templates used to describe all possible nodes in the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTemplateSet.Default">
            <summary>
            Returns a default template set.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusTemplateSet"/> class.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.#ctor(EaslyController.Focus.IFocusTemplateReadOnlyDictionary,EaslyController.Focus.IFocusTemplateReadOnlyDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Focus.FocusTemplateSet"/> class.
            </summary>
            <param name="nodeTemplateTable">Templates for nodes by their type.</param>
            <param name="blockTemplateTable">Templates for blocks of nodes.</param>
        </member>
        <member name="P:EaslyController.Focus.FocusTemplateSet.NodeTemplateTable">
            <summary>
            Templates for nodes by their type.
            </summary>
        </member>
        <member name="P:EaslyController.Focus.FocusTemplateSet.BlockTemplateTable">
            <summary>
            Templates for blocks of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.InnerToFrame(EaslyController.Focus.IFocusInner{EaslyController.Focus.IFocusBrowsingChildIndex},System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that creates cells associated to states in the inner.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="inner">The inner.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.PropertyToFrame(EaslyController.Focus.IFocusNodeState,System.String,System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that creates cells associated to a property in a state.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="state">The state.</param>
            <param name="propertyName">The property name.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.GetCommentFrame(EaslyController.Focus.IFocusNodeState,System.Collections.Generic.IList{EaslyController.Focus.IFocusFrameSelectorList})">
            <summary>
            Gets the frame that creates cells associated to a comment in a state.
            This overload uses selectors to choose the correct frame.
            </summary>
            <param name="state">The state.</param>
            <param name="selectorStack">A list of selectors to choose the correct frame.</param>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateEmptyTemplateDictionary">
            <summary>
            Creates a IxxxTemplateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateDefaultTemplateDictionary">
            <summary>
            Creates a IxxxTemplateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateHorizontalPanelFrame">
            <summary>
            Creates a IxxxHorizontalPanelFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateHorizontalCollectionPlaceholderFrame">
            <summary>
            Creates a IxxxHorizontalCollectionPlaceholderFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreatePlaceholderFrame">
            <summary>
            Creates a IxxxPlaceholderFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateOptionalFrame">
            <summary>
            Creates a IxxxOptionalFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateHorizontalListFrame">
            <summary>
            Creates a IxxxHorizontalListFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateHorizontalBlockListFrame">
            <summary>
            Creates a IxxxHorizontalBlockListFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateDiscreteFrame">
            <summary>
            Creates a IxxxDiscreteFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateKeywordFrame">
            <summary>
            Creates a IxxxKeywordFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateTextValueFrame">
            <summary>
            Creates a IxxxTextValueFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateCommentFrame">
            <summary>
            Creates a IxxxCommentFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateNodeTemplate">
            <summary>
            Creates a IxxxTemplate object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateBlockTemplate">
            <summary>
            Creates a IxxxTemplate object.
            </summary>
        </member>
        <member name="M:EaslyController.Focus.FocusTemplateSet.CreateDefaultTemplateSet(EaslyController.Frame.IFrameTemplateReadOnlyDictionary,EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Creates a IxxxTemplateSet object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCellViewCollection">
            <summary>
            Base interface for collection of cell views.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellViewCollection.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellViewCollection.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellViewCollection.GetMeasuredSize(EaslyController.Controller.Size)">
            <summary>
            Returns the measured size of streched cells in the collection.
            </summary>
            <param name="size">The cell size.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellViewCollection.DrawSelection(System.Int32,System.Int32,EaslyController.Constants.SelectionStyles)">
            <summary>
            Draws a selection rectangle around cells.
            </summary>
            <param name="startIndex">Index of the first cell in the selection.</param>
            <param name="endIndex">Index of the last cell in the selection.</param>
            <param name="selectionStyle">The style to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellViewCollection.DrawBeforeItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator before an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellViewCollection.DrawAfterItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator after an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellViewCollection.PrintBeforeItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator before an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellViewCollection.PrintAfterItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator after an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutCellViewCollection">
            <summary>
            Base interface for collection of cell views.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellViewList,EaslyController.Layout.ILayoutFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCellViewCollection"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">The frame that was used to create this cell. Can be null.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewCollection.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.GetMeasuredSize(EaslyController.Controller.Size)">
            <summary>
            Returns the measured size of streched cells in the collection.
            </summary>
            <param name="size">The cell size.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.DrawSelection(System.Int32,System.Int32,EaslyController.Constants.SelectionStyles)">
            <summary>
            Draws a selection rectangle around cells.
            </summary>
            <param name="startIndex">Index of the first cell in the selection.</param>
            <param name="endIndex">Index of the last cell in the selection.</param>
            <param name="selectionStyle">The style to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.DrawBeforeItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator before an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.DrawAfterItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator after an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.PrintBeforeItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator before an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.PrintAfterItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator after an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewCollection.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutColumn">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutColumn">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellViewList,EaslyController.Layout.ILayoutFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutColumn"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">The frame that was used to create this cell. Can be null.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutColumn.HasBlockGeometry">
            <summary>
            Indicates that block geometry must be drawn around a block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.GetMeasuredSize(EaslyController.Controller.Size)">
            <summary>
            Returns the measured size of streched cells in the collection.
            </summary>
            <param name="size">The cell size.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.DrawSelection">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.DrawSelection(System.Int32,System.Int32,EaslyController.Constants.SelectionStyles)">
            <summary>
            Draws a selection rectangle around cells.
            </summary>
            <param name="startIndex">Index of the first cell in the selection.</param>
            <param name="endIndex">Index of the last cell in the selection.</param>
            <param name="selectionStyle">The style to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.DrawBlockListNodeSelection(EaslyController.Layout.ILayoutBlockNodeListSelection)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.GetSelectedRect(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.DrawBlockGeometry">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.DrawBeforeItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator before an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.DrawAfterItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator after an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.PrintBeforeItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator before an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.PrintAfterItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator after an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutColumn.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutLine">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutLine">
            <summary>
            A collection of cell views organized in a column.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellViewList,EaslyController.Layout.ILayoutFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutLine"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="cellViewList">The list of child cell views.</param>
            <param name="frame">Frame providing the horizontal separator to insert between cells. Can be null.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.CellViewList">
            <summary>
            The collection of child cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.Frame">
            <summary>
            The frame that was used to create this cell. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutLine.HasBlockGeometry">
            <summary>
            Indicates that block geometry must be drawn around a block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.GetMeasuredSize(EaslyController.Controller.Size)">
            <summary>
            Returns the measured size of streched cells in the collection.
            </summary>
            <param name="size">The cell size.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.DrawSelection">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.DrawSelection(System.Int32,System.Int32,EaslyController.Constants.SelectionStyles)">
            <summary>
            Draws a selection rectangle around cells.
            </summary>
            <param name="startIndex">Index of the first cell in the selection.</param>
            <param name="endIndex">Index of the last cell in the selection.</param>
            <param name="selectionStyle">The style to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.DrawBlockListNodeSelection(EaslyController.Layout.ILayoutBlockNodeListSelection)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.GetSelectedRect(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.DrawBlockGeometry">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.DrawBeforeItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator before an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.DrawAfterItem(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws container or separator after an element of a collection.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.PrintBeforeItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator before an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.PrintAfterItem(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints container or separator after an element of a collection.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutLine.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutAssignableCellView">
            <summary>
            Cell view that can be assigned to a property in a state view.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCellView">
            <summary>
            Atomic cell view of a component in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutCellView">
            <summary>
            Atomic cell view of a component in a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTextFocusableCellView">
            <summary>
            Cell view for any text (property or comment).
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCommentCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCommentCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutFrame,BaseNode.IDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCommentCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="documentation">The comment this cell is displaying.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentCellView.CreateFocus">
            <summary>
            Creates a IxxxCommentFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockCellView">
            <summary>
            A cell view for a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockCellView.BlockStateView">
            <summary>
            The block state view of the state associated to this cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutBlockCellView.DrawBlockListNodeSelection(EaslyController.Layout.ILayoutBlockNodeListSelection)">
            <summary>
            Draw the selection of nodes within a block.
            </summary>
            <param name="selection">The selection.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutBlockStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBlockCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view.</param>
            <param name="blockStateView">The block state view of the state associated to this cell.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.BlockStateView">
            <summary>
            The block state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.DrawBlockListNodeSelection(EaslyController.Layout.ILayoutBlockNodeListSelection)">
            <summary>
            Draw the selection of nodes within a block.
            </summary>
            <param name="selection">The selection.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutContainerCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutContainerCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutContainerCellView.ChildStateView">
            <summary>
            The state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutContainerCellView.Frame">
            <summary>
            The frame that was used to create this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutContainerCellView">
            <summary>
            A leaf of the cell view tree for a child state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutContainerCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view.</param>
            <param name="childStateView">The state view of the state associated to this cell.</param>
            <param name="frame">The frame that was used to create this cell.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.ChildStateView">
            <summary>
            The state view of the state associated to this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.Frame">
            <summary>
            The frame that was used to create this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContainerCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutContainerCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutContentFocusableCellView">
            <summary>
            Cell view for components that can receive the focus and be modified.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutContentFocusableCellView">
            <summary>
            Cell view for components that can receive the focus and be modified.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutFrame,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutContentFocusableCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDiscreteContentFocusableCellView">
            <summary>
            Cell view for discrete components that can receive the focus and be modified (enum, bool...)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutDiscreteContentFocusableCellView.KeywordFrame">
            <summary>
            The keyword frame that was used to create this cell.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutDiscreteContentFocusableCellView">
            <summary>
            Cell view for discrete components that can receive the focus and be modified (enum, bool...)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutFrame,System.String,EaslyController.Layout.ILayoutKeywordFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutDiscreteContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
            <param name="keywordFrame">The keyword frame that was used to create this cell.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.KeywordFrame">
            <summary>
            The keyword frame that was used to create this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocusableCellView.CreateFocus">
            <summary>
            Creates a IxxxDiscreteContentFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutEmptyCellView">
            <summary>
            Cell view with no content and that is not displayed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutEmptyCellView">
            <summary>
            Cell view with no content and that is not displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutEmptyCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptyCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptyCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFocusableCellView">
            <summary>
            Cell view for discrete elements that can receive the focus but are not always the component of a node (insertion points, keywords and other decorations)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFocusableCellView">
            <summary>
            Cell view for discrete elements that can receive the focus but are not always the component of a node (insertion points, keywords and other decorations)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocusableCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocusableCellView.CreateFocus">
            <summary>
            Creates a IxxxFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutStringContentFocusableCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutStringContentFocusableCellView">
            <summary>
            Cell view for text components that can receive the focus and be modified (identifiers).
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutFrame,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutStringContentFocusableCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
            <param name="propertyName">Property corresponding to the component of the node.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocusableCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocusableCellView.CreateFocus">
            <summary>
            Creates a IxxxTextFocus object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVisibleCellView">
            <summary>
            Cell view for components that are displayed.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutVisibleCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutVisibleCellView">
            <summary>
            Cell view for components that are displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.#ctor(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutVisibleCellView"/> class.
            </summary>
            <param name="stateView">The state view containing the tree with this cell.</param>
            <param name="parentCellView">The collection of cell views containing this view. Null for the root of the cell tree.</param>
            <param name="frame">The frame that created this cell view.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.StateView">
            <summary>
            The state view containing the tree with this cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.ParentCellView">
            <summary>
            The collection of cell views containing this view. Null for the root of the cell tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.Frame">
            <summary>
            The frame that created this cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.CellOrigin">
            <summary>
            Location of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.CellSize">
            <summary>
            Floating size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.CellPadding">
            <summary>
            Padding inside the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.ActualCellSize">
            <summary>
            Actual size of the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.CellRect">
            <summary>
            Rectangular region for the cell.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.CollectionWithSeparator">
            <summary>
            The collection that can add separators around this item.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.ReferenceContainer">
            <summary>
            The reference when displaying separators.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVisibleCellView.SeparatorLength">
            <summary>
            The separator measure.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.Measure(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measures the cell.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.Arrange(EaslyController.Controller.Point)">
            <summary>
            Arranges the cell.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.UpdateActualSize">
            <summary>
            Updates the actual size of the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.Draw">
            <summary>
            Draws the cell.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.Print(EaslyController.Controller.Point)">
            <summary>
            Prints the cell.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutVisibleCellView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVisibleCellViewList">
            <summary>
            List of IxxxVisibleCellView
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutVisibleCellViewList">
            <summary>
            List of IxxxVisibleCellView
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutAssignableCellViewDictionary`1">
            <summary>
            Dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutAssignableCellViewDictionary`1">
            <summary>
            Dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutAssignableCellViewDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutAssignableCellViewReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutAssignableCellViewReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxAssignableCellView
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutAssignableCellViewReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutAssignableCellViewReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxBlockState
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutBlockStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockStateList">
            <summary>
            List of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockStateReadOnlyList">
            <summary>
            Read-only list of IxxxBlockState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingBlockNodeIndexList">
            <summary>
            List of IxxxBrowsingBlockNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingListNodeIndexList">
            <summary>
            List of IxxxBrowsingListNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCellViewList">
            <summary>
            List of IxxxCellView
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCellViewList">
            <summary>
            List of IxxxCellView
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutCellViewList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCycleManagerList">
            <summary>
            List of IxxxCycleManager
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCycleManagerList">
            <summary>
            List of IxxxCycleManager
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFocusList">
            <summary>
            List of IxxxFocus
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFocusList">
            <summary>
            List of IxxxFocus
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameSelectorList">
            <summary>
            List of IxxxFrameSelector
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFrameSelectorList">
            <summary>
            List of IxxxFrameSelector
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutFrameSelectorList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutFrameSelectorList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameList">
            <summary>
            List of IxxxFocus
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFrameList">
            <summary>
            List of IxxxFocus
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutIndexCollectionList">
            <summary>
            List of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutIndexCollectionReadOnlyList">
            <summary>
            Read-only list of IxxxIndexCollection
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutIndexNodeStateDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutIndexNodeStateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutIndexNodeStateReadOnlyDictionary">
            <summary>
            Read-only dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutInnerDictionary`1">
            <summary>
            Dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutInnerDictionary`1.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutInnerReadOnlyDictionary`1">
            <summary>
            Read-only dictionary of ..., IxxxInner
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutInnerReadOnlyDictionary`1.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutInnerReadOnlyDictionary`1"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionChildNodeIndexList">
            <summary>
            List of IxxxInsertionChildNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionChildNodeIndexList">
            <summary>
            List of IxxxInsertionChildNodeIndex
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutKeywordFrameList">
            <summary>
            List of IxxxKeywordFrame
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutKeywordFrameList">
            <summary>
            List of IxxxKeywordFrame
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeFrameVisibilityList">
            <summary>
            List of IxxxNodeFrameVisibility
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeFrameVisibilityList">
            <summary>
            List of IxxxNodeFrameVisibility
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeStateList">
            <summary>
            List of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOperationGroupList">
            <summary>
            List of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOperationGroupReadOnlyList">
            <summary>
            Read-only list of IxxxOperationGroup
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOperationList">
            <summary>
            List of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOperationReadOnlyList">
            <summary>
            Read-only list of IxxxOperation
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPlaceholderNodeStateList">
            <summary>
            List of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPlaceholderNodeStateReadOnlyList">
            <summary>
            Read-only list of IxxxPlaceholderNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateReadOnlyList.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutPlaceholderNodeStateReadOnlyList"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSelectableFrameList">
            <summary>
            List of IxxxSelectableFrame
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSelectableFrameList">
            <summary>
            List of IxxxSelectableFrame
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutStateViewDictionary">
            <summary>
            Dictionary of IxxxIndex, IxxxNodeState
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStateViewDictionary.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutStateViewDictionary"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTemplateDictionary">
            <summary>
            Dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutTemplateDictionary">
            <summary>
            Dictionary of Type, IxxxTemplate
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateDictionary.ToReadOnly">
            <summary>
            Gets a read-only view of the dictionary.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTemplateList">
            <summary>
            List of IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutTemplateList">
            <summary>
            List of IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTemplateReadOnlyDictionary">
            <summary>
            Read-only dictionary of ..., IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutTemplateReadOnlyDictionary">
            <summary>
            Read-only dictionary of ..., IxxxTemplate
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowseContext">
            <summary>
            Context for browsing child nodes of a parent node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowseContext.#ctor(EaslyController.Layout.ILayoutNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowseContext"/> class.
            </summary>
            <param name="state">The state that will be browsed.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBrowseContext.State">
            <summary>
            State this context is browsing.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBrowseContext.IndexCollectionList">
            <summary>
            List of index collections that have been added during browsing.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowseContext.CheckConsistency">
            <summary>
            Checks the context consistency, for code coverage purpose.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowseContext.CreateIndexCollectionList">
            <summary>
            Creates a IxxxCollectionList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutMeasureContext">
            <summary>
            Context for measuring and arranging cells in a view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMeasureContext.TabulationWidth">
            <summary>
            Width of a tabulation margin.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMeasureContext.BlockGeometryWidth">
            <summary>
            Width of a vertical block geometry.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMeasureContext.BlockGeometryHeight">
            <summary>
            Height of an horizontal block geometry.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMeasureContext.LineHeight">
            <summary>
            Height of a line of text.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMeasureContext.PagePadding">
            <summary>
            The padding applied to the entire page.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasureContext.GetHorizontalSeparatorWidth(EaslyController.Constants.HorizontalSeparators)">
            <summary>
            Gets the width corresponding to a separator between cells in a line.
            </summary>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasureContext.GetVerticalSeparatorHeight(EaslyController.Constants.VerticalSeparators)">
            <summary>
            Gets the height corresponding to a separator between cells in a column.
            </summary>
            <param name="separator">The separator.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasureContext.MeasureText(System.String,EaslyController.Constants.TextStyles,EaslyController.Controller.Measure)">
            <summary>
            Measures a string that is not a number.
            </summary>
            <param name="text">The string to measure.</param>
            <param name="textStyle">Style to use for the text.</param>
            <param name="maxTextWidth">The maximum width for a line of text. Floating means no limit.</param>
            <returns>The size of the string.</returns>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasureContext.MeasureNumber(System.String)">
            <summary>
            Measures a number string.
            </summary>
            <param name="text">The string to measure.</param>
            <returns>The size of the string.</returns>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasureContext.MeasureSymbolSize(EaslyController.Constants.Symbols)">
            <summary>
            Measures a symbol.
            </summary>
            <param name="symbol">The symbol to measure.</param>
            <returns>The size of the symbol.</returns>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasureContext.UpdatePadding(EaslyController.Constants.Margins,EaslyController.Constants.Margins,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Extends a size according to the left and right margin settings.
            </summary>
            <param name="leftMargin">The left margin setting.</param>
            <param name="rightMargin">The right margin setting.</param>
            <param name="size">The size to extend with the calculated padding.</param>
            <param name="padding">The padding calculated from <paramref name="leftMargin"/> and <paramref name="rightMargin"/>.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInternalControllerView">
            <summary>
            Internal interface for a view of a IxxxController.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutAttachCallbackSet">
            <summary>
            Handlers to call during enumeration of states, when attaching a view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutAttachCallbackSet.NodeStateAttachedHandler">
            <summary>
            Handler to call when attaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutAttachCallbackSet.NodeStateDetachedHandler">
            <summary>
            Handler to call when detaching a state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutAttachCallbackSet.BlockListInnerAttachedHandler">
            <summary>
            Handler to call when attaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutAttachCallbackSet.BlockListInnerDetachedHandler">
            <summary>
            Handler to call when detaching a block list inner.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutAttachCallbackSet.BlockStateAttachedHandler">
            <summary>
            Handler to call when attaching a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutAttachCallbackSet.BlockStateDetachedHandler">
            <summary>
            Handler to call when detaching a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutAttachCallbackSet.OnNodeStateAttached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been attached.
            </summary>
            <param name="state">The attached state.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutAttachCallbackSet.OnNodeStateDetached(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            A state has been detached.
            </summary>
            <param name="state">The detached state.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutAttachCallbackSet.OnBlockListInnerAttached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been attached.
            </summary>
            <param name="inner">The inner attached.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutAttachCallbackSet.OnBlockListInnerDetached(EaslyController.ReadOnly.IReadOnlyBlockListInner)">
            <summary>
            A block list inner has been detached.
            </summary>
            <param name="inner">The inner detached.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutAttachCallbackSet.OnBlockStateAttached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been attached.
            </summary>
            <param name="blockState">The attached block state.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutAttachCallbackSet.OnBlockStateDetached(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            A block state has been detached.
            </summary>
            <param name="blockState">The detached block state.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCellViewTreeContext">
            <summary>
            Context used when building the cell view tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellViewTreeContext.ControllerView">
            <summary>
            The view in which cells are created.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellViewTreeContext.StateView">
            <summary>
            The state view for which to create cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCellViewTreeContext.BlockStateView">
            <summary>
            The block state view for which to create cells. Can be null.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCellViewTreeContext">
            <summary>
            Context used when building the cell view tree.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCellViewTreeContext.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutNodeStateView,EaslyController.Layout.ILayoutNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCellViewTreeContext"/> class.
            </summary>
            <param name="controllerView">The view in which cells are created.</param>
            <param name="stateView">The state view for which to create cells.</param>
            <param name="forcedCommentStateView">The state view for which the comment must be visible, even if empty.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewTreeContext.ControllerView">
            <summary>
            The view in which cells are created.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewTreeContext.StateView">
            <summary>
            The state view for which to create cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCellViewTreeContext.BlockStateView">
            <summary>
            The block state view for which to create cells. Can be null.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.TemplateSet">
            <summary>
            Template set describing the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.Focus">
            <summary>
            Cell view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.Selection">
            <summary>
            The current selection.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.MeasureContext">
            <summary>
            The measure context.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.DrawContext">
            <summary>
            The draw context.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.PrintContext">
            <summary>
            The print context.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.ViewSize">
            <summary>
            Size of view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.FocusedTextStyle">
            <summary>
            Current text style if the focus is on a string property. Default otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.ActualCaretMode">
            <summary>
            Displayed caret mode.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.IsCaretShown">
            <summary>
            Indicates if the caret is shown or hidden.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.IsInvalidated">
            <summary>
            Indicates if there are cells that must be measured and arranged.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.ShowUnfocusedComments">
            <summary>
            Shows a comment sign over comments in <see cref="F:EaslyController.Constants.CommentDisplayModes.OnFocus"/> mode.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.ShowBlockGeometry">
            <summary>
            Shows block geometry around blocks.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutControllerView.ShowLineNumber">
            <summary>
            Shows line numbers.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.Invalidate">
            <summary>
            Invalidates the entire view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.Invalidate(EaslyController.Controller.Rect)">
            <summary>
            Invalidates the specified region.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.MeasureAndArrange">
            <summary>
            Measure and arrange cells in the view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.UpdateLayout">
            <summary>
            Updates all floating sizes and positions.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.Draw(EaslyController.Layout.ILayoutNodeStateView)">
            <summary>
            Draws all visible cells in the view using <see cref="P:EaslyController.Layout.ILayoutControllerView.DrawContext"/>.
            <param name="stateView">The view to draw.</param>
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.Print(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Controller.Point)">
            <summary>
            Prints all visible cells in a view using <see cref="P:EaslyController.Layout.ILayoutControllerView.PrintContext"/>.
            </summary>
            <param name="stateView">The view to print.</param>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.PrintSelection">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.ShowCaret(System.Boolean,System.Boolean)">
            <summary>
            Shows or hides the caret.
            </summary>
            <param name="show">Shows the caret if true. Otherwise, hides it.</param>
            <param name="draw">Draws the caret according to <paramref name="show"/> if true. Otherwise, just save the setting.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.MoveFocusVertically(System.Double,System.Boolean,System.Boolean@)">
            <summary>
            Moves the focus up or down.
            The starting point is the center of the area covered by the current focus.
            </summary>
            <param name="distance">The distance to cross.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the focus has changed.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.MoveFocusHorizontally(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Moves the focus to the beginning or end of a line.
            The starting point is the center of the area covered by the current focus.
            </summary>
            <param name="direction">-1 for the beginning of the line, +1 for the end.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the focus has changed.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.SetShowUnfocusedComments(System.Boolean)">
            <summary>
            Sets <see cref="P:EaslyController.Layout.ILayoutControllerView.ShowUnfocusedComments"/>.
            </summary>
            <param name="show">True to show, false to hide.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.SetShowBlockGeometry(System.Boolean)">
            <summary>
            Sets <see cref="P:EaslyController.Layout.ILayoutControllerView.ShowBlockGeometry"/>.
            </summary>
            <param name="show">True to show, false to hide.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.SetShowLineNumber(System.Boolean)">
            <summary>
            Sets <see cref="P:EaslyController.Layout.ILayoutControllerView.ShowLineNumber"/>.
            </summary>
            <param name="show">True to show, false to hide.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.CellViewFromPoint(System.Double,System.Double,EaslyController.Layout.ILayoutVisibleCellView@)">
            <summary>
            Gets the visible cell view corresponding to a location.
            </summary>
            <param name="x">X-coordinate of the location where to look.</param>
            <param name="y">Y-coordinate of the location where to look.</param>
            <param name="cellView">The cell view upon return. Null if not found.</param>
            <returns>True if found; otherwise, false.</returns>
        </member>
        <member name="M:EaslyController.Layout.ILayoutControllerView.SetFocusToPoint(System.Double,System.Double,System.Boolean,System.Boolean@)">
            <summary>
            Sets the focus to the visible cell view corresponding to a location.
            </summary>
            <param name="x">X-coordinate of the location where to set the focus.</param>
            <param name="y">Y-coordinate of the location where to set the focus.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the focus was moved.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutControllerView">
            <summary>
            View of a IxxxController.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.Create(EaslyController.Layout.ILayoutController,EaslyController.Layout.ILayoutTemplateSet,EaslyController.Layout.ILayoutMeasureContext)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Layout.LayoutControllerView"/> object.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
            <param name="templateSet">The template set used to describe the view.</param>
            <param name="context">The context used to measure, arrange, and draw or print the view.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.#ctor(EaslyController.Layout.ILayoutController,EaslyController.Layout.ILayoutTemplateSet,EaslyController.Layout.ILayoutMeasureContext)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutControllerView"/> class.
            </summary>
            <param name="controller">The controller on which the view is attached.</param>
            <param name="templateSet">The template set used to describe the view.</param>
            <param name="context">The context used to measure, arrange, and draw or print the view.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.Controller">
            <summary>
            The controller.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.StateViewTable">
            <summary>
            Table of views of each state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.BlockStateViewTable">
            <summary>
            Table of views of each block state in the controller.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.RootStateView">
            <summary>
            State view of the root state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.TemplateSet">
            <summary>
            Template set describing the node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.Focus">
            <summary>
            Cell view with the focus.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.Selection">
            <summary>
            The current selection.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.MeasureContext">
            <summary>
            The measure context.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.DrawContext">
            <summary>
            The draw context.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.PrintContext">
            <summary>
            The print context.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.ViewSize">
            <summary>
            Size of view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.FocusedTextStyle">
            <summary>
            Current text style if the focus is on a string property. Default otherwise.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.ActualCaretMode">
            <summary>
            Displayed caret mode.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.IsCaretShown">
            <summary>
            Indicates if the caret is shown or hidden.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.IsInvalidated">
            <summary>
            Indicates if there are cells that must be measured and arranged.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.ShowUnfocusedComments">
            <summary>
            Shows a comment sign over comments in <see cref="F:EaslyController.Constants.CommentDisplayModes.OnFocus"/> mode.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.ShowBlockGeometry">
            <summary>
            Shows block geometry around blocks.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutControllerView.ShowLineNumber">
            <summary>
            Shows line numbers.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.Invalidate">
            <summary>
            Invalidates the entire view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.Invalidate(EaslyController.Controller.Rect)">
            <summary>
            Invalidates the specified region.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.MeasureAndArrange">
            <summary>
            Measure and arrange cells in the view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.UpdateLayout">
            <summary>
            Updates all floating sizes and positions.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.Draw(EaslyController.Layout.ILayoutNodeStateView)">
            <summary>
            Draws all visible cells in the view using <see cref="P:EaslyController.Layout.LayoutControllerView.DrawContext"/>.
            <param name="stateView">The view to draw.</param>
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.Print(EaslyController.Layout.ILayoutNodeStateView,EaslyController.Controller.Point)">
            <summary>
            Prints all visible cells in a view using <see cref="P:EaslyController.Layout.LayoutControllerView.PrintContext"/>.
            </summary>
            <param name="stateView">The view to print.</param>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.PrintSelection">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.ShowCaret(System.Boolean,System.Boolean)">
            <summary>
            Shows or hides the caret.
            </summary>
            <param name="show">Shows the caret if true. Otherwise, hides it.</param>
            <param name="draw">Draws the caret according to <paramref name="show"/> if true. Otherwise, just save the setting.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.MoveFocusVertically(System.Double,System.Boolean,System.Boolean@)">
            <summary>
            Moves the focus up or down.
            The starting point is the center of the area covered by the current focus.
            </summary>
            <param name="distance">The distance to cross.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the focus has changed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.MoveFocusHorizontally(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Moves the focus to the beginning or end of a line.
            The starting point is the center of the area covered by the current focus.
            </summary>
            <param name="direction">-1 for the beginning of the line, +1 for the end.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the focus has changed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.SetShowUnfocusedComments(System.Boolean)">
            <summary>
            Sets <see cref="P:EaslyController.Layout.LayoutControllerView.ShowUnfocusedComments"/>.
            </summary>
            <param name="show">True to show, false to hide.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.SetShowBlockGeometry(System.Boolean)">
            <summary>
            Sets <see cref="P:EaslyController.Layout.LayoutControllerView.ShowBlockGeometry"/>.
            </summary>
            <param name="show">True to show, false to hide.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.SetShowLineNumber(System.Boolean)">
            <summary>
            Sets <see cref="P:EaslyController.Layout.LayoutControllerView.ShowLineNumber"/>.
            </summary>
            <param name="show">True to show, false to hide.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CellViewFromPoint(System.Double,System.Double,EaslyController.Layout.ILayoutVisibleCellView@)">
            <summary>
            Gets the visible cell view corresponding to a location.
            </summary>
            <param name="x">X-coordinate of the location where to look.</param>
            <param name="y">Y-coordinate of the location where to look.</param>
            <param name="cellView">The cell view upon return. Null if not found.</param>
            <returns>True if found; otherwise, false.</returns>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.SetFocusToPoint(System.Double,System.Double,System.Boolean,System.Boolean@)">
            <summary>
            Sets the focus to the visible cell view corresponding to a location.
            </summary>
            <param name="x">X-coordinate of the location where to set the focus.</param>
            <param name="y">Y-coordinate of the location where to set the focus.</param>
            <param name="resetAnchor">If true, resets the selected text anchor.</param>
            <param name="isMoved">True if the focus was moved.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlockStateInserted(EaslyController.Writeable.IWriteableInsertBlockOperation)">
            <summary>
            Handler called every time a block state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlockStateRemoved(EaslyController.Writeable.IWriteableRemoveBlockOperation)">
            <summary>
            Handler called every time a block state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlockViewRemoved(EaslyController.Writeable.IWriteableRemoveBlockViewOperation)">
            <summary>
            Handler called every time a block view must be removed from the controller view.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnStateInserted(EaslyController.Writeable.IWriteableInsertNodeOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnStateRemoved(EaslyController.Writeable.IWriteableRemoveNodeOperation)">
            <summary>
            Handler called every time a state is removed from the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnStateReplaced(EaslyController.Writeable.IWriteableReplaceOperation)">
            <summary>
            Handler called every time a state is inserted in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnStateAssigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is assigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnStateUnassigned(EaslyController.Writeable.IWriteableAssignmentOperation)">
            <summary>
            Handler called every time a state is unassigned in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnDiscreteValueChanged(EaslyController.Writeable.IWriteableChangeDiscreteValueOperation)">
            <summary>
            Handler called every time a discrete value is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnTextChanged(EaslyController.Writeable.IWriteableChangeTextOperation)">
            <summary>
            Handler called every time a text is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnCommentChanged(EaslyController.Writeable.IWriteableChangeCommentOperation)">
            <summary>
            Handler called every time a comment is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlockStateChanged(EaslyController.Writeable.IWriteableChangeBlockOperation)">
            <summary>
            Handler called every time a block state is changed in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnStateMoved(EaslyController.Writeable.IWriteableMoveNodeOperation)">
            <summary>
            Handler called every time a state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlockStateMoved(EaslyController.Writeable.IWriteableMoveBlockOperation)">
            <summary>
            Handler called every time a block state is moved in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlockSplit(EaslyController.Writeable.IWriteableSplitBlockOperation)">
            <summary>
            Handler called every time a block split in the controller.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnBlocksMerged(EaslyController.Writeable.IWriteableMergeBlocksOperation)">
            <summary>
            Handler called every time two blocks are merged.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.OnGenericRefresh(EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Handler called to refresh views.
            </summary>
            <param name="operation">Details of the operation performed.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutControllerView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateStateViewTable">
            <summary>
            Creates a IxxxStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateBlockStateViewTable">
            <summary>
            Creates a IxxxBlockStateViewDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateCallbackSet">
            <summary>
            Creates a IxxxAttachCallbackSet object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreatePlaceholderNodeStateView(EaslyController.ReadOnly.IReadOnlyPlaceholderNodeState)">
            <summary>
            Creates a IxxxPlaceholderNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateOptionalNodeStateView(EaslyController.ReadOnly.IReadOnlyOptionalNodeState)">
            <summary>
            Creates a IxxxOptionalNodeStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreatePatternStateView(EaslyController.ReadOnly.IReadOnlyPatternState)">
            <summary>
            Creates a IxxxPatternStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateSourceStateView(EaslyController.ReadOnly.IReadOnlySourceState)">
            <summary>
            Creates a IxxxSourceStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateBlockStateView(EaslyController.ReadOnly.IReadOnlyBlockState)">
            <summary>
            Creates a IxxxBlockStateView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateCellViewTreeContext(EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxCellViewTreeContext object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateFocusChain">
            <summary>
            Creates a IxxxFocusList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateNewBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Creates a IxxxInsertionNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateListNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateEmptySelection">
            <summary>
            Creates a IxxxEmptySelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateDiscreteContentSelection(EaslyController.Focus.IFocusNodeStateView,System.String)">
            <summary>
            Creates a IxxxDiscreteContentSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateStringContentSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxStringContentSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateCommentSelection(EaslyController.Focus.IFocusNodeStateView,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxCommentSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateNodeSelection(EaslyController.Focus.IFocusNodeStateView)">
            <summary>
            Creates a IxxxNodeSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateNodeListSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxListNodeSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateBlockNodeListSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBlockListNodeSelection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutControllerView.CreateBlockListSelection(EaslyController.Focus.IFocusNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBlockSelection object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDrawContext">
            <summary>
            Context for measuring, arranging and drawing cells in a view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawTextBackground(System.String,EaslyController.Controller.Point,EaslyController.Constants.TextStyles)">
            <summary>
            Draws the text background, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="textStyle">Style to use for the text.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawText(System.String,EaslyController.Controller.Point,EaslyController.Constants.TextStyles,System.Boolean)">
            <summary>
            Draws a string that is not a number, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="textStyle">Style to use for the text.</param>
            <param name="isFocused">true if the whole text has the focus.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawNumber(System.String,EaslyController.Controller.Point)">
            <summary>
            Draws a number string, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="origin">The location where to start drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawSymbol(EaslyController.Constants.Symbols,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding,System.Boolean)">
            <summary>
            Draws a symbol, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="symbol">The symbol to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
            <param name="isFocused">true if the symbol text has the focus.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawHorizontalSeparator(EaslyController.Constants.HorizontalSeparators,EaslyController.Controller.Point,EaslyController.Controller.Measure)">
            <summary>
            Draws the horizontal separator left of the specified origin and with the specified height.
            </summary>
            <param name="separator">The separator to draw.</param>
            <param name="origin">The location where to draw.</param>
            <param name="height">The separator height.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawVerticalSeparator(EaslyController.Constants.VerticalSeparators,EaslyController.Controller.Point,EaslyController.Controller.Measure)">
            <summary>
            Draws the vertical separator above the specified origin and with the specified width.
            </summary>
            <param name="separator">The separator to draw.</param>
            <param name="origin">The location where to draw.</param>
            <param name="width">The separator width.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawHorizontalBlockGeometry(EaslyController.Controller.Point,EaslyController.Controller.Measure)">
            <summary>
            Draws the horizontal line above a block.
            </summary>
            <param name="origin">The location where to draw.</param>
            <param name="width">The separator width.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawVerticalBlockGeometry(EaslyController.Controller.Point,EaslyController.Controller.Measure)">
            <summary>
            Draws the vertical line on the left of a block.
            </summary>
            <param name="origin">The location where to draw.</param>
            <param name="height">The separator height.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.ShowCaret(EaslyController.Controller.Point,System.String,EaslyController.Constants.TextStyles,EaslyController.Constants.CaretModes,System.Int32)">
            <summary>
            Shows the caret.
            </summary>
            <param name="origin">Location of the cell with the caret.</param>
            <param name="text">The full cell text.</param>
            <param name="textStyle">The text style.</param>
            <param name="mode">The caret mode.</param>
            <param name="position">The position of the caret in <paramref name="text"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.HideCaret">
            <summary>
            Hides the caret.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawCommentIcon(EaslyController.Controller.Rect)">
            <summary>
            Draws the vertical separator above the specified origin and with the specified width.
            </summary>
            <param name="region">The region corresponding to the node that has a comment.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawSelectionText(System.String,EaslyController.Controller.Point,EaslyController.Constants.TextStyles,System.Int32,System.Int32)">
            <summary>
            Draws the background of a selected text.
            </summary>
            <param name="text">The text</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="textStyle">The style used to measure selected text.</param>
            <param name="start">The starting point of the selection.</param>
            <param name="end">The ending point of the selection.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.DrawSelectionRectangle(EaslyController.Controller.Rect,EaslyController.Constants.SelectionStyles)">
            <summary>
            Draws the background of a selected rectangle.
            </summary>
            <param name="rect">The rectangle to draw.</param>
            <param name="selectionStyle">The style to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.FromRelativeLocation(System.Double@,System.Double@)">
            <summary>
            Get the absolute location where draw occurs corresponding to the specified relative location.
            </summary>
            <param name="x">X-coordinate of the location, relative on entry, absolute upon return.</param>
            <param name="y">Y-coordinate of the location, relative on entry, absolute upon return.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.ToRelativeLocation(System.Double@,System.Double@)">
            <summary>
            Get the location where draw occurs corresponding to the specified absolute location.
            </summary>
            <param name="x">X-coordinate of the location, absolute on entry, relative upon return.</param>
            <param name="y">Y-coordinate of the location, absolute on entry, relative upon return.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawContext.GetCaretPositionInText(System.Double,System.String,EaslyController.Constants.TextStyles,EaslyController.Constants.CaretModes,EaslyController.Controller.Measure)">
            <summary>
            Get the caret position corresponding to <paramref name="x"/> in <paramref name="text"/>.
            </summary>
            <param name="x">X-coordinate of the caret location.</param>
            <param name="text">The text</param>
            <param name="textStyle">The style used to measure <paramref name="text"/>.</param>
            <param name="mode">The caret mode.</param>
            <param name="maxTextWidth">The maximum width for a line of text. NaN means no limit.</param>
            <returns>The position of the caret.</returns>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPrintContext">
            <summary>
            Context for measuring, arranging and printing cells as string.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutPrintContext.PrintText(System.String,EaslyController.Controller.Point,EaslyController.Constants.TextStyles)">
            <summary>
            Prints a string that is not a number, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="text">The text to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="textStyle">Style to use for the text.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutPrintContext.PrintNumber(System.String,EaslyController.Controller.Point)">
            <summary>
            Prints a string, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="text">The text to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutPrintContext.PrintSymbol(EaslyController.Constants.Symbols,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a symbol, at the location specified in <paramref name="origin"/>.
            </summary>
            <param name="symbol">The symbol to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutPrintContext.PrintHorizontalSeparator(EaslyController.Constants.HorizontalSeparators,EaslyController.Controller.Point,EaslyController.Controller.Measure)">
            <summary>
            Prints the horizontal separator left of the specified origin and with the specified height.
            </summary>
            <param name="separator">The separator to print.</param>
            <param name="origin">The location where to print.</param>
            <param name="height">The separator height.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutPrintContext.PrintVerticalSeparator(EaslyController.Constants.VerticalSeparators,EaslyController.Controller.Point,EaslyController.Controller.Measure)">
            <summary>
            Prints the vertical separator above the specified origin and with the specified width.
            </summary>
            <param name="separator">The separator to print.</param>
            <param name="origin">The location where to print.</param>
            <param name="width">The separator width.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutController">
            <summary>
            Controller for a node tree.
            This controller supports:
            * Operations to modify the tree.
            * Organizing nodes and their content in cells, assigning line and column numbers.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutController.CycleManagerList">
            <summary>
            List of supported cycle managers.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutController">
            <summary>
            Controller for a node tree.
            This controller supports:
            * Operations to modify the tree.
            * Organizing nodes and their content in cells, assigning line and column numbers.
            * Keeping the focus in a cell.
            * Measuring and arranging cells on a canva.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.Create(EaslyController.Layout.ILayoutRootNodeIndex)">
            <summary>
            Creates and initializes a new instance of a <see cref="T:EaslyController.Layout.LayoutController"/> object.
            </summary>
            <param name="nodeIndex">Index of the root of the node tree.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutController"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutController.RootIndex">
            <summary>
            Index of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutController.RootState">
            <summary>
            State of the root node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutController.StateTable">
            <summary>
            State table.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutController.OperationStack">
            <summary>
            List of operations that have been performed, and can be undone or redone.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutController.CycleManagerList">
            <summary>
            List of supported cycle managers.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateChildStateTable">
            <summary>
            Creates a IxxxIndexNodeStateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateBrowseContext(EaslyController.ReadOnly.IReadOnlyBrowseContext,EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxxBrowseContext object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreatePlaceholderInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex})">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateOptionalInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex})">
            <summary>
            Creates a IxxxOptionalInner{IxxxBrowsingOptionalNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndex})">
            <summary>
            Creates a IxxxListInner{IxxxBrowsingListNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateBlockListInner(EaslyController.ReadOnly.IReadOnlyNodeState,EaslyController.ReadOnly.IReadOnlyIndexCollection{EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndex})">
            <summary>
            Creates a IxxxBlockListInner{IxxxBrowsingBlockNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateRootNodeState(EaslyController.ReadOnly.IReadOnlyRootNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateNewOptionalNodeIndex(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxWriteableInsertionOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateInsertNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateInsertBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateRemoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateRemoveBlockViewOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockViewOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateRemoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateReplaceOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateAssignmentOperation(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateChangeDiscreteValueOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateChangeTextOperation(BaseNode.INode,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateChangeCommentOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateChangeBlockOperation(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateSplitBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateMergeBlocksOperation(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateMoveNodeOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateMoveBlockOperation(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateExpandArgumentOperation(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxExpandArgumentOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateGenericRefreshOperation(EaslyController.Writeable.IWriteableNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxGenericRefreshOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateOperationGroupStack">
            <summary>
            Creates a IxxxOperationGroupList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateOperationList">
            <summary>
            Creates a IxxxOperationList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateOperationGroup(EaslyController.Writeable.IWriteableOperationReadOnlyList,EaslyController.Writeable.IWriteableGenericRefreshOperation)">
            <summary>
            Creates a IxxxOperationGroup object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateReplaceWithCycleOperation(BaseNode.INode,System.String,System.Int32,System.Int32,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceWithCycleOperation object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateCycleManagerList">
            <summary>
            Creates a IxxxCycleManagerList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateCycleManagerBody">
            <summary>
            Creates a IxxxCycleManagerBody object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutController.CreateCycleManagerFeature">
            <summary>
            Creates a IxxxCycleManagerFeature object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutChangeCaretOperation">
            <summary>
            Operation details for changing the caret in a string property or comment.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutAssignmentOperation">
            <summary>
            Operation details for assigning or unassigning a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutAssignmentOperation.#ctor(BaseNode.INode,System.String,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutAssignmentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the assignment is taking place.</param>
            <param name="propertyName">Optional property of <paramref name="parentNode"/> for which assignment is changed.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutAssignmentOperation.State">
            <summary>
            The modified state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutAssignmentOperation.CreateAssignmentOperation(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxAssignmentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutChangeBlockOperation">
            <summary>
            Operation details for changing a block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutChangeBlockOperation">
            <summary>
            Operation details for changing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutChangeBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block change is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> for which a block is changed.</param>
            <param name="blockIndex">Index of the changed block.</param>
            <param name="replication">New replication value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutChangeBlockOperation.BlockState">
            <summary>
            Block state changed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeBlockOperation.CreateChangeBlockOperation(BaseNode.ReplicationStatus,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutChangeCommentOperation">
            <summary>
            Operation details for changing a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeCommentOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutChangeCommentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="text">The new comment.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutChangeCommentOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeCommentOperation.CreateChangeCommentOperation(System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeCommentOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutChangeTextOperation">
            <summary>
            Operation details for changing text.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeTextOperation.#ctor(BaseNode.INode,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutChangeTextOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="text">The new text.</param>
            <param name="oldCaretPosition">The old caret position.</param>
            <param name="newCaretPosition">The new caret position.</param>
            <param name="changeCaretBeforeText">True if the caret should be changed before the text, to preserve the caret invariant.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutChangeTextOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeTextOperation.CreateChangeTextOperation(System.String,System.Int32,System.Int32,System.Boolean,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeTextOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutChangeDiscreteValueOperation">
            <summary>
            Operation details for changing a discrete value.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeDiscreteValueOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutChangeDiscreteValueOperation"/> class.
            </summary>
            <param name="parentNode">Node where the change is taking place.</param>
            <param name="propertyName">Name of the property to change.</param>
            <param name="value">The new value.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutChangeDiscreteValueOperation.State">
            <summary>
            State changed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutChangeDiscreteValueOperation.CreateChangeDiscreteValueOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxChangeDiscreteValueOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutExpandArgumentOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutExpandArgumentOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutExpandArgumentOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutExpandArgumentOperation">
            <summary>
            Operation details for inserting a single argument in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutExpandArgumentOperation.#ctor(BaseNode.INode,System.String,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutExpandArgumentOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted item.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutExpandArgumentOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutExpandArgumentOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutExpandArgumentOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutExpandArgumentOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutGenericRefreshOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutGenericRefreshOperation">
            <summary>
            Operation details for replacing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutGenericRefreshOperation.#ctor(EaslyController.Layout.ILayoutNodeState,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutGenericRefreshOperation"/> class.
            </summary>
            <param name="refreshState">State in the source where to start refresh.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutGenericRefreshOperation.RefreshState">
            <summary>
            State in the source where to start refresh.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertBlockOperation">
            <summary>
            Operation details for inserting a block with a single node in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block insertion is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is inserted.</param>
            <param name="blockIndex">Index of the inserted block.</param>
            <param name="block">The inserted block.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertBlockOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertBlockOperation.BlockState">
            <summary>
            Block state inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertBlockOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertBlockOperation.CreateRemoveBlockOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertNodeOperation">
            <summary>
            Operation details for inserting a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the insertion is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is inserted.</param>
            <param name="blockIndex">Block position where the node is inserted, if applicable.</param>
            <param name="index">Position where the node is inserted.</param>
            <param name="node">The inserted node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertNodeOperation.BrowsingIndex">
            <summary>
            Index of the state after it's inserted.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertNodeOperation.ChildState">
            <summary>
            State inserted.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertNodeOperation.CreateRemoveNodeOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxRemoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertOperation">
            <summary>
            Details for insertion operations.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutMergeBlocksOperation">
            <summary>
            Operation details for merging blocks in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMergeBlocksOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutMergeBlocksOperation"/> class.
            </summary>
            <param name="parentNode">Node where the blocks are merged.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where blocks are merged.</param>
            <param name="blockIndex">Position of the merged block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutMergeBlocksOperation.BlockState">
            <summary>
            The merged block state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMergeBlocksOperation.CreateSplitBlockOperation(System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxSplitBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutMoveBlockOperation">
            <summary>
            Operation details for moving a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutMoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is moved.</param>
            <param name="blockIndex">Index of the moved block.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutMoveBlockOperation.BlockState">
            <summary>
            The moved block state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMoveBlockOperation.CreateMoveBlockOperation(System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutMoveNodeOperation">
            <summary>
            Operation details for moving a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutMoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the node is moved.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is moved.</param>
            <param name="blockIndex">Block position where the node is moved, if applicable.</param>
            <param name="index">The current position before move.</param>
            <param name="direction">The change in position, relative to the current position.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutMoveNodeOperation.State">
            <summary>
            State moved.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMoveNodeOperation.CreateMoveNodeOperation(System.Int32,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMoveNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOperation">
            <summary>
            Base for all operations modifying the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOperationGroup">
            <summary>
            Group of operations to make some tasks atomic.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOperationGroup.#ctor(EaslyController.Layout.ILayoutOperationReadOnlyList,EaslyController.Layout.ILayoutGenericRefreshOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutOperationGroup"/> class.
            </summary>
            <param name="operationList">List of operations belonging to this group.</param>
            <param name="refresh">Optional refresh operation to execute at the end of undo and redo.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutOperationGroup.OperationList">
            <summary>
            List of operations belonging to this group.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOperationGroup.MainOperation">
            <summary>
            The main operation for this group.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOperationGroup.Refresh">
            <summary>
            Optional refresh operation to execute at the end of undo and redo.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutRemoveBlockViewOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutRemoveBlockViewOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRemoveBlockViewOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutRemoveBlockViewOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutRemoveBlockViewOperation.BlockState">
            <summary>
            Block state removed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutRemoveBlockOperation">
            <summary>
            Operation details for removing a block from a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRemoveBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutRemoveBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block removal is taking place.</param>
            <param name="propertyName">Block list property of <paramref name="parentNode"/> where a block is removed.</param>
            <param name="blockIndex">index of the removed block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutRemoveBlockOperation.BlockState">
            <summary>
            The removed block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutRemoveBlockOperation.RemovedState">
            <summary>
            The removed state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRemoveBlockOperation.CreateInsertBlockOperation(System.Int32,BaseNode.IBlock,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertBlockOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutRemoveNodeOperation.RemovedState">
            <summary>
            State removed.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutRemoveNodeOperation">
            <summary>
            Operation details for removing a node in a list or block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRemoveNodeOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutRemoveNodeOperation"/> class.
            </summary>
            <param name="parentNode">Node where the removal is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where a node is removed.</param>
            <param name="blockIndex">Block position where the node is removed, if applicable.</param>
            <param name="index">Position of the removed node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutRemoveNodeOperation.RemovedState">
            <summary>
            State removed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRemoveNodeOperation.CreateInsertNodeOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxInsertNodeOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutRemoveOperation">
            <summary>
            Details for removal operations.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRemoveOperation.#ctor(System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutRemoveOperation"/> class.
            </summary>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutReplaceWithCycleOperation">
            <summary>
            Operation details for replacing a node with another from a cycle.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutReplaceWithCycleOperation.CycleIndexList">
            <summary>
            Cycle of nodes that can replace the current node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutReplaceWithCycleOperation">
            <summary>
            Operation details for replacing a node with another from a cycle.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutReplaceWithCycleOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,EaslyController.Layout.ILayoutInsertionChildNodeIndexList,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutReplaceWithCycleOperation"/> class.
            </summary>
            <param name="parentNode">Node where the replacement is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is replaced.</param>
            <param name="blockIndex">Block position where the node is replaced, if applicable.</param>
            <param name="index">Position where the node is replaced, if applicable.</param>
            <param name="cycleIndexList">Cycle of nodes that can replace the current node.</param>
            <param name="cyclePosition">New position in the cycle.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceWithCycleOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceWithCycleOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceWithCycleOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceWithCycleOperation.CycleIndexList">
            <summary>
            Cycle of nodes that can replace the current node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutReplaceWithCycleOperation.CreateReplaceWithCycleOperation(System.Int32,System.Int32,EaslyController.Focus.IFocusInsertionChildNodeIndexList,System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutReplaceOperation">
            <summary>
            Operation details for replacing a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutReplaceOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutReplaceOperation"/> class.
            </summary>
            <param name="parentNode">Node where the replacement is taking place.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the node is replaced.</param>
            <param name="blockIndex">Block position where the node is replaced, if applicable.</param>
            <param name="index">Position where the node is replaced, if applicable.</param>
            <param name="newNode">The new node. Null to clear an optional node.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceOperation.OldBrowsingIndex">
            <summary>
            Index of the state before it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceOperation.NewBrowsingIndex">
            <summary>
            Index of the state after it's replaced.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutReplaceOperation.NewChildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutReplaceOperation.CreateReplaceOperation(System.Int32,System.Int32,BaseNode.INode,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxReplaceOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSplitBlockOperation">
            <summary>
            Operation details for splitting a block in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSplitBlockOperation.#ctor(BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.IBlock,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutSplitBlockOperation"/> class.
            </summary>
            <param name="parentNode">Node where the block is split.</param>
            <param name="propertyName">Property of <paramref name="parentNode"/> where the block is split.</param>
            <param name="blockIndex">Position of the split block.</param>
            <param name="index">Position of the last node to stay in the old block.</param>
            <param name="newBlock">The inserted block.</param>
            <param name="handlerRedo">Handler to execute to redo the operation.</param>
            <param name="handlerUndo">Handler to execute to undo the operation.</param>
            <param name="isNested">True if the operation is nested within another more general one.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutSplitBlockOperation.BlockState">
            <summary>
            The inserted block state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSplitBlockOperation.CreateMergeBlocksOperation(System.Int32,System.Action{EaslyController.Writeable.IWriteableOperation},System.Action{EaslyController.Writeable.IWriteableOperation},System.Boolean)">
            <summary>
            Creates a IxxxxMergeBlocksOperation object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCycleManager">
            <summary>
            Base interface for cycle managers.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCycleManager">
            <summary>
            Base class for cycle managers.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCycleManagerBody">
            <summary>
            Cycle manager for IBody nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCycleManagerBody">
            <summary>
            Cycle manager for IBody nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCycleManagerFeature">
            <summary>
            Cycle manager for IFeature nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCycleManagerFeature">
            <summary>
            Cycle manager for IFeature nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTextFocus">
            <summary>
            Focus on a text focusable cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutTextFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCommentFocus">
            <summary>
            Focus on a comment cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCommentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCommentFocus">
            <summary>
            Focus on a comment cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFocus.#ctor(EaslyController.Layout.ILayoutCommentCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCommentFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDiscreteContentFocus">
            <summary>
            Focus on a discrete content focusable cell view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutDiscreteContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutDiscreteContentFocus">
            <summary>
            Focus on a discrete content focusable cell view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentFocus.#ctor(EaslyController.Layout.ILayoutDiscreteContentFocusableCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutDiscreteContentFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFocus">
            <summary>
            Base focus.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFocus">
            <summary>
            Base focus.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutFocus.#ctor(EaslyController.Layout.ILayoutFocusableCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutStringContentFocus">
            <summary>
            Focus on a cell view for a string property.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutStringContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutStringContentFocus">
            <summary>
            Focus on a cell view for a string property.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentFocus.#ctor(EaslyController.Layout.ILayoutStringContentFocusableCellView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutStringContentFocus"/> class.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentFocus.CellView">
            <summary>
            The cell view with the focus.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockFrameVisibility">
            <summary>
            Base frame visibility for block frames.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutComplexFrameVisibility">
            <summary>
            Frame visibility that depends on the IsComplex template property.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutComplexFrameVisibility">
            <summary>
            Frame visibility that depends on the IsComplex template property.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCountFrameVisibility">
            <summary>
            Frame visibility that depends if a collection has at least one item.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCountFrameVisibility">
            <summary>
            Frame visibility that depends if a collection has at least one item.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDefaultDiscreteFrameVisibility">
            <summary>
            Frame visibility that depends if an enum or boolean has the default value.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutDefaultDiscreteFrameVisibility">
            <summary>
            Frame visibility that depends if an enum or boolean has the default value.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameVisibility">
            <summary>
            Base frame visibility.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFrameVisibility">
            <summary>
            Base frame visibility.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutMixedFrameVisibility">
            <summary>
            Frame visibility that shows if one frame visibility among a list does.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutMixedFrameVisibility.Items">
            <summary>
            List of frame visibilities that must be satisfied at least for one.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutMixedFrameVisibility">
            <summary>
            Frame visibility that shows if one frame visibility among a list does.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutMixedFrameVisibility.Items">
            <summary>
            List of frame visibilities that must be satisfied at least for one.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutMixedFrameVisibility.CreateNodeFrameVisibilityList">
            <summary>
            Creates a IxxxNodeFrameVisibilityList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeFrameVisibility">
            <summary>
            Base frame visibility for node frames.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNotFirstItemFrameVisibility">
            <summary>
            Frame visibility that depends if the current state is not the first in the parent.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNotFirstItemFrameVisibility">
            <summary>
            Frame visibility that depends if the current state is not the first in the parent.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalFrameVisibility">
            <summary>
            Frame visibility that depends if an optional node is assigned.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOptionalFrameVisibility">
            <summary>
            Frame visibility that depends if an optional node is assigned.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutReplicationFrameVisibility">
            <summary>
            Frame visibility that depends if the current block is replicated.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutReplicationFrameVisibility">
            <summary>
            Frame visibility that depends if the current block is replicated.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTextMatchFrameVisibility">
            <summary>
            Frame visibility that depends on the IsTextMatch template property.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutTextMatchFrameVisibility">
            <summary>
            Frame visibility that depends on the IsTextMatch template property.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCommentFrame">
            <summary>
            Frame to display comments.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutCommentFrame.Print(EaslyController.Layout.ILayoutPrintContext,System.String,EaslyController.Controller.Point)">
            <summary>
            Prints a comment created with this frame.
            The comment string is provided explicitely.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="text">The text to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutCommentFrame">
            <summary>
            Frame to display comments.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFrame.Print(EaslyController.Layout.ILayoutPrintContext,System.String,EaslyController.Controller.Point)">
            <summary>
            Prints a comment created with this frame.
            The comment string is provided explicitely.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="text">The text to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFrame.CreateCommentCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,BaseNode.IDocument)">
            <summary>
            Creates a IxxxCommentCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentFrame.CreateEmptyCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockFrame">
            <summary>
            Frame for cells within a block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockListFrame">
            <summary>
            Base frame for a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockListFrame">
            <summary>
            Base frame for a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCharacterFrame">
            <summary>
            Frame describing a single-character string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCharacterFrame">
            <summary>
            Frame describing a single-character string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCharacterFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCharacterFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCharacterFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCharacterFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCharacterFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCharacterFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCharacterFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCharacterFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutCharacterFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCharacterFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCollectionPlaceholderFrame">
            <summary>
            Base frame for a placeholder node in a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCollectionPlaceholderFrame">
            <summary>
            Base frame for a placeholder node in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCollectionPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCollectionPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutCollectionPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDiscreteFrame">
            <summary>
            Frame describing an enum value that can be displayed with different frames depending on its value.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutDiscreteFrame.Items">
            <summary>
            List of frames that can be displayed.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDiscreteFrame.Print(EaslyController.Layout.ILayoutPrintContext,System.Int32,EaslyController.Controller.Point)">
            <summary>
            Prints a discrete value created with this frame.
            The value is provided explicitely.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="value">The value to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutDiscreteFrame">
            <summary>
            Frame describing an enum value that can be displayed with different frames depending on its value.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteFrame.Items">
            <summary>
            List of frames that can be displayed.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.Print(EaslyController.Layout.ILayoutPrintContext,System.Int32,EaslyController.Controller.Point)">
            <summary>
            Prints a discrete value created with this frame.
            The value is provided explicitely.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="value">The value to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.CreateKeywordFrameList">
            <summary>
            Creates a IxxxKeywordFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.CreateDiscreteContentFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameKeywordFrame)">
            <summary>
            Creates a IxxxDiscreteContentFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPrintableFrame">
            <summary>
            Frames that have associated cells that can be displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutPrintableFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDrawableFrame">
            <summary>
            Frames that have associated cells that can be displayed.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutDrawableFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameWithMargins">
            <summary>
            Frame that can have left and right margins.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrameWithMargins.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrameWithMargins.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameWithVerticalSeparator">
            <summary>
            Frame that can have a vertical separator.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrameWithVerticalSeparator.Separator">
            <summary>
            Vertical separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameWithHorizontalSeparator">
            <summary>
            Frame that can have an horizontal separator.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrameWithHorizontalSeparator.Separator">
            <summary>
            Horizontal separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameWithTextStyle">
            <summary>
            Frame that can have a custom text style.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrameWithTextStyle.TextStyle">
            <summary>
            Text style.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockFrameWithVisibility">
            <summary>
            Block Frame that can have a custom visibility.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockFrameWithVisibility.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVerticalTabulatedFrame">
            <summary>
            Frames that can have a tabulation margin on their left.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutVerticalTabulatedFrame.HasTabulationMargin">
            <summary>
            Indicates that the frame should have a tabulation margin on the left.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutMeasurableFrame">
            <summary>
            Frames that have associated cells that can be measured and arranged.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutMeasurableFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrame">
            <summary>
            Base frame.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFrame">
            <summary>
            Base frame.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFrame.LayoutRoot">
            <summary>
            Singleton object representing the root of a tree of frames.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutHorizontalBlockListFrame">
            <summary>
            Frame for a block list displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutHorizontalBlockListFrame">
            <summary>
            Frame for a block list displayed horizontally.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalBlockListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalBlockListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalBlockListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalBlockListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalBlockListFrame.Separator">
            <summary>
            Horizontal separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalBlockListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalBlockListFrame.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalBlockListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutHorizontalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed horizontally.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.Separator">
            <summary>
            Horizontal separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalCollectionPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutHorizontalListFrame">
            <summary>
            Base frame for a list of nodes displayed horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutHorizontalListFrame">
            <summary>
            Base frame for a list of nodes displayed horizontally.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalListFrame.Separator">
            <summary>
            Horizontal separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalListFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutHorizontalPanelFrame">
            <summary>
            Frame for displaying more frames horizontally.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutHorizontalPanelFrame">
            <summary>
            Frame for displaying more frames horizontally.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.HasBlockGeometry">
            <summary>
            Indicates that block geometry must be drawn around a block.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutHorizontalPanelFrame.Separator">
            <summary>
            Horizontal separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalPanelFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalPanelFrame.CreateItems">
            <summary>
            Creates a IxxxFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalPanelFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalPanelFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFramePlaceholderFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutHorizontalPanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertFrame">
            <summary>
            Frame for bringing the focus to an insertion point.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertFrame">
            <summary>
            Frame for bringing the focus to an insertion point.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutInsertFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertFrame.CreateFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutKeywordFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutKeywordFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Controller.Point)">
            <summary>
            Prints the keyword.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutKeywordFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutKeywordFrame.TextStyle">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Controller.Point)">
            <summary>
            Prints the keyword.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.CreateFocusableCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxVisibleCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutKeywordFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutListFrame">
            <summary>
            Base frame for a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutListFrame">
            <summary>
            Base frame for a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNamedFrame">
            <summary>
            Base frame for frames that describe property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNamedFrame">
            <summary>
            Base frame for frames that describe property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNamedFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNamedFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeFrame">
            <summary>
            Frame for cells within a single node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameWithSelector">
            <summary>
            Frame that can have selectors.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutFrameWithSelector.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeFrameWithVisibility">
            <summary>
            Frame that can have a custom visibility.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeFrameWithVisibility.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNumberFrame">
            <summary>
            Frame describing a number string value property in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNumberFrame">
            <summary>
            Frame describing a number string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNumberFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNumberFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNumberFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNumberFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNumberFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNumberFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutNumberFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutNumberFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutNumberFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNumberFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalFrame">
            <summary>
            Frame for describing an optional child node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOptionalFrame">
            <summary>
            Frame for describing an optional child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPanelFrame">
            <summary>
            Base frame for displaying more frames.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPanelFrame.HasBlockGeometry">
            <summary>
            Indicates that block geometry must be drawn around a block.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPanelFrame">
            <summary>
            Base frame for displaying more frames.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPanelFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPanelFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPanelFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPanelFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPanelFrame.HasBlockGeometry">
            <summary>
            Indicates that block geometry must be drawn around a block.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderFrame">
            <summary>
            Frame for describing an child node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPlaceholderFrame">
            <summary>
            Frame for describing an child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSelectableFrame">
            <summary>
            Frame selectable by name.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSelectableFrame.Content">
            <summary>
            The selectable frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSelectableFrame">
            <summary>
            Frame selectable by name.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelectableFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelectableFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelectableFrame.Content">
            <summary>
            The selectable frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSelectionFrame">
            <summary>
            Frame selecting sub-frames.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSelectionFrame.Items">
            <summary>
            List of frames among which to select.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSelectionFrame">
            <summary>
            Frame selecting sub-frames.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelectionFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelectionFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelectionFrame.Items">
            <summary>
            List of frames among which to select.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSelectionFrame.UpdateParent(EaslyController.Frame.IFrameTemplate,EaslyController.Frame.IFrameFrame)">
            <summary>
            Update the reference to the parent frame.
            </summary>
            <param name="parentTemplate">The parent template.</param>
            <param name="parentFrame">The parent frame.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSelectionFrame.CreateSelectableFrameList">
            <summary>
            Creates a IxxxSelectableFrameList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSelectorPropertyFrame">
            <summary>
            Frame that can have a property associated to a selector (or children).
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutStaticFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutStaticFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStaticFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStaticFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutStaticFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStaticFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutStaticFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutStaticFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSymbolFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSymbolFrame">
            <summary>
            Frame for decoration purpose only.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSymbolFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSymbolFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSymbolFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSymbolFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSymbolFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSymbolFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSymbolFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSymbolFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSymbolFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxVisibleCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSymbolFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTextValueFrame">
            <summary>
            Frame describing a string value property in a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutTextValueFrame.Print(EaslyController.Layout.ILayoutPrintContext,System.String,EaslyController.Controller.Point)">
            <summary>
            Prints text created with this frame.
            The text string is provided explicitely.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="text">The text to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutTextValueFrame">
            <summary>
            Frame describing a string value property in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTextValueFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTextValueFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTextValueFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTextValueFrame.LeftMargin">
            <summary>
            Margin at the left side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTextValueFrame.RightMargin">
            <summary>
            Margin at the right side of the cell.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTextValueFrame.TextStyle">
            <summary>
            Text style.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTextValueFrame.Measure(EaslyController.Layout.ILayoutMeasureContext,EaslyController.Layout.ILayoutCellView,EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure,EaslyController.Controller.Size@,EaslyController.Controller.Padding@)">
            <summary>
            Measures a cell created with this frame.
            </summary>
            <param name="measureContext">The context used to measure the cell.</param>
            <param name="cellView">The cell to measure.</param>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
            <param name="size">The cell size upon return, padding included.</param>
            <param name="padding">The cell padding.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutTextValueFrame.Draw(EaslyController.Layout.ILayoutDrawContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Draws a cell created with this frame.
            </summary>
            <param name="drawContext">The context used to draw the cell.</param>
            <param name="cellView">The cell to draw.</param>
            <param name="origin">The location where to start drawing.</param>
            <param name="size">The drawing size, padding included.</param>
            <param name="padding">The padding to use when drawing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutTextValueFrame.Print(EaslyController.Layout.ILayoutPrintContext,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Point,EaslyController.Controller.Size,EaslyController.Controller.Padding)">
            <summary>
            Prints a cell created with this frame.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="cellView">The cell to print.</param>
            <param name="origin">The location where to start printing.</param>
            <param name="size">The printing size, padding included.</param>
            <param name="padding">The padding to use when printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutTextValueFrame.Print(EaslyController.Layout.ILayoutPrintContext,System.String,EaslyController.Controller.Point)">
            <summary>
            Prints text created with this frame.
            The text string is provided explicitely.
            </summary>
            <param name="printContext">The context used to print the cell.</param>
            <param name="text">The text to print.</param>
            <param name="origin">The location where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutTextValueFrame.CreateVisibleCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxTextFocusableCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTextValueFrame.CreateEmptyCellView(EaslyController.Focus.IFocusNodeStateView,EaslyController.Focus.IFocusCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutValueFrame">
            <summary>
            Frame describing a value property (or string) in a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutValueFrame">
            <summary>
            Frame describing a value property (or string) in a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutValueFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutValueFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutValueFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVerticalBlockListFrame">
            <summary>
            Frame for a block list displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutVerticalBlockListFrame">
            <summary>
            Frame for a block list displayed vertically.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalBlockListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalBlockListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalBlockListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalBlockListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalBlockListFrame.HasTabulationMargin">
            <summary>
            Indicates that the frame should have a tabulation margin on the left.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalBlockListFrame.Separator">
            <summary>
            Vertical separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalBlockListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalBlockListFrame.CreateBlockCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameBlockStateView)">
            <summary>
            Creates a IxxxBlockCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalBlockListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalBlockListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVerticalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame">
            <summary>
            Frame for a placeholder node in a block list displayed vertically.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.Separator">
            <summary>
            Vertical separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalCollectionPlaceholderFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVerticalListFrame">
            <summary>
            Base frame for a list of nodes displayed vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutVerticalListFrame">
            <summary>
            Base frame for a list of nodes displayed vertically.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalListFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalListFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalListFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalListFrame.Selectors">
            <summary>
            List of optional selectors.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalListFrame.HasTabulationMargin">
            <summary>
            Indicates that the frame should have a tabulation margin on the left.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalListFrame.Separator">
            <summary>
            Vertical separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalListFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalListFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalListFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalListFrame.CreateEmptySelectorList">
            <summary>
            Creates a IxxxFrameSelectorList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutVerticalPanelFrame">
            <summary>
            Frame for displaying more frames vertically.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutVerticalPanelFrame">
            <summary>
            Frame for displaying more frames vertically.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.ParentTemplate">
            <summary>
            Parent template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.ParentFrame">
            <summary>
            Parent frame, or null for the root frame in a template.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.Items">
            <summary>
            List of frames within this frame.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.Visibility">
            <summary>
            Node frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.BlockVisibility">
            <summary>
            Block frame visibility. Null if always visible.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.HasTabulationMargin">
            <summary>
            Indicates that the frame should have a tabulation margin on the left.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.HasBlockGeometry">
            <summary>
            Indicates that block geometry must be drawn around a block.
            (Set in Xaml)
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutVerticalPanelFrame.Separator">
            <summary>
            Vertical separator.
            (Set in Xaml)
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalPanelFrame.IsValid(System.Type,EaslyController.Frame.IFrameTemplateReadOnlyDictionary,System.Int32@)">
            <summary>
            Checks that a frame is correctly constructed.
            </summary>
            <param name="nodeType">Type of the node this frame can describe.</param>
            <param name="nodeTemplateTable">Table of templates with all frames.</param>
            <param name="commentFrameCount">Number of comment frames found so far.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalPanelFrame.CreateItems">
            <summary>
            Creates a IxxxFrameList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalPanelFrame.CreateCellViewList">
            <summary>
            Creates a IxxxCellViewList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalPanelFrame.CreateFrameCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFramePlaceholderFrame)">
            <summary>
            Creates a IxxxContainerCellView object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutVerticalPanelFrame.CreateEmbeddingCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection,EaslyController.Frame.IFrameCellViewList)">
            <summary>
            Creates a IxxxCellViewCollection object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingBlockNodeIndex">
            <summary>
            Base for block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingBlockNodeIndex.#ctor(BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingBlockNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingCollectionNodeIndex">
            <summary>
            Base for list and block list index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingCollectionNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingCollectionNodeIndex"/> class.
            </summary>
            <param name="node">The indexed node.</param>
            <param name="propertyName">The property for the index.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingExistingBlockNodeIndex">
            <summary>
            Index for a node in a block that is not the first.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingExistingBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">Indexed node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position of the node in the block.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingExistingBlockNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingListNodeIndex">
            <summary>
            Index for a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingListNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="node">Indexed node in the list</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="index">Position of the node in the list.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingListNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingNewBlockNodeIndex">
            <summary>
            Index for the first node in a block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingNewBlockNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingNewBlockNodeIndex.CreateExistingBlockIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingChildIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingInsertableIndex">
            <summary>
            Index for a child node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndexCollection">
            <summary>
            Collection of node indexes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutIndexCollection`1">
            <summary>
            Collection of node indexes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutIndexCollection`1.#ctor(System.String,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutIndexCollection`1"/> class.
            </summary>
            <param name="propertyName">Property indexed for all nodes in the collection.</param>
            <param name="nodeIndexList">Collection of node indexes.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingOptionalNodeIndex">
            <summary>
            Index for an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingOptionalNodeIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingOptionalNodeIndex.CreateInsertionOptionalNodeIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingOptionalNodeIndex.CreateInsertionOptionalClearIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionOptionalClearIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingPatternIndex">
            <summary>
            Index for the replication pattern node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingPatternIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingPatternIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed replication pattern node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingPatternIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingPlaceholderNodeIndex">
            <summary>
            Index for a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingPlaceholderNodeIndex.#ctor(BaseNode.INode,BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed node.</param>
            <param name="node">The indexed node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingPlaceholderNodeIndex.CreateInsertionIndex(BaseNode.INode,BaseNode.INode)">
            <summary>
            Creates a IxxxInsertionPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBrowsingSourceIndex">
            <summary>
            Index for the source identifier node of a block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingSourceIndex.#ctor(BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBrowsingSourceIndex"/> class.
            </summary>
            <param name="block">The block containing the indexed source identifier node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBrowsingSourceIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionBlockNodeIndex">
            <summary>
            Base for block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionCollectionNodeIndex">
            <summary>
            Base for list and block list insertion index classes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionCollectionNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionCollectionNodeIndex"/> class.
            </summary>
            <param name="parentNode">The node in which the insertion operation is taking place.</param>
            <param name="propertyName">The property for the index.</param>
            <param name="node">The inserted node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionCollectionNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionExistingBlockNodeIndex">
            <summary>
            Index for inserting a node in an existing block of a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionExistingBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionExistingBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list..</param>
            <param name="node">Inserted node.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the block.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionExistingBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionExistingBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionListNodeIndex">
            <summary>
            Index for inserting a node in a list of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionListNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionListNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the list.</param>
            <param name="node">Inserted node.</param>
            <param name="index">Position where to insert <paramref name="node"/> in the list.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionListNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionListNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionNewBlockNodeIndex">
            <summary>
            Index for inserting the first node of a new block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionNewBlockNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionNewBlockNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the block list.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the block list.</param>
            <param name="node">First node in the block.</param>
            <param name="blockIndex">Position of the block in the block list.</param>
            <param name="patternNode">Replication pattern in the block.</param>
            <param name="sourceNode">Source identifier in the block.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionNewBlockNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionNewBlockNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionChildIndex">
            <summary>
            Index for an inserted child.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionChildNodeIndex">
            <summary>
            Index for an inserted child node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionOptionalClearIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionOptionalClearIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionOptionalClearIndex.#ctor(BaseNode.INode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionOptionalClearIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionOptionalClearIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionOptionalClearIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionOptionalNodeIndex">
            <summary>
            Index for replacing an optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionOptionalNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionOptionalNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the indexed optional node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed optional node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionOptionalNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionOptionalNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInsertionPlaceholderNodeIndex">
            <summary>
            Index for replacing a child a node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionPlaceholderNodeIndex.#ctor(BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInsertionPlaceholderNodeIndex"/> class.
            </summary>
            <param name="parentNode">Node containing the replaced node.</param>
            <param name="propertyName">Property in <paramref name="parentNode"/> corresponding to the indexed node.</param>
            <param name="node">The assigned node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionPlaceholderNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutInsertionPlaceholderNodeIndex.CreateBrowsingIndex">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutChildIndex">
            <summary>
            Base interface for any index representing the child node of a parent node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutIndex">
            <summary>
            Base interface for any index.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeIndex">
            <summary>
            Base interface for any index representing a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutRootNodeIndex">
            <summary>
            Index for the root node of the node tree.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutRootNodeIndex.#ctor(BaseNode.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutRootNodeIndex"/> class.
            </summary>
            <param name="node">The indexed root node.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutRootNodeIndex.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutIndex"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCollectionInner">
            <summary>
            Base inner for a list or a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCollectionInner`1">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutCollectionInner`2">
            <summary>
            Base inner for a list or a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutCollectionInner`2.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCollectionInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutCollectionInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockListInner">
            <summary>
            Inner for a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockListInner.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockListInner`1">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockListInner`1.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockListInner`2">
            <summary>
            Inner for a block list.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBlockListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListInner`2.BlockStateList">
            <summary>
            States of blocks in the block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.CreateBlockStateList">
            <summary>
            Creates a IxxxBlockStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.CreateBlockState(EaslyController.ReadOnly.IReadOnlyBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Creates a IxxxBlockState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.CreateBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListInner`2.CreateNewBlockNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutListInner">
            <summary>
            Inner for a list of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutListInner.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutListInner.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutListInner`1">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Layout.ILayoutListInner`1.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutListInner`1.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutListInner`2">
            <summary>
            Inner for a list of nodes.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutListInner`2.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutListInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutListInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutListInner`2.StateList">
            <summary>
            States of nodes in the list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutListInner`2.FirstNodeState">
            <summary>
            First node state that can be enumerated in the inner.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutListInner`2.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutListInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutListInner`2.CreateListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutListInner`2.CreateBrowsingNodeIndex(BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInner">
            <summary>
            Interface for all inners.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInner.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Layout.ILayoutInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutInner`1">
            <summary>
            Interface for all inners.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutInner`1.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalInner">
            <summary>
            Inner for an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOptionalInner.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalInner`1">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOptionalInner`1.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOptionalInner`2">
            <summary>
            Inner for an optional node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalInner`2.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutOptionalInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxOptionalNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalInner`2.CreateBrowsingNodeIndex">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderInner">
            <summary>
            Inner for a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPlaceholderInner.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderInner`1">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPlaceholderInner`1.ChildState">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPlaceholderInner`2">
            <summary>
            Inner for a child node.
            </summary>
            <typeparam name="IIndex">Type of the index as interface.</typeparam>
            <typeparam name="TIndex">Type of the index as class.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderInner`2.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutPlaceholderInner`2"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderInner`2.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderInner`2.ChildState">
            <summary>
            The state of the optional node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderInner`2.CreateNodeState(EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxPlaceholderNodeState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderInner`2.CreateBrowsingNodeIndex(BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSingleInner">
            <summary>
            Base inner for a single node inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutSingleInner`1">
            <summary>
            Base inner for a single node inner.
            </summary>
            <typeparam name="IIndex">Type of the index.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutSingleInner`1.#ctor(EaslyController.Layout.ILayoutNodeState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutSingleInner`1"/> class.
            </summary>
            <param name="owner">Parent containing the inner.</param>
            <param name="propertyName">Property name of the inner in <paramref name="owner"/>.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutSingleInner`1.Owner">
            <summary>
            Parent containing the inner.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutEmptySelection">
            <summary>
            An empty selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutEmptySelection">
            <summary>
            An empty selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptySelection.#ctor(EaslyController.Layout.ILayoutNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutEmptySelection"/> class.
            </summary>
            <param name="stateView">The selected state view.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutEmptySelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptySelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptySelection.CreateListNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptySelection.CreateNewBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Creates a IxxxInsertionNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutEmptySelection.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockListSelection">
            <summary>
            A selection of blocks in a block list.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockListSelection">
            <summary>
            A selection of blocks in a block list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBlockListSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first selected block.</param>
            <param name="endIndex">Index of the last selected block.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockListSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListSelection.CreateNewBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,BaseNode.IPattern,BaseNode.IIdentifier)">
            <summary>
            Creates a IxxxInsertionNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockListSelection.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockNodeListSelection">
            <summary>
            A selection of nodes in a block of a list block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockNodeListSelection">
            <summary>
            A selection of nodes in a block of a list block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockNodeListSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBlockNodeListSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="blockIndex">Index of the block.</param>
            <param name="startIndex">Index of the first selected node in the list.</param>
            <param name="endIndex">Index of the last selected node in the list.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockNodeListSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockNodeListSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockNodeListSelection.CreateExistingBlockNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32,System.Int32)">
            <summary>
            Creates a IxxxInsertionExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeListSelection">
            <summary>
            A selection of nodes in a list.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeListSelection">
            <summary>
            A selection of nodes in a list.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeListSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutNodeListSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="startIndex">Index of the first selected node in the list.</param>
            <param name="endIndex">Index of the last selected node in the list.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeListSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeListSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeListSelection.CreateListNodeIndex(BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxInsertionListNodeIndex object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCommentSelection">
            <summary>
            A selection of part of a comment.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutCommentSelection">
            <summary>
            A selection of part of a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutCommentSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="start">Index of the first character in the selected text.</param>
            <param name="end">Index following the last character in the selected text.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutCommentSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutCommentSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutContentSelection">
            <summary>
            A selection of a property of a node, or a partial selection for text.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutDiscreteContentSelection">
            <summary>
            A selection of discrete property (enum or boolean).
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutDiscreteContentSelection">
            <summary>
            A selection of discrete property (enum or boolean).
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutDiscreteContentSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutDiscreteContentSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutDiscreteContentSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeSelection">
            <summary>
            A selection of a node an all its content and children.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeSelection">
            <summary>
            A selection of a node an all its content and children.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutNodeSelection"/> class.
            </summary>
            <param name="stateView">The selected state view.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSelection">
            <summary>
            A selection of part of a node value, or a selection of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSelection">
            <summary>
            A selection of part of a node value, or a selection of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutStringContentSelection">
            <summary>
            A selection of part of a string property.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutStringContentSelection">
            <summary>
            A selection of part of a comment.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentSelection.#ctor(EaslyController.Layout.ILayoutNodeStateView,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutStringContentSelection"/> class.
            </summary>
            <param name="stateView">The state view that encompasses the selection.</param>
            <param name="propertyName">The property name.</param>
            <param name="start">Index of the first character in the selected text.</param>
            <param name="end">Index following the last character in the selected text.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutStringContentSelection.StateView">
            <summary>
            The state view that encompasses the selection.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutStringContentSelection.Print">
            <summary>
            Prints the selection.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTextSelection">
            <summary>
            A selection of text, either in a string property or comment.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.Template">
            <summary>
            The template used to display the block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.EmbeddingCellView">
            <summary>
            List of cell views for each child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.CellOrigin">
            <summary>
            Location of the block state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.CellSize">
            <summary>
            Floating size of cells in this block state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockStateView.ActualCellSize">
            <summary>
            Actual size of cells in this block state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutBlockStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this block state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutBlockStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this block state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutBlockStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this block state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutBlockStateView.DrawCells">
            <summary>
            Draws cells in this block state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutBlockStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in this block state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockStateView">
            <summary>
            View of a block state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutBlockState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBlockStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="blockState">The block state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.BlockState">
            <summary>
            The block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.Template">
            <summary>
            The template used to display the block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.EmbeddingCellView">
            <summary>
            List of cell views for each child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.CellOrigin">
            <summary>
            Location of the block state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.CellSize">
            <summary>
            Floating size of cells in this block state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockStateView.ActualCellSize">
            <summary>
            Actual size of cells in this block state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this block state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this block state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this block state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.DrawCells">
            <summary>
            Draws cells in this block state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in this block state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutBlockStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.CellOrigin">
            <summary>
            Location of the state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.CellSize">
            <summary>
            Floating size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.ActualCellSize">
            <summary>
            Actual size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeStateView.CellRect">
            <summary>
            Rectangular region for cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutNodeStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutNodeStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.ILayoutNodeStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutNodeStateView.DrawCells">
            <summary>
            Draws cells in the state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.ILayoutNodeStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in the state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeStateView">
            <summary>
            View of a node state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeStateView.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The node state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.State">
            <summary>
            The node state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.CellOrigin">
            <summary>
            Location of the state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.CellSize">
            <summary>
            Floating size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.ActualCellSize">
            <summary>
            Actual size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeStateView.CellRect">
            <summary>
            Rectangular region for cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeStateView.DrawCells">
            <summary>
            Draws cells in the state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in the state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutOptionalNodeStateView">
            <summary>
            View of an optional node state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutOptionalNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutOptionalNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The optional node state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.State">
            <summary>
            The optional node state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.CellOrigin">
            <summary>
            Location of the state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.CellSize">
            <summary>
            Floating size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.ActualCellSize">
            <summary>
            Actual size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeStateView.CellRect">
            <summary>
            Rectangular region for cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.DrawCells">
            <summary>
            Draws cells in the state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.DrawSelection">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in the state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutOptionalNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeStateView.CreateEmptyCellView(EaslyController.Frame.IFrameNodeStateView,EaslyController.Frame.IFrameCellViewCollection)">
            <summary>
            Creates a IxxxEmptyCellView object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPatternStateView">
            <summary>
            View of a pattern state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutPatternState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutPatternStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The pattern state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.CellOrigin">
            <summary>
            Location of the state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.CellSize">
            <summary>
            Floating size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.ActualCellSize">
            <summary>
            Actual size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternStateView.CellRect">
            <summary>
            Rectangular region for cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.DrawCells">
            <summary>
            Draws cells in the state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.DrawSelection">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in the state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutPatternStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutPlaceholderNodeStateView">
            <summary>
            View of a child node.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutPlaceholderNodeState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutPlaceholderNodeStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The child node state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.State">
            <summary>
            The child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.CellOrigin">
            <summary>
            Location of the state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.CellSize">
            <summary>
            Floating size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.ActualCellSize">
            <summary>
            Actual size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeStateView.CellRect">
            <summary>
            Rectangular region for cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.DrawCells">
            <summary>
            Draws cells in the state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.DrawSelection">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in the state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutPlaceholderNodeStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutReplaceableStateView">
            <summary>
            A state view that can be replaced.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutSourceStateView">
            <summary>
            View of a source state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.#ctor(EaslyController.Layout.ILayoutControllerView,EaslyController.Layout.ILayoutSourceState)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutSourceStateView"/> class.
            </summary>
            <param name="controllerView">The controller view to which this object belongs.</param>
            <param name="state">The source state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.ControllerView">
            <summary>
            The controller view to which this object belongs.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.State">
            <summary>
            The pattern state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.Template">
            <summary>
            The template used to display the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.RootCellView">
            <summary>
            Root cell for the view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.CellViewTable">
            <summary>
            Table of cell views that are mutable lists of cells.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.ParentContainer">
            <summary>
            The cell view that is embedding this state view. Can be null.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.CellOrigin">
            <summary>
            Location of the state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.CellSize">
            <summary>
            Floating size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.ActualCellSize">
            <summary>
            Actual size of cells in this state view.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceStateView.CellRect">
            <summary>
            Rectangular region for cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.MeasureCells(EaslyController.Layout.ILayoutCellViewCollection,EaslyController.Layout.ILayoutCellView,EaslyController.Controller.Measure)">
            <summary>
            Measure all cells in this state view.
            </summary>
            <param name="collectionWithSeparator">A collection that can draw separators around the cell.</param>
            <param name="referenceContainer">The cell view in <paramref name="collectionWithSeparator"/> that contains this cell.</param>
            <param name="separatorLength">The length of the separator in <paramref name="collectionWithSeparator"/>.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.ArrangeCells(EaslyController.Controller.Point)">
            <summary>
            Arranges cells in this state view.
            </summary>
            <param name="origin">The cell location.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.UpdateActualCellsSize">
            <summary>
            Updates the actual size of cells in this state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.DrawCells">
            <summary>
            Draws cells in the state view.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.DrawSelection">
            <summary></summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.PrintCells(EaslyController.Controller.Point)">
            <summary>
            Prints cells in the state view.
            </summary>
            <param name="origin">The origin from where to start printing.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Layout.ILayoutSourceStateView"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceStateView.CreateCellViewTable">
            <summary>
            Creates a IxxxAssignableCellViewDictionary{string} object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockState">
            <summary>
            State of a block in a block list.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockState.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockState.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockState.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockState.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockState.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutBlockState.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockState`1">
            <summary>
            State of a block in a block list.
            </summary>
            <typeparam name="IInner">Parent inner of the block state.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.#ctor(EaslyController.Layout.ILayoutBlockListInner,EaslyController.Layout.ILayoutBrowsingNewBlockNodeIndex,BaseNode.IBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutBlockState`1"/> class.
            </summary>
            <param name="parentInner">Inner containing the block state.</param>
            <param name="newBlockIndex">Index that was used to create the block state.</param>
            <param name="childBlock">The block.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockState`1.ParentInner">
            <summary>
            The parent inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockState`1.PatternIndex">
            <summary>
            Index that was used to create the pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockState`1.PatternState">
            <summary>
            The pattern state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockState`1.SourceIndex">
            <summary>
            Index that was used to create the source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockState`1.SourceState">
            <summary>
            The source state for this block.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockState`1.StateList">
            <summary>
            States for nodes in the block.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreateStateList">
            <summary>
            Creates a IxxxPlaceholderNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreateInnerTable">
            <summary>
            Creates a IxxxInnerDictionary{string} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreatePatternInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreateSourceInner(EaslyController.ReadOnly.IReadOnlyNodeState)">
            <summary>
            Creates a IxxxPlaceholderInner{IxxxBrowsingPlaceholderNodeIndex} object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreateExistingPatternIndex">
            <summary>
            Creates a IxxxBrowsingPatternIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreateExistingSourceIndex">
            <summary>
            Creates a IxxxBrowsingSourceIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreatePatternState(EaslyController.ReadOnly.IReadOnlyBrowsingPatternIndex)">
            <summary>
            Creates a IxxxPatternState object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutBlockState`1.CreateSourceState(EaslyController.ReadOnly.IReadOnlyBrowsingSourceIndex)">
            <summary>
            Creates a IxxxSourceState object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutCyclableNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutCyclableNodeState.CycleIndexList">
            <summary>
            List of node indexes that can replace the current node. Can be null.
            Applies only to bodies and features.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeState">
            <summary>
            Base interface for the state of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeState.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutNodeState.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeState`1">
            <summary>
            Base interface for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeState`1">
            <summary>
            Base class for the state of a node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutNodeState`1.#ctor(EaslyController.Layout.ILayoutIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalNodeState">
            <summary>
            State of an optional node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOptionalNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutOptionalNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutOptionalNodeState`1">
            <summary>
            State of an optional node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.#ctor(EaslyController.Layout.ILayoutBrowsingOptionalNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutOptionalNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutOptionalNodeState`1.CycleIndexList">
            <summary>
            List of node indexes that can replace the current node. Can be null.
            Applies only to bodies and features.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutOptionalNodeState`1.CreateInsertionChildIndexList">
            <summary>
            Creates a IxxxInsertionChildIndexNodeList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPatternState">
            <summary>
            State of an replication pattern node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPatternState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPatternState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutPatternState`1">
            <summary>
            State of an replication pattern node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternState`1.#ctor(EaslyController.Layout.ILayoutBlockState,EaslyController.Layout.ILayoutBrowsingPatternIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutPatternState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPatternState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPatternState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderNodeState">
            <summary>
            State of an child node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPlaceholderNodeState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutPlaceholderNodeState.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutPlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutPlaceholderNodeState`1">
            <summary>
            State of an child node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.#ctor(EaslyController.Layout.ILayoutNodeIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutPlaceholderNodeState`1"/> class.
            </summary>
            <param name="parentIndex">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutPlaceholderNodeState`1.CycleIndexList">
            <summary>
            List of node indexes that can replace the current node. Can be null.
            Applies only to bodies and features.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateChildNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingPlaceholderNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateOptionalNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String)">
            <summary>
            Creates a IxxxBrowsingOptionalNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateListNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,BaseNode.INode,System.Int32)">
            <summary>
            Creates a IxxxBrowsingListNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateNewBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingNewBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateExistingBlockNodeIndex(EaslyController.ReadOnly.IReadOnlyBrowseContext,BaseNode.INode,System.String,System.Int32,System.Int32,BaseNode.INode)">
            <summary>
            Creates a IxxxBrowsingExistingBlockNodeIndex object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreatePlaceholderIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingPlaceholderNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingPlaceholderNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateOptionalIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingOptionalNodeIndex)">
            <summary>
            Creates a IxxxIndexCollection with one IxxxBrowsingOptionalNodeIndex.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateBrowsingListNodeIndexList">
            <summary>
            Creates a IxxxBrowsingListNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateListIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingListNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingListNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateBrowsingBlockNodeIndexList">
            <summary>
            Creates a IxxxBrowsingBlockNodeIndexList object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateBlockIndexCollection(EaslyController.ReadOnly.IReadOnlyBrowseContext,System.String,EaslyController.ReadOnly.IReadOnlyBrowsingBlockNodeIndexList)">
            <summary>
            Creates a IxxxIndexCollection with IxxxBrowsingBlockNodeIndex objects.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutPlaceholderNodeState`1.CreateInsertionChildIndexList">
            <summary>
            Creates a IxxxInsertionChildNodeIndexList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSourceState">
            <summary>
            State of a source identifier node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSourceState.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutSourceState.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="T:EaslyController.Layout.LayoutSourceState`1">
            <summary>
            State of a source identifier node.
            </summary>
            <typeparam name="IInner">Parent inner of the state.</typeparam>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceState`1.#ctor(EaslyController.Layout.ILayoutBlockState,EaslyController.Layout.ILayoutBrowsingSourceIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutSourceState`1"/> class.
            </summary>
            <param name="parentBlockState">The parent block state.</param>
            <param name="index">The index used to create the state.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceState`1.ParentBlockState">
            <summary>
            The parent block state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceState`1.ParentIndex">
            <summary>
            The index that was used to create the state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceState`1.ParentInner">
            <summary>
            Inner containing this state.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceState`1.ParentState">
            <summary>
            State of the parent.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutSourceState`1.InnerTable">
            <summary>
            Table for all inners in this state.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutSourceState`1.CreateNodeStateList">
            <summary>
            Creates a IxxxNodeStateList object.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutBlockTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutBlockTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutBlockTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutFrameSelector">
            <summary>
            Selects specific frames in the remaining of the cell view tree.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutFrameSelector">
            <summary>
            Selects specific frames in the remaining of the cell view tree.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutNodeTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutNodeTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutNodeTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutTemplate">
            <summary>
            Template describing all components of a node.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTemplate.Root">
            <summary>
            Root frame.
            (Set in Xaml)
            </summary>
        </member>
        <member name="T:EaslyController.Layout.ILayoutTemplateSet">
            <summary>
            Set of templates used to describe all possible nodes in the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutTemplateSet.NodeTemplateTable">
            <summary>
            Templates for nodes by their type.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.ILayoutTemplateSet.BlockTemplateTable">
            <summary>
            Templates for blocks of nodes.
            </summary>
        </member>
        <member name="T:EaslyController.Layout.LayoutTemplateSet">
            <summary>
            Set of templates used to describe all possible nodes in the tree.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTemplateSet.Default">
            <summary>
            Returns a default template set.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutTemplateSet"/> class.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.#ctor(EaslyController.Layout.ILayoutTemplateReadOnlyDictionary,EaslyController.Layout.ILayoutTemplateReadOnlyDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Layout.LayoutTemplateSet"/> class.
            </summary>
            <param name="nodeTemplateTable">Templates for nodes by their type.</param>
            <param name="blockTemplateTable">Templates for blocks of nodes.</param>
        </member>
        <member name="P:EaslyController.Layout.LayoutTemplateSet.NodeTemplateTable">
            <summary>
            Templates for nodes by their type.
            </summary>
        </member>
        <member name="P:EaslyController.Layout.LayoutTemplateSet.BlockTemplateTable">
            <summary>
            Templates for blocks of nodes.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateEmptyTemplateDictionary">
            <summary>
            Creates a IxxxTemplateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateDefaultTemplateDictionary">
            <summary>
            Creates a IxxxTemplateDictionary object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateHorizontalPanelFrame">
            <summary>
            Creates a IxxxHorizontalPanelFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateHorizontalCollectionPlaceholderFrame">
            <summary>
            Creates a IxxxHorizontalCollectionPlaceholderFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreatePlaceholderFrame">
            <summary>
            Creates a IxxxPlaceholderFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateOptionalFrame">
            <summary>
            Creates a IxxxOptionalFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateHorizontalListFrame">
            <summary>
            Creates a IxxxHorizontalListFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateHorizontalBlockListFrame">
            <summary>
            Creates a IxxxHorizontalBlockListFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateDiscreteFrame">
            <summary>
            Creates a IxxxDiscreteFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateKeywordFrame">
            <summary>
            Creates a IxxxKeywordFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateTextValueFrame">
            <summary>
            Creates a IxxxTextValueFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateCommentFrame">
            <summary>
            Creates a IxxxCommentFrame object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateNodeTemplate">
            <summary>
            Creates a IxxxTemplate object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateBlockTemplate">
            <summary>
            Creates a IxxxTemplate object.
            </summary>
        </member>
        <member name="M:EaslyController.Layout.LayoutTemplateSet.CreateDefaultTemplateSet(EaslyController.Frame.IFrameTemplateReadOnlyDictionary,EaslyController.Frame.IFrameTemplateReadOnlyDictionary)">
            <summary>
            Creates a IxxxTemplateSet object.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.AutoFormatModes">
            <summary>
            Modes for automatic formatting of identifiers and names.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.AutoFormatModes.None">
            <summary>
            No change performed.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.AutoFormatModes.FirstOnly">
            <summary>
            The first character of each word is uppercase and others lowercase.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.AutoFormatModes.FirstOrAll">
            <summary>
            First characters of each word are uppercase and only followed by lowercase characters until the next word.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.AutoFormatModes.AllLowercase">
            <summary>
            All characters are lower case.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.CopyFormats">
            <summary>
            Modes affecting how text is copied to the clipboard.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CopyFormats.Rtf">
            <summary>
            Use the RTF format. This is the default.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CopyFormats.Html">
            <summary>
            Use the HTML format.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CopyFormats.RawHtml">
            <summary>
            Use the raw HTML format.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CopyFormats.MarkdownHtml">
            <summary>
            Use the markdown-compatible format.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.CaretModes">
            <summary>
            Modes affecting how text is changed.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CaretModes.Insertion">
            <summary>
            New characters are inserted at the caret position.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CaretModes.Override">
            <summary>
            New characters override existing characters, if any. Otherwise they are added at the end of the text.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.CommentDisplayModes">
            <summary>
            Modes for displaying comments.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CommentDisplayModes.None">
            <summary>
            Do not display comments.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CommentDisplayModes.Tooltip">
            <summary>
            Display as tooltip over the mouse (cannot be edited).
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CommentDisplayModes.PermanentTooltip">
            <summary>
            Display as tooltip over each node (cannot be edited).
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CommentDisplayModes.OnFocus">
            <summary>
            Display as text that can be edited when it has the focus, hidden otherwise.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.CommentDisplayModes.All">
            <summary>
            Display as text that can be edited everywhere.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.HorizontalContainers">
            <summary>
            Container symbol around cells for a list or block list that contains more than one element.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalContainers.None">
            <summary>
            No symbol.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalContainers.Bracket">
            <summary>
            Left and right brackets.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalContainers.CurlyBracket">
            <summary>
            Left and right curly brackets.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalContainers.Parenthesis">
            <summary>
            Left and right curly parenthesis.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.HorizontalSeparators">
            <summary>
            Separators between cells of an horizontal list or block list of nodes.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalSeparators.None">
            <summary>
            No separator.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalSeparators.Comma">
            <summary>
            A comma with a whitespace.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.HorizontalSeparators.Dot">
            <summary>
            A dot.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.Margins">
            <summary>
            Margins to use when drawing frames.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Margins.None">
            <summary>
            No margin.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Margins.ThinSpace">
            <summary>
            A thin margin.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Margins.Whitespace">
            <summary>
            A margin the width of a whitespace character.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.SelectionStyles">
            <summary>
            Selection styles supported for drawing the selection.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.SelectionStyles.Text">
            <summary>
            Selection around some text.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.SelectionStyles.Node">
            <summary>
            Selection around a single node.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.SelectionStyles.NodeList">
            <summary>
            Selection around a list of nodes.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.SelectionStyles.BlockList">
            <summary>
            Selection around a list of blocks.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.TextStyles">
            <summary>
            Text styles supported for a IxxxTextValueFrame object.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Default">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Character">
            <summary>
            A single character.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Number">
            <summary>
            A number.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Keyword">
            <summary>
            A keyword.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Discrete">
            <summary>
            A discrete value (enum or boolean).
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Type">
            <summary>
            A type identifier.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.TextStyles.LineNumber">
            <summary>
            A line number.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.Symbols">
            <summary>
            Symbols supported for a IxxxSymbolFrame object.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.LeftArrow">
            <summary>
            Left arrow
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.Dot">
            <summary>
            .
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.InsertSign">
            <summary>
            A sign to indicate an insertion point
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.LeftBracket">
            <summary>
            [
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.RightBracket">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.LeftCurlyBracket">
            <summary>
            {
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.RightCurlyBracket">
            <summary>
            }
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.LeftParenthesis">
            <summary>
            (
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.RightParenthesis">
            <summary>
            )
            </summary>
        </member>
        <member name="F:EaslyController.Constants.Symbols.HorizontalLine">
            <summary>
            An horizontal line.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.ValuePropertyType">
            <summary>
            Types that a value in a node can be.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.ValuePropertyType.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.ValuePropertyType.Enum">
            <summary>
            A enumeration of discrete values.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.ValuePropertyType.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.ValuePropertyType.Guid">
            <summary>
            A <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:EaslyController.Constants.VerticalSeparators">
            <summary>
            Separators between cells of a vertical list or block list of nodes.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.VerticalSeparators.None">
            <summary>
            No separator.
            </summary>
        </member>
        <member name="F:EaslyController.Constants.VerticalSeparators.Line">
            <summary>
            Horizontal line.
            </summary>
        </member>
        <member name="T:EaslyController.Controller.CommentHelper">
            <summary>
            Helper class dedicated to managing comments.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.CommentHelper.Get(BaseNode.IDocument)">
            <summary>
            Gets a comment from a <see cref="T:BaseNode.IDocument"/>.
            </summary>
            <param name="documentation">The document with the comment.</param>
        </member>
        <member name="M:EaslyController.Controller.CommentHelper.Set(BaseNode.IDocument,System.String)">
            <summary>
            Sets the comment of a <see cref="T:BaseNode.IDocument"/>.
            </summary>
            <param name="documentation">The document with the comment.</param>
            <param name="text">The comment text.</param>
        </member>
        <member name="T:EaslyController.Controller.CRC32">
            <summary>
            A class to calculate the CRC of some input.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.CRC32.Get(System.UInt64)">
            <summary>
            Returns the CRC of a ulong value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:EaslyController.Controller.Measure">
            <summary>
            A measure used for drawing and printing.
            </summary>
        </member>
        <member name="F:EaslyController.Controller.Measure.Zero">
            <summary>
            The zero value.
            </summary>
        </member>
        <member name="F:EaslyController.Controller.Measure.Floating">
            <summary>
            The floating value.
            </summary>
        </member>
        <member name="F:EaslyController.Controller.Measure.Draw">
            <summary>
            The value for drawing.
            </summary>
        </member>
        <member name="F:EaslyController.Controller.Measure.Print">
            <summary>
            The value for printing.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Measure.IsZero">
            <summary>
            True if this measure is the zero value.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Measure.IsFloating">
            <summary>
            True if this measure is floating.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Measure.IsPositive">
            <summary>
            True if this measure is zero or above.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Measure.IsStrictlyPositive">
            <summary>
            True if this measure is above zero.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Measure.Opposite">
            <summary>
            The measure with opposite values.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Measure.op_Addition(EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Adds two measures.
            </summary>
            <param name="measure1">The first measure.</param>
            <param name="measure2">The second measure.</param>
        </member>
        <member name="M:EaslyController.Controller.Measure.op_Subtraction(EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Substract two measures.
            </summary>
            <param name="measure1">The first measure.</param>
            <param name="measure2">The second measure.</param>
        </member>
        <member name="M:EaslyController.Controller.Measure.op_Multiply(EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Multiplies two measures.
            </summary>
            <param name="measure1">The first measure.</param>
            <param name="measure2">The second measure.</param>
        </member>
        <member name="M:EaslyController.Controller.Measure.ToString">
            <summary></summary>
        </member>
        <member name="T:EaslyController.Controller.RegionHelper">
            <summary>
            Helper class dedicated to measuring and arranging cells.
            </summary>
        </member>
        <member name="F:EaslyController.Controller.RegionHelper.Tolerance">
            <summary>
            Tolerance for comparing points, sizes and rects.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.RegionHelper.InvalidOrigin">
            <summary>
            An invalid location that can be used for initialization purpose.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.RegionHelper.InvalidSize">
            <summary>
            An invalid size that can be used for initialization purpose.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsZero(System.Double)">
            <summary>
            Checks if a value is zero, within a tolerance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsValid(EaslyController.Controller.Point)">
            <summary>
            Checks that a cell location is valid.
            </summary>
            <param name="point">The location to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsValid(EaslyController.Controller.Size)">
            <summary>
            Checks that a cell size is valid.
            </summary>
            <param name="size">The size to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsFixed(EaslyController.Controller.Point)">
            <summary>
            Checks that a cell location is fixed.
            </summary>
            <param name="point">The location to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsFixed(EaslyController.Controller.Size)">
            <summary>
            Checks that a cell size is fixed.
            </summary>
            <param name="size">The size to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsFixed(EaslyController.Controller.Rect)">
            <summary>
            Checks that a rectangle is fixed.
            </summary>
            <param name="rect">The rectangle to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsFloatingHorizontally(EaslyController.Controller.Point)">
            <summary>
            Checks that a cell size is floating horizontally.
            </summary>
            <param name="point">The location to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsStretchedHorizontally(EaslyController.Controller.Size)">
            <summary>
            Checks that a cell size is streched horizontally.
            </summary>
            <param name="size">The size to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsFloatingVertically(EaslyController.Controller.Point)">
            <summary>
            Checks that a cell size is floating vertically.
            </summary>
            <param name="point">The location to check.</param>
        </member>
        <member name="M:EaslyController.Controller.RegionHelper.IsStretchedVertically(EaslyController.Controller.Size)">
            <summary>
            Checks that a cell size is streched vertically.
            </summary>
            <param name="size">The size to check.</param>
        </member>
        <member name="T:EaslyController.Controller.Rect">
            <summary>
            Implements a structure that is used to describe a rectangular region.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Empty">
            <summary>
            The empty (0,0,0,0) region.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Controller.Rect"/> struct.
            </summary>
            <param name="x">The horizontal coordinate of the top left corner.</param>
            <param name="y">The vertical coordinate of the top left corner.</param>
            <param name="width">The region width.</param>
            <param name="height">The region height.</param>
        </member>
        <member name="M:EaslyController.Controller.Rect.#ctor(EaslyController.Controller.Point,EaslyController.Controller.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Controller.Rect"/> struct.
            </summary>
            <param name="origin">The location of the top left corner.</param>
            <param name="size">The region size.</param>
        </member>
        <member name="P:EaslyController.Controller.Rect.X">
            <summary>
            Horizontal coordinate of the top left corner.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Y">
            <summary>
            Vertical coordinate of the top left corner.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Origin">
            <summary>
            Origin of the top left corner.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Width">
            <summary>
            The region Width.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Height">
            <summary>
            The region Height.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Size">
            <summary>
            The region size
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.IsEmpty">
            <summary>
            True if the object is the empty region.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.IsVisible">
            <summary>
            True if the object represents a visible region.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Rect.Center">
            <summary>
            Location of the rectangle center.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Rect.IsPointInRect(System.Double,System.Double)">
            <summary>
            Checks if a point is within the rectangular region.
            </summary>
            <param name="x">X-coordinate of the point to check.</param>
            <param name="y">Y-coordinate of the point to check.</param>
        </member>
        <member name="M:EaslyController.Controller.Rect.VisibleUnion(EaslyController.Controller.Rect,EaslyController.Controller.Rect)">
            <summary>
            Returns the union of the visible surface of two rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
        </member>
        <member name="M:EaslyController.Controller.Rect.IsEqual(EaslyController.Controller.Rect,EaslyController.Controller.Rect)">
            <summary>
            Compares two regions.
            </summary>
            <param name="rect1">The first region.</param>
            <param name="rect2">The second region.</param>
        </member>
        <member name="M:EaslyController.Controller.Rect.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Rect.ToString(System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="provider">A format provider.</param>
        </member>
        <member name="M:EaslyController.Controller.Rect.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="format">A format.</param>
            <param name="formatProvider">A format provider.</param>
        </member>
        <member name="T:EaslyController.Controller.Point">
            <summary>
            Implements a structure that is used to describe the location of an object.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Point.Origin">
            <summary>
            The origin (0,0) location.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Point.#ctor(EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Controller.Point"/> struct.
            </summary>
            <param name="x">The horizontal coordinate.</param>
            <param name="y">The vertical coordinate.</param>
        </member>
        <member name="P:EaslyController.Controller.Point.X">
            <summary>
            Horizontal coordinate.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Point.Y">
            <summary>
            Vertical coordinate.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Point.IsOrigin">
            <summary>
            True if the object is the origin location.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Point.Opposite">
            <summary>
            The point at opposite coordinates.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Point.Moved(EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Returns a location corresponding to this point moved by the specified distance.
            </summary>
            <param name="distanceX">The horizontal distance.</param>
            <param name="distanceY">The vertical distance.</param>
        </member>
        <member name="M:EaslyController.Controller.Point.Distance(EaslyController.Controller.Point,EaslyController.Controller.Point)">
            <summary>
            Euclidean distance between two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:EaslyController.Controller.Point.SquaredDistance(EaslyController.Controller.Point,EaslyController.Controller.Point)">
            <summary>
            Euclidean distance between two points, squared.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:EaslyController.Controller.Point.IsEqual(EaslyController.Controller.Point,EaslyController.Controller.Point)">
            <summary>
            Compares two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:EaslyController.Controller.Point.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Point.ToString(System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="provider">A format provider.</param>
        </member>
        <member name="M:EaslyController.Controller.Point.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="format">A format.</param>
            <param name="formatProvider">A format provider.</param>
        </member>
        <member name="T:EaslyController.Controller.Padding">
            <summary>
            Implements a structure that is used to describe the padding around a rectangle.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Padding.Empty">
            <summary>
            The empty (0,0,0,0) padding.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Padding.#ctor(EaslyController.Controller.Measure,EaslyController.Controller.Measure,EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Controller.Padding"/> struct.
            </summary>
            <param name="left">The left padding.</param>
            <param name="top">The top padding.</param>
            <param name="right">The right padding.</param>
            <param name="bottom">The botton padding.</param>
        </member>
        <member name="P:EaslyController.Controller.Padding.Left">
            <summary>
            The left padding.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Padding.Top">
            <summary>
            The top padding.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Padding.Right">
            <summary>
            The right padding.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Padding.Bottom">
            <summary>
            The bottom padding.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Padding.IsEmpty">
            <summary>
            True if the object is the empty padding.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Padding.IsEqual(EaslyController.Controller.Padding,EaslyController.Controller.Padding)">
            <summary>
            Compares two sizes.
            </summary>
            <param name="padding1">The first padding.</param>
            <param name="padding2">The second padding.</param>
        </member>
        <member name="M:EaslyController.Controller.Padding.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Padding.ToString(System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="provider">A format provider.</param>
        </member>
        <member name="M:EaslyController.Controller.Padding.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="format">A format.</param>
            <param name="formatProvider">A format provider.</param>
        </member>
        <member name="T:EaslyController.Controller.Size">
            <summary>
            Implements a structure that is used to describe the size of an object.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Size.Empty">
            <summary>
            The empty (0,0) size.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Size.#ctor(EaslyController.Controller.Measure,EaslyController.Controller.Measure)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Controller.Size"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:EaslyController.Controller.Size.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Size.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Size.IsEmpty">
            <summary>
            True if the object is the empty size.
            </summary>
        </member>
        <member name="P:EaslyController.Controller.Size.IsVisible">
            <summary>
            True if the object represents a visible region.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Size.IsEqual(EaslyController.Controller.Size,EaslyController.Controller.Size)">
            <summary>
            Compares two sizes. Stretched sizes are never equal, even to themselves.
            </summary>
            <param name="size1">The first size.</param>
            <param name="size2">The second size.</param>
        </member>
        <member name="M:EaslyController.Controller.Size.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:EaslyController.Controller.Size.ToString(System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="provider">A format provider.</param>
        </member>
        <member name="M:EaslyController.Controller.Size.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a formatted string representation of this instance.
            </summary>
            <param name="format">A format.</param>
            <param name="formatProvider">A format provider.</param>
        </member>
        <member name="T:EaslyController.DebugObjects">
            <summary>
            Helper class for debugging.
            </summary>
        </member>
        <member name="P:EaslyController.DebugObjects.ReferenceTable">
            <summary>
            Table of references to various objects.
            </summary>
        </member>
        <member name="M:EaslyController.DebugObjects.AddReference(System.Object)">
            <summary>
            Adds or replaces a reference in <see cref="P:EaslyController.DebugObjects.ReferenceTable"/>.
            </summary>
            <param name="reference">The added reference.</param>
        </member>
        <member name="M:EaslyController.DebugObjects.GetReferenceByInterface(System.Type)">
            <summary>
            Gets the first reference that supports interface <paramref name="t"/>.
            </summary>
            <param name="t">The interface type.</param>
        </member>
        <member name="T:EaslyController.StringHelper">
            <summary>
            Provides methods to handle strings modified by keyboard events.
            </summary>
        </member>
        <member name="M:EaslyController.StringHelper.VisibleSubset(System.String)">
            <summary>
            Gets the visible part of a string.
            </summary>
            <param name="text">The string to filter.</param>
        </member>
        <member name="M:EaslyController.StringHelper.FirstOnlyFormattedText(System.String)">
            <summary>
            Returns the text modified with <see cref="F:EaslyController.Constants.AutoFormatModes.FirstOnly"/>.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:EaslyController.StringHelper.FirstOrAllFormattedText(System.String)">
            <summary>
            Returns the text modified with <see cref="F:EaslyController.Constants.AutoFormatModes.FirstOrAll"/>.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:EaslyController.StringHelper.AllLowercaseFormattedText(System.String)">
            <summary>
            Returns the text modified with <see cref="F:EaslyController.Constants.AutoFormatModes.AllLowercase"/>.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:EaslyController.Xaml.Type">
             <summary>
             Markup extension to declare types in Xaml.
            
             Xaml syntax:
               xmlns:xaml="clr-namespace:EaslyController.Xaml;assembly=Easly-Controller"
             For INode:
               MyProperty="{xaml:Type INode}"
             For IBlock{IIdentifier,Identifier}:
               MyProperty="{xaml:Type IBlock,IIdentifier,Identifier}"
             </summary>
        </member>
        <member name="M:EaslyController.Xaml.Type.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Xaml.Type"/> class.
            Creates a type with no generic argument.
            </summary>
            <param name="typeName">Type name, without namespace.</param>
        </member>
        <member name="M:EaslyController.Xaml.Type.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Xaml.Type"/> class.
            Creates a type with one generic argument.
            </summary>
            <param name="typeName">Type name, without namespace.</param>
            <param name="arg1">Type argument name.</param>
        </member>
        <member name="M:EaslyController.Xaml.Type.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.Xaml.Type"/> class.
            Creates a type with two generic arguments.
            </summary>
            <param name="typeName">Type name, without namespace.</param>
            <param name="arg1">Type argument name #1.</param>
            <param name="arg2">Type argument name #2.</param>
        </member>
        <member name="M:EaslyController.Xaml.Type.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
        </member>
        <member name="P:EaslyController.Xaml.Type.TypeName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="P:EaslyController.Xaml.Type.Arg1">
            <summary>
            Type argument name #1. Can be null if no generic argument.
            </summary>
        </member>
        <member name="P:EaslyController.Xaml.Type.Arg2">
            <summary>
            Type argument name #2. Can be null if none or just one generic argument.
            </summary>
        </member>
        <member name="T:EaslyController.IEqualComparable">
            <summary>
            Represent objects that can be compared for equality in a tree, while avoiding infinite recursion.
            </summary>
        </member>
        <member name="M:EaslyController.IEqualComparable.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Checks that two objects are equal.
            </summary>
            <param name="comparer">The comparison object to use.</param>
            <param name="other">The other instance of an object to compare with this one.</param>
        </member>
        <member name="T:EaslyController.CompareEqual">
            <summary>
            Compares <see cref="T:EaslyController.IEqualComparable"/> objects.
            </summary>
        </member>
        <member name="M:EaslyController.CompareEqual.New(System.Boolean)">
            <summary>
            Create a new comparer.
            </summary>
            <param name="canReturnFalse">True if this comparer might return false during normal operations.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EaslyController.CompareEqual"/> class.
            </summary>
            <param name="canReturnFalse">True if the comparer should not break when a comparison fails.</param>
        </member>
        <member name="P:EaslyController.CompareEqual.CanReturnFalse">
            <summary>
            True if this comparer might return false during normal operations.
            </summary>
        </member>
        <member name="P:EaslyController.CompareEqual.ComparisonCount">
            <summary>
            Number of comparisons performed.
            </summary>
        </member>
        <member name="P:EaslyController.CompareEqual.FailIndex">
            <summary>
            Index at which a comparison will fail regardless of the actual equality.
            </summary>
        </member>
        <member name="M:EaslyController.CompareEqual.VerifyEqual(EaslyController.IEqualComparable,EaslyController.IEqualComparable)">
            <summary>
            Checks that two objects are equal.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.Reset">
            <summary>
            Resets the comparison history (for debug purpose).
            </summary>
        </member>
        <member name="M:EaslyController.CompareEqual.SetFailIndex(System.Int32)">
            <summary>
            Set the index at which a comparison will fail regardless of the actual equality.
            </summary>
            <param name="failIndex">The index at which the comparison will fail.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.Failed">
            <summary>
            Proxy that breaks on failure.
            </summary>
            <returns>Always return false.</returns>
        </member>
        <member name="M:EaslyController.CompareEqual.IsTrue(System.Boolean)">
            <summary>
            Check that a condition is true.
            </summary>
            <param name="condition">The condition to check.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.IsSameType``1(EaslyController.IEqualComparable,``0@)">
            <summary>
            Checks if an object is of the expected type, and return the corresponding converted reference
            </summary>
            <typeparam name="TObject">Any <see cref="T:EaslyController.IEqualComparable"/>.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="asTObject">The converted object if successful. Null otherwise.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.IsSameReference(System.Object,System.Object)">
            <summary>
            Checks that two references refer to the same object.
            </summary>
            <param name="object1">The first reference.</param>
            <param name="object2">The second reference.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.IsSameCount(System.Int32,System.Int32)">
            <summary>
            Checks that two counts are equal.
            </summary>
            <param name="count1">The first count.</param>
            <param name="count2">The second count.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.IsSameInteger(System.Int32,System.Int32)">
            <summary>
            Checks that two integer values are equal.
            </summary>
            <param name="int1">The first value.</param>
            <param name="int2">The second value.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.IsSameString(System.String,System.String)">
            <summary>
            Checks that two strings are equal.
            </summary>
            <param name="string1">The first string.</param>
            <param name="string2">The second string.</param>
        </member>
        <member name="M:EaslyController.CompareEqual.CoverIsEqual(EaslyController.IEqualComparable,EaslyController.IEqualComparable,System.Boolean)">
            <summary>
            Compares two objects, ensuring all failure path are executed.
            </summary>
            <param name="object1">The first object to compare.</param>
            <param name="object2">The Second object to compare.</param>
            <param name="canReturnFalse">True if this comparer might return false during normal operations.</param>
        </member>
        <member name="T:EaslyController.ControllerTools">
            <summary>
            Tool used to check that objects are created at the same layer than the caller.
            </summary>
        </member>
        <member name="M:EaslyController.ControllerTools.ResetExpectedName">
            <summary>
            Reset the tool (for debug purpose).
            </summary>
        </member>
        <member name="T:EaslyController.Stats">
            <summary>
            Statistics for a node tree.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.NodeCount">
            <summary>
            Number of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.PlaceholderNodeCount">
            <summary>
            Number of nodes that are not optional.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.OptionalNodeCount">
            <summary>
            Number of optional nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.AssignedOptionalNodeCount">
            <summary>
            Number of optional nodes that are currently assigned.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.ListCount">
            <summary>
            Number of lists of nodes.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.BlockListCount">
            <summary>
            Number of block lists.
            </summary>
        </member>
        <member name="P:EaslyController.Stats.BlockCount">
            <summary>
            Number of blocks in block lists.
            </summary>
        </member>
        <member name="M:EaslyController.Stats.IsEqual(EaslyController.CompareEqual,EaslyController.IEqualComparable)">
            <summary>
            Compares two <see cref="T:EaslyController.Stats"/> objects.
            </summary>
            <param name="comparer">The comparison support object.</param>
            <param name="other">The other object.</param>
        </member>
    </members>
</doc>
